# CI/CD Pipeline for TheWell Pipeline
# Comprehensive workflow for testing, building, and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: thewell_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run typecheck
      continue-on-error: true

    - name: Setup test database
      run: |
        export DATABASE_URL=postgresql://test_user:test_password@localhost:5432/thewell_test
        export REDIS_URL=redis://localhost:6379
        npm run db:setup:test
      env:
        NODE_ENV: test

    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/thewell_test
        REDIS_URL: redis://localhost:6379

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/thewell_test
        REDIS_URL: redis://localhost:6379

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/thewell_test
        REDIS_URL: redis://localhost:6379

    - name: Generate test coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/thewell_test
        REDIS_URL: redis://localhost:6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Security audit
      run: npm audit --audit-level moderate || echo "Security audit completed with warnings"
      continue-on-error: true

    - name: Check for vulnerabilities
      run: npx snyk test || echo "Vulnerability check completed with warnings"
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true

  # Build and Push Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to ECS Development
      run: |
        # Update ECS service with new image
        aws ecs update-service \
          --cluster thewell-dev-cluster \
          --service thewell-dev-service \
          --force-new-deployment \
          --task-definition thewell-dev-task:${{ github.run_number }}

    - name: Run database migrations
      run: |
        # Run migrations against development database
        export DATABASE_URL=${{ secrets.DEV_DATABASE_URL }}
        npm run db:migrate

    - name: Run smoke tests
      run: |
        # Basic health check
        curl -f https://dev.thewell.pipeline.com/health || exit 1
        # API functionality test
        npm run test:smoke -- --url=https://dev.thewell.pipeline.com
      env:
        SMOKE_TEST_API_KEY: ${{ secrets.DEV_API_KEY }}

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Development deployment completed: ${{ github.sha }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security, deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to ECS Staging
      run: |
        aws ecs update-service \
          --cluster thewell-staging-cluster \
          --service thewell-staging-service \
          --force-new-deployment \
          --task-definition thewell-staging-task:${{ github.run_number }}

    - name: Run database migrations
      run: |
        export DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
        npm run db:migrate

    - name: Run full test suite
      run: |
        npm run test:staging
      env:
        STAGING_API_URL: https://staging.thewell.pipeline.com
        STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}

    - name: Performance testing
      run: |
        npm run test:performance -- --url=https://staging.thewell.pipeline.com
      env:
        PERFORMANCE_TEST_DURATION: 300 # 5 minutes

    - name: Notify staging deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Staging deployment completed: ${{ github.sha }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'release'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create deployment backup
      run: |
        # Backup production database
        aws rds create-db-snapshot \
          --db-instance-identifier thewell-prod \
          --db-snapshot-identifier thewell-prod-pre-deploy-$(date +%Y%m%d%H%M%S)

    - name: Blue-Green Deployment
      run: |
        # Implement blue-green deployment strategy
        ./scripts/blue-green-deploy.sh \
          --cluster thewell-prod-cluster \
          --service thewell-prod-service \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Run database migrations
      run: |
        export DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
        npm run db:migrate

    - name: Health check
      run: |
        # Comprehensive health check
        ./scripts/health-check.sh --url=https://thewell.pipeline.com
        
    - name: Monitor deployment
      run: |
        # Monitor key metrics for 10 minutes
        ./scripts/monitor-deployment.sh --duration=600

    - name: Rollback on failure
      if: failure()
      run: |
        # Automatic rollback procedure
        ./scripts/rollback.sh \
          --cluster thewell-prod-cluster \
          --service thewell-prod-service

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production'
        text: 'Production deployment ${{ job.status }}: ${{ github.sha }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Update monitoring dashboards
      run: |
        # Update Grafana dashboards with new version info
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"tags":["deployment"],"text":"Production deployment: ${{ github.sha }}","time":${{ github.event.head_commit.timestamp }}}' \
          https://grafana.thewell.pipeline.com/api/annotations

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
    - name: Clean up old images
      run: |
        # Keep only the last 10 images
        echo "Cleaning up old container images..."
        # Implementation would clean up old images from registry

    - name: Update documentation
      if: github.event_name == 'release'
      run: |
        # Auto-generate and update deployment documentation
        echo "Updating deployment documentation..."

# Secrets required:
# - GITHUB_TOKEN (automatic)
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY
# - DEV_DATABASE_URL
# - STAGING_DATABASE_URL
# - PROD_DATABASE_URL
# - DEV_API_KEY
# - STAGING_API_KEY
# - SLACK_WEBHOOK_URL
# - SNYK_TOKEN
# - GRAFANA_API_KEY