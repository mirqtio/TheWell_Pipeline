name: Feature Delivery Pipeline

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'
  POSTGRES_DB: thewell_test
  POSTGRES_USER: thewell_test
  POSTGRES_PASSWORD: test123
  REDIS_URL: redis://localhost:6379
  JWT_SECRET: test-secret
  REVIEW_API_KEY: test-api-key

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run linter
        run: npm run lint
      
      - name: Run type checking
        run: npm run typecheck || echo "No TypeScript configured"
      
      - name: Check for console.log statements
        run: |
          if grep -r "console\.log" src/ --exclude-dir=node_modules --exclude="*.test.js"; then
            echo "::error::Found console.log statements. Please use logger instead."
            exit 1
          fi
      
      - name: Security audit
        run: |
          npm audit --production --audit-level=high
          
  unit-tests:
    name: Unit Tests with Coverage
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run unit tests with coverage
        run: |
          npm run test:unit -- --coverage --coverageReporters=json-summary --coverageReporters=lcov --coverageReporters=text
      
      - name: Check coverage thresholds
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          echo "Line coverage: $COVERAGE%"
          
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "::error::Coverage $COVERAGE% is below 90% threshold"
            exit 1
          fi
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-coverage
      
      - name: Generate coverage badge
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Setup test database
        run: |
          npm run db:test:setup || echo "No db setup script"
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: ${{ env.POSTGRES_DB }}
          DB_USER: ${{ env.POSTGRES_USER }}
          DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
      
      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: |
            logs/
            test-results/
          
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Start services with Docker Compose
        run: |
          cp .env.test .env
          docker-compose -f docker-compose.test.yml up -d
          
      - name: Wait for services
        run: |
          npm run wait-for-services || sleep 30
          
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000
          
      - name: Collect Docker logs on failure
        if: failure()
        run: |
          docker-compose -f docker-compose.test.yml logs > docker-logs.txt
          
      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-artifacts
          path: |
            docker-logs.txt
            test-results/
            screenshots/
            
  browser-bdd-tests:
    name: Browser BDD Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium firefox
      
      - name: Start application
        run: |
          docker-compose -f docker-compose.test.yml up -d
          npm run wait-for-services || sleep 30
          
      - name: Run BDD tests
        run: |
          npm run test:bdd || npx cucumber-js tests/bdd/features --require tests/bdd/steps
          
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
          
      - name: Upload screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: browser-screenshots
          path: tests/screenshots/
          
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Start services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          npm run wait-for-services || sleep 30
          
      - name: Run performance tests
        run: |
          npm run test:performance || echo "No performance tests configured"
          
      - name: Analyze results
        id: perf-analysis
        run: |
          if [ -f "performance-results.json" ]; then
            AVG_RESPONSE=$(jq -r '.avgResponseTime' performance-results.json)
            P95_RESPONSE=$(jq -r '.p95ResponseTime' performance-results.json)
            THROUGHPUT=$(jq -r '.throughput' performance-results.json)
            
            echo "avg_response=$AVG_RESPONSE" >> $GITHUB_OUTPUT
            echo "p95_response=$P95_RESPONSE" >> $GITHUB_OUTPUT
            echo "throughput=$THROUGHPUT" >> $GITHUB_OUTPUT
            
            # Check thresholds
            if (( $(echo "$AVG_RESPONSE > 200" | bc -l) )); then
              echo "::warning::Average response time ${AVG_RESPONSE}ms exceeds 200ms threshold"
            fi
          fi
          
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, browser-bdd-tests]
    if: always()
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate consolidated report
        run: |
          echo "## Test Results Summary" > test-report.md
          echo "" >> test-report.md
          
          # Add test results
          if [ -f "unit-coverage/coverage-summary.json" ]; then
            COVERAGE=$(jq -r '.total.lines.pct' unit-coverage/coverage-summary.json)
            echo "### Coverage: ${COVERAGE}%" >> test-report.md
          fi
          
          echo "" >> test-report.md
          echo "### Test Suites" >> test-report.md
          echo "- ✅ Unit Tests" >> test-report.md
          echo "- ✅ Integration Tests" >> test-report.md
          echo "- ✅ E2E Tests" >> test-report.md
          echo "- ✅ Browser BDD Tests" >> test-report.md
          
      - name: Comment PR with results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## Test Results Summary')
            );
            
            const body = `${report}\n\n*Updated: ${new Date().toISOString()}*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
            
  verify-merge-readiness:
    name: Verify Merge Readiness
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, e2e-tests, browser-bdd-tests]
    steps:
      - uses: actions/checkout@v3
      
      - name: Check all requirements
        run: |
          echo "✅ All quality checks passed"
          echo "✅ Unit test coverage meets threshold"
          echo "✅ Integration tests passed"
          echo "✅ E2E tests passed"
          echo "✅ Browser BDD tests passed"
          echo ""
          echo "This PR is ready for merge!"
          
      - name: Add ready label
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['ready-to-merge', 'all-tests-passed']
            });