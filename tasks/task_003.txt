# Task ID: 3
# Title: Knowledge Base Storage System
# Status: pending
# Dependencies: 1, 2
# Priority: high
# Description: Create a PostgreSQL-based storage system with vector search capabilities, aggressive deduplication, and source metadata preservation.
# Details:
Implement a knowledge base storage system with the following components:

1. PostgreSQL schema with pgvector extension:
   ```sql
   -- Enable pgvector extension
   CREATE EXTENSION IF NOT EXISTS vector;
   
   -- Core document storage
   CREATE TABLE documents (
     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
     canonical_id UUID REFERENCES documents(id), -- For deduplication
     content TEXT NOT NULL,
     content_hash VARCHAR(64) NOT NULL, -- SHA-256 hash
     embedding vector(1536), -- pgvector type for text-embedding-3-small
     
     source_id UUID REFERENCES sources(id),
     source_type VARCHAR(50) NOT NULL,
     visibility VARCHAR(20) DEFAULT 'internal', -- internal/external
     believability_score DECIMAL(3,2) DEFAULT 0.5, -- 0-1 scale
     
     metadata JSONB NOT NULL DEFAULT '{}',
     enrichments JSONB DEFAULT '{}',
     
     created_at TIMESTAMP DEFAULT NOW(),
     updated_at TIMESTAMP DEFAULT NOW(),
     ingested_at TIMESTAMP NOT NULL,
     
     -- Indexes
     INDEX idx_embedding USING ivfflat (embedding vector_cosine_ops),
     INDEX idx_content_hash (content_hash),
     INDEX idx_source (source_id, source_type),
     INDEX idx_visibility (visibility),
     INDEX idx_metadata_gin USING gin (metadata),
     INDEX idx_created_at (created_at)
   ) PARTITION BY RANGE (ingested_at);
   ```

2. Deduplication engine with multiple strategies:
   - Exact matching via content hashes
   - Semantic similarity via embedding distance
   - Fuzzy matching for near-duplicates
   - Source metadata preservation when merging duplicates

3. Feedback integration schema:
   ```sql
   CREATE TABLE feedback (
     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
     document_id UUID REFERENCES documents(id),
     app_id VARCHAR(100) NOT NULL,
     feedback_type VARCHAR(50) NOT NULL, -- rating/annotation/chat_log
     content JSONB NOT NULL,
     
     user_id VARCHAR(255), -- From downstream app
     session_id VARCHAR(255),
     
     created_at TIMESTAMP DEFAULT NOW(),
     processed_at TIMESTAMP,
     
     INDEX idx_document_feedback (document_id, feedback_type),
     INDEX idx_app (app_id, created_at),
     INDEX idx_processing (processed_at)
   );
   ```

4. Document visibility controls with row-level security

5. Prisma ORM integration with schema versioning

6. Redis caching layer for popular queries

# Test Strategy:
1. Database schema validation tests
2. Deduplication algorithm tests with various similarity scenarios
3. Performance tests for vector similarity searches
4. Integration tests for feedback processing
5. Security tests for visibility controls
6. Cache effectiveness tests
7. Data integrity tests for concurrent operations
8. Migration path tests for future Neo4j compatibility
9. CI verification through GitHub logs via MCP or CLI

# Subtasks:
## 1. Schema Design for Storage System [pending]
### Dependencies: None
### Description: Design the core database schema, including tables, relationships, and indexing strategies. Incorporate advanced features such as pgvector for vector search and partitioning for scalability.
### Details:
Define entities, relationships, and data types. Plan for scalability and performance by leveraging partitioning and vector search capabilities. Testing requirements: 1) Write unit tests for schema validation and constraints, 2) Create integration tests for database operations, 3) Implement e2e tests for complete data flows, 4) Run all tests and resolve any issues, 5) Merge to master and verify CI passes via GitHub logs.

## 2. Deduplication Engine Implementation [pending]
### Dependencies: 3.1
### Description: Develop a deduplication engine to identify and eliminate duplicate records within the storage system, ensuring data integrity and efficient storage utilization.
### Details:
Design algorithms and workflows for detecting duplicates, possibly using hashing or similarity search (e.g., leveraging pgvector). Integrate with the core schema. Testing requirements: 1) Write unit tests for deduplication algorithms, 2) Create integration tests with sample duplicate data, 3) Implement e2e tests for complete deduplication workflows, 4) Run all tests and resolve any issues, 5) Merge to master and verify CI passes via GitHub logs.

## 3. Feedback Schema Integration [pending]
### Dependencies: 3.1
### Description: Extend the database schema to support user feedback, including ratings, comments, and metadata for tracking feedback history.
### Details:
Design tables and relationships for storing feedback data, ensuring referential integrity and efficient querying. Testing requirements: 1) Write unit tests for feedback schema validation, 2) Create integration tests for feedback data operations, 3) Implement e2e tests for complete feedback workflows, 4) Run all tests and resolve any issues, 5) Merge to master and verify CI passes via GitHub logs.

## 4. Visibility Controls Design [pending]
### Dependencies: 3.1
### Description: Implement visibility and access control mechanisms within the schema to manage data privacy, user permissions, and sharing settings.
### Details:
Define roles, permissions, and access control lists (ACLs) at the schema level. Ensure compliance with security requirements. Testing requirements: 1) Write unit tests for visibility logic and access control, 2) Create integration tests for permission enforcement, 3) Implement e2e tests for visibility workflows, 4) Run all tests and resolve any issues, 5) Merge to master and verify CI passes via GitHub logs.

## 5. ORM Integration [pending]
### Dependencies: 3.1
### Description: Integrate the schema with an Object-Relational Mapping (ORM) framework to facilitate application-level data access and manipulation.
### Details:
Map database tables and relationships to ORM models. Ensure support for advanced features like partitioning and vector fields. Testing requirements: 1) Write unit tests for ORM models and operations, 2) Create integration tests for ORM-database interactions, 3) Implement e2e tests for complete data access flows, 4) Run all tests and resolve any issues, 5) Merge to master and verify CI passes via GitHub logs.

## 6. Caching Layer Implementation [pending]
### Dependencies: 3.1
### Description: Design and implement a caching strategy to improve data retrieval performance and reduce database load.
### Details:
Select appropriate caching technologies (e.g., Redis, Memcached). Identify cacheable queries and data, and implement cache invalidation policies. Testing requirements: 1) Write unit tests for cache operations and invalidation, 2) Create integration tests for cache hit/miss scenarios, 3) Implement e2e tests for complete caching workflows, 4) Run all tests and resolve any issues, 5) Merge to master and verify CI passes via GitHub logs.

## 7. Migration Planning and Performance/Security Testing [pending]
### Dependencies: 3.1, 3.2, 3.3, 3.4, 3.5, 3.6
### Description: Plan for data migration from existing systems and conduct thorough performance and security testing of the storage system.
### Details:
Develop migration scripts and rollback strategies. Perform load testing, query benchmarking, and security audits to ensure robustness. Testing requirements: 1) Write unit tests for migration scripts, 2) Create integration tests for migration processes, 3) Implement e2e tests for complete migration workflows, 4) Run all tests and resolve any issues, 5) Merge to master and verify CI passes via GitHub logs.

