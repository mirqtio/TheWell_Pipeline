{"numFailedTestSuites":6,"numFailedTests":11,"numPassedTestSuites":58,"numPassedTests":1477,"numPendingTestSuites":0,"numPendingTests":2,"numRuntimeErrorTestSuites":2,"numTodoTests":0,"numTotalTestSuites":64,"numTotalTests":1490,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1749171731548,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["DynamicUnstructuredSourceHandler","Configuration Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Configuration Validation should validate valid configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate valid configuration"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Configuration Validation"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Configuration Validation should reject configuration without targets","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject configuration without targets"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Configuration Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Configuration Validation should reject configuration with empty targets array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject configuration with empty targets array"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Configuration Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Configuration Validation should validate target configurations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate target configurations"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Configuration Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Configuration Validation should validate selector configurations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate selector configurations"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Initialization should initialize successfully with valid configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize successfully with valid configuration"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Initialization should handle browser initialization failure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle browser initialization failure"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Discovery"],"duration":4020,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Discovery should discover articles from target sites","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should discover articles from target sites"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Discovery"],"duration":3009,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Discovery should handle pagination","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle pagination"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Discovery"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Discovery should respect robots.txt when enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should respect robots.txt when enabled"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Discovery"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Discovery should handle discovery errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle discovery errors gracefully"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Content Extraction"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Content Extraction should extract article content using selectors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should extract article content using selectors"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Content Extraction"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Content Extraction should handle missing content elements","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing content elements"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Content Extraction"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Content Extraction should handle extraction errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle extraction errors"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Content Extraction"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Content Extraction should apply content filters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should apply content filters"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Content Transformation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Content Transformation should transform extracted content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should transform extracted content"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Content Transformation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Content Transformation should handle missing title in metadata","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing title in metadata"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Selector Evaluation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Selector Evaluation should evaluate selectors correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should evaluate selectors correctly"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Pagination Handling"],"duration":2004,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Pagination Handling should handle pagination correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle pagination correctly"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Pagination Handling"],"duration":1006,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Pagination Handling should respect maxPages limit","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should respect maxPages limit"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Helper Methods"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Helper Methods should generate document ID from URL","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate document ID from URL"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Helper Methods"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Helper Methods should clean extracted content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clean extracted content"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Helper Methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Helper Methods should validate content against filters","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate content against filters"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Helper Methods"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Helper Methods should check robots.txt compliance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should check robots.txt compliance"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Helper Methods"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Helper Methods should count words correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should count words correctly"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Helper Methods"],"duration":103,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Helper Methods should apply delay between requests","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should apply delay between requests"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Cleanup"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Cleanup should cleanup browser resources","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cleanup browser resources"},{"ancestorTitles":["DynamicUnstructuredSourceHandler","Cleanup"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DynamicUnstructuredSourceHandler Cleanup should handle cleanup when browser not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cleanup when browser not initialized"}],"endTime":1749171742154,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/ingestion/handlers/DynamicUnstructuredSourceHandler.test.js","startTime":1749171731581,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["AnthropicProvider","constructor"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider constructor should throw error without API key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error without API key"},{"ancestorTitles":["AnthropicProvider","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider constructor should initialize with API key","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with API key"},{"ancestorTitles":["AnthropicProvider","constructor"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider constructor should use default configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should use default configuration"},{"ancestorTitles":["AnthropicProvider","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider constructor should use custom configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should use custom configuration"},{"ancestorTitles":["AnthropicProvider","getSupportedModels"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider getSupportedModels should return list of supported models","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return list of supported models"},{"ancestorTitles":["AnthropicProvider","calculateCost"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider calculateCost should calculate cost for claude-3-sonnet","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should calculate cost for claude-3-sonnet"},{"ancestorTitles":["AnthropicProvider","calculateCost"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider calculateCost should calculate cost for claude-3-haiku","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate cost for claude-3-haiku"},{"ancestorTitles":["AnthropicProvider","calculateCost"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider calculateCost should calculate cost for claude-3-opus","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate cost for claude-3-opus"},{"ancestorTitles":["AnthropicProvider","calculateCost"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider calculateCost should throw error for unsupported model","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for unsupported model"},{"ancestorTitles":["AnthropicProvider","calculateCost"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider calculateCost should handle fractional costs correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle fractional costs correctly"},{"ancestorTitles":["AnthropicProvider","complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider complete should complete successfully with default model","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should complete successfully with default model"},{"ancestorTitles":["AnthropicProvider","complete"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider complete should complete with custom model and options","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should complete with custom model and options"},{"ancestorTitles":["AnthropicProvider","complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider complete should throw error for unsupported model","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for unsupported model"},{"ancestorTitles":["AnthropicProvider","complete"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider complete should handle timeout","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle timeout"},{"ancestorTitles":["AnthropicProvider","complete"],"duration":1003,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider complete should retry on retryable errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should retry on retryable errors"},{"ancestorTitles":["AnthropicProvider","complete"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider complete should not retry on non-retryable errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not retry on non-retryable errors"},{"ancestorTitles":["AnthropicProvider","complete"],"duration":3006,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider complete should fail after max retries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fail after max retries"},{"ancestorTitles":["AnthropicProvider","complete"],"duration":3005,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider complete should increment request and error counters","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should increment request and error counters"},{"ancestorTitles":["AnthropicProvider","makeRequest"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider makeRequest should make request with correct headers","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should make request with correct headers"},{"ancestorTitles":["AnthropicProvider","makeRequest"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider makeRequest should handle HTTP errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle HTTP errors"},{"ancestorTitles":["AnthropicProvider","makeRequest"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider makeRequest should handle network errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle network errors"},{"ancestorTitles":["AnthropicProvider","isNonRetryableError"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider isNonRetryableError should identify non-retryable status codes","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should identify non-retryable status codes"},{"ancestorTitles":["AnthropicProvider","isNonRetryableError"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider isNonRetryableError should identify non-retryable error types","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should identify non-retryable error types"},{"ancestorTitles":["AnthropicProvider","isNonRetryableError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AnthropicProvider isNonRetryableError should identify retryable errors","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should identify retryable errors"}],"endTime":1749171749444,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/enrichment/providers/AnthropicProvider.test.js","startTime":1749171742167,"status":"focused","summary":""},{"assertionResults":[{"ancestorTitles":["OpenAIProvider","constructor"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider constructor should throw error without API key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error without API key"},{"ancestorTitles":["OpenAIProvider","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider constructor should initialize with API key","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with API key"},{"ancestorTitles":["OpenAIProvider","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider constructor should use default configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use default configuration"},{"ancestorTitles":["OpenAIProvider","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider constructor should use custom configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use custom configuration"},{"ancestorTitles":["OpenAIProvider","getSupportedModels"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider getSupportedModels should return list of supported models","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return list of supported models"},{"ancestorTitles":["OpenAIProvider","calculateCost"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider calculateCost should calculate cost for gpt-4-turbo","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should calculate cost for gpt-4-turbo"},{"ancestorTitles":["OpenAIProvider","calculateCost"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider calculateCost should calculate cost for gpt-3.5-turbo","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate cost for gpt-3.5-turbo"},{"ancestorTitles":["OpenAIProvider","calculateCost"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider calculateCost should throw error for unsupported model","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for unsupported model"},{"ancestorTitles":["OpenAIProvider","calculateCost"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider calculateCost should handle fractional costs correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle fractional costs correctly"},{"ancestorTitles":["OpenAIProvider","complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider complete should complete successfully with default model","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should complete successfully with default model"},{"ancestorTitles":["OpenAIProvider","complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider complete should complete with custom model and options","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should complete with custom model and options"},{"ancestorTitles":["OpenAIProvider","complete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider complete should throw error for unsupported model","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for unsupported model"},{"ancestorTitles":["OpenAIProvider","complete"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider complete should handle timeout","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle timeout"},{"ancestorTitles":["OpenAIProvider","complete"],"duration":1002,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider complete should retry on retryable errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should retry on retryable errors"},{"ancestorTitles":["OpenAIProvider","complete"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider complete should not retry on non-retryable errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not retry on non-retryable errors"},{"ancestorTitles":["OpenAIProvider","complete"],"duration":3006,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider complete should fail after max retries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fail after max retries"},{"ancestorTitles":["OpenAIProvider","complete"],"duration":3007,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider complete should increment request and error counters","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should increment request and error counters"},{"ancestorTitles":["OpenAIProvider","makeRequest"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider makeRequest should make request with correct headers","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should make request with correct headers"},{"ancestorTitles":["OpenAIProvider","makeRequest"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider makeRequest should handle HTTP errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle HTTP errors"},{"ancestorTitles":["OpenAIProvider","makeRequest"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider makeRequest should handle network errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle network errors"},{"ancestorTitles":["OpenAIProvider","isNonRetryableError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider isNonRetryableError should identify non-retryable status codes","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should identify non-retryable status codes"},{"ancestorTitles":["OpenAIProvider","isNonRetryableError"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OpenAIProvider isNonRetryableError should identify retryable status codes","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should identify retryable status codes"}],"endTime":1749171756641,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/enrichment/providers/OpenAIProvider.test.js","startTime":1749171749449,"status":"focused","summary":""},{"assertionResults":[{"ancestorTitles":["HybridProcessingManager","initialization"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager initialization should initialize with default configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with default configuration"},{"ancestorTitles":["HybridProcessingManager","initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager initialization should initialize with custom configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with custom configuration"},{"ancestorTitles":["HybridProcessingManager","initialization"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager initialization should initialize strategy usage metrics","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize strategy usage metrics"},{"ancestorTitles":["HybridProcessingManager","document analysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager document analysis should analyze simple document correctly","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should analyze simple document correctly"},{"ancestorTitles":["HybridProcessingManager","document analysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager document analysis should detect code content type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect code content type"},{"ancestorTitles":["HybridProcessingManager","document analysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager document analysis should detect markdown content type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect markdown content type"},{"ancestorTitles":["HybridProcessingManager","document analysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager document analysis should calculate complexity based on document characteristics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate complexity based on document characteristics"},{"ancestorTitles":["HybridProcessingManager","document analysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager document analysis should determine sensitivity from metadata","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should determine sensitivity from metadata"},{"ancestorTitles":["HybridProcessingManager","strategy selection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager strategy selection should select monolithic strategy for simple documents","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should select monolithic strategy for simple documents"},{"ancestorTitles":["HybridProcessingManager","strategy selection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager strategy selection should select chunked strategy for large documents","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should select chunked strategy for large documents"},{"ancestorTitles":["HybridProcessingManager","strategy selection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager strategy selection should select agent strategy for complex documents","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should select agent strategy for complex documents"},{"ancestorTitles":["HybridProcessingManager","strategy selection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager strategy selection should enforce local processing for sensitive data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should enforce local processing for sensitive data"},{"ancestorTitles":["HybridProcessingManager","strategy selection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager strategy selection should consider cost constraints in strategy selection","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should consider cost constraints in strategy selection"},{"ancestorTitles":["HybridProcessingManager","provider routing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager provider routing should route to local providers for sensitive data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should route to local providers for sensitive data"},{"ancestorTitles":["HybridProcessingManager","provider routing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager provider routing should route to cloud providers for non-sensitive data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should route to cloud providers for non-sensitive data"},{"ancestorTitles":["HybridProcessingManager","provider routing"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager provider routing should allocate appropriate resources based on strategy","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should allocate appropriate resources based on strategy"},{"ancestorTitles":["HybridProcessingManager","monolithic processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager monolithic processing should execute monolithic processing successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should execute monolithic processing successfully"},{"ancestorTitles":["HybridProcessingManager","chunked processing"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager chunked processing should split document into chunks and process them","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should split document into chunks and process them"},{"ancestorTitles":["HybridProcessingManager","agent processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager agent processing should execute multi-step agent processing","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should execute multi-step agent processing"},{"ancestorTitles":["HybridProcessingManager","hybrid processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager hybrid processing should analyze sections and apply different strategies","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should analyze sections and apply different strategies"},{"ancestorTitles":["HybridProcessingManager","full processing workflow"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager full processing workflow should complete full processing workflow for simple document","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should complete full processing workflow for simple document"},{"ancestorTitles":["HybridProcessingManager","full processing workflow"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager full processing workflow should emit processing events","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit processing events"},{"ancestorTitles":["HybridProcessingManager","full processing workflow"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager full processing workflow should handle processing failures gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle processing failures gracefully"},{"ancestorTitles":["HybridProcessingManager","resource management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager resource management should track resource usage correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should track resource usage correctly"},{"ancestorTitles":["HybridProcessingManager","resource management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager resource management should respect concurrency limits","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should respect concurrency limits"},{"ancestorTitles":["HybridProcessingManager","metrics and recommendations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager metrics and recommendations should provide processing metrics","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should provide processing metrics"},{"ancestorTitles":["HybridProcessingManager","metrics and recommendations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager metrics and recommendations should provide processing recommendations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide processing recommendations"},{"ancestorTitles":["HybridProcessingManager","metrics and recommendations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager metrics and recommendations should recommend latency optimization for slow processing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should recommend latency optimization for slow processing"},{"ancestorTitles":["HybridProcessingManager","utility functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager utility functions should calculate document size correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate document size correctly"},{"ancestorTitles":["HybridProcessingManager","utility functions"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager utility functions should split documents into chunks correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should split documents into chunks correctly"},{"ancestorTitles":["HybridProcessingManager","utility functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager utility functions should analyze document sections correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should analyze document sections correctly"},{"ancestorTitles":["HybridProcessingManager","utility functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager utility functions should generate unique process IDs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate unique process IDs"},{"ancestorTitles":["HybridProcessingManager","shutdown"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager shutdown should shutdown gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should shutdown gracefully"},{"ancestorTitles":["HybridProcessingManager","shutdown"],"duration":1006,"failureDetails":[],"failureMessages":[],"fullName":"HybridProcessingManager shutdown should wait for active processes during shutdown","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should wait for active processes during shutdown"}],"endTime":1749171757883,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/enrichment/HybridProcessingManager.test.js","startTime":1749171756646,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["FailoverManager","Constructor and Initialization"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Constructor and Initialization should initialize with default configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with default configuration"},{"ancestorTitles":["FailoverManager","Constructor and Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Constructor and Initialization should initialize with custom configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with custom configuration"},{"ancestorTitles":["FailoverManager","Constructor and Initialization"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Constructor and Initialization should initialize provider states when providers are set","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize provider states when providers are set"},{"ancestorTitles":["FailoverManager","Provider Selection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Provider Selection should select providers based on score","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should select providers based on score"},{"ancestorTitles":["FailoverManager","Provider Selection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Provider Selection should exclude specified providers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should exclude specified providers"},{"ancestorTitles":["FailoverManager","Provider Selection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Provider Selection should exclude providers with open circuit breakers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should exclude providers with open circuit breakers"},{"ancestorTitles":["FailoverManager","Execution with Failover"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Execution with Failover should execute successfully with first provider","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should execute successfully with first provider"},{"ancestorTitles":["FailoverManager","Execution with Failover"],"duration":203,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Execution with Failover should failover to second provider when first fails","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should failover to second provider when first fails"},{"ancestorTitles":["FailoverManager","Execution with Failover"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Execution with Failover should throw error when all providers fail","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should throw error when all providers fail"},{"ancestorTitles":["FailoverManager","Execution with Failover"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Execution with Failover should emit events during execution","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit events during execution"},{"ancestorTitles":["FailoverManager","Retry Logic"],"duration":204,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Retry Logic should retry on retryable errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should retry on retryable errors"},{"ancestorTitles":["FailoverManager","Retry Logic"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Retry Logic should not retry on non-retryable errors","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should not retry on non-retryable errors"},{"ancestorTitles":["FailoverManager","Retry Logic"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Retry Logic should calculate retry delay with exponential backoff","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate retry delay with exponential backoff"},{"ancestorTitles":["FailoverManager","Circuit Breaker"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Circuit Breaker should open circuit breaker after threshold failures","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should open circuit breaker after threshold failures"},{"ancestorTitles":["FailoverManager","Circuit Breaker"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Circuit Breaker should transition to half-open after timeout","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should transition to half-open after timeout"},{"ancestorTitles":["FailoverManager","Circuit Breaker"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Circuit Breaker should close circuit breaker on successful execution","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should close circuit breaker on successful execution"},{"ancestorTitles":["FailoverManager","Health Monitoring"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Health Monitoring should perform health checks on providers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should perform health checks on providers"},{"ancestorTitles":["FailoverManager","Health Monitoring"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Health Monitoring should restore unhealthy provider to healthy on successful health check","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should restore unhealthy provider to healthy on successful health check"},{"ancestorTitles":["FailoverManager","Health Monitoring"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Health Monitoring should handle health check failures gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle health check failures gracefully"},{"ancestorTitles":["FailoverManager","Performance Metrics"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Performance Metrics should record success metrics","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should record success metrics"},{"ancestorTitles":["FailoverManager","Performance Metrics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Performance Metrics should record failure metrics","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should record failure metrics"},{"ancestorTitles":["FailoverManager","Performance Metrics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Performance Metrics should calculate provider reliability","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate provider reliability"},{"ancestorTitles":["FailoverManager","Performance Metrics"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Performance Metrics should calculate average cost","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate average cost"},{"ancestorTitles":["FailoverManager","Error Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Error Classification should identify retryable errors correctly","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should identify retryable errors correctly"},{"ancestorTitles":["FailoverManager","Error Classification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Error Classification should identify non-retryable errors correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should identify non-retryable errors correctly"},{"ancestorTitles":["FailoverManager","Statistics and Reporting"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Statistics and Reporting should return comprehensive failover statistics","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return comprehensive failover statistics"},{"ancestorTitles":["FailoverManager","Statistics and Reporting"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Statistics and Reporting should track provider failure counts","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should track provider failure counts"},{"ancestorTitles":["FailoverManager","Provider Scoring"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Provider Scoring should calculate provider scores based on performance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate provider scores based on performance"},{"ancestorTitles":["FailoverManager","Provider Scoring"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Provider Scoring should penalize providers with recent failures","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should penalize providers with recent failures"},{"ancestorTitles":["FailoverManager","Shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Shutdown should clear health check intervals on shutdown","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clear health check intervals on shutdown"},{"ancestorTitles":["FailoverManager","Event Emission"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Event Emission should emit circuit breaker opened event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit circuit breaker opened event"},{"ancestorTitles":["FailoverManager","Event Emission"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FailoverManager Event Emission should emit provider recovered event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit provider recovered event"}],"endTime":1749171758532,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/enrichment/FailoverManager.test.js","startTime":1749171757891,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PerformanceBenchmark","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark constructor should initialize with required dependencies","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize with required dependencies"},{"ancestorTitles":["PerformanceBenchmark","constructor"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark constructor should throw error without rag manager","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error without rag manager"},{"ancestorTitles":["PerformanceBenchmark","initialize"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark initialize should initialize successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["PerformanceBenchmark","initialize"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark initialize should not initialize twice","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not initialize twice"},{"ancestorTitles":["PerformanceBenchmark","runSequentialBenchmark"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark runSequentialBenchmark should run sequential benchmark successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should run sequential benchmark successfully"},{"ancestorTitles":["PerformanceBenchmark","runSequentialBenchmark"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark runSequentialBenchmark should handle query errors in sequential benchmark","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle query errors in sequential benchmark"},{"ancestorTitles":["PerformanceBenchmark","runSequentialBenchmark"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark runSequentialBenchmark should throw error if not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if not initialized"},{"ancestorTitles":["PerformanceBenchmark","runParallelBenchmark"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark runParallelBenchmark should run parallel benchmark successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should run parallel benchmark successfully"},{"ancestorTitles":["PerformanceBenchmark","runParallelBenchmark"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark runParallelBenchmark should handle missing parallel search manager","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing parallel search manager"},{"ancestorTitles":["PerformanceBenchmark","runComparisonBenchmark"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark runComparisonBenchmark should run comparison benchmark successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should run comparison benchmark successfully"},{"ancestorTitles":["PerformanceBenchmark","runComparisonBenchmark"],"duration":306,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark runComparisonBenchmark should provide performance recommendations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should provide performance recommendations"},{"ancestorTitles":["PerformanceBenchmark","analyzeTrends"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark analyzeTrends should analyze performance trends","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should analyze performance trends"},{"ancestorTitles":["PerformanceBenchmark","analyzeTrends"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark analyzeTrends should handle insufficient data for trends","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle insufficient data for trends"},{"ancestorTitles":["PerformanceBenchmark","getBenchmarkHistory"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark getBenchmarkHistory should return benchmark history","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return benchmark history"},{"ancestorTitles":["PerformanceBenchmark","getBenchmarkHistory"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark getBenchmarkHistory should limit history size","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should limit history size"},{"ancestorTitles":["PerformanceBenchmark","clearBenchmarkHistory"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark clearBenchmarkHistory should clear benchmark history","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clear benchmark history"},{"ancestorTitles":["PerformanceBenchmark","getStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark getStatus should return status when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return status when not initialized"},{"ancestorTitles":["PerformanceBenchmark","getStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark getStatus should return status when initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return status when initialized"},{"ancestorTitles":["PerformanceBenchmark","getStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark getStatus should indicate missing dependencies","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should indicate missing dependencies"},{"ancestorTitles":["PerformanceBenchmark","shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark shutdown should shutdown gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should shutdown gracefully"},{"ancestorTitles":["PerformanceBenchmark","shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark shutdown should handle shutdown when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown when not initialized"},{"ancestorTitles":["PerformanceBenchmark","performance calculations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark performance calculations should calculate throughput correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate throughput correctly"},{"ancestorTitles":["PerformanceBenchmark","performance calculations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark performance calculations should calculate speedup factor correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate speedup factor correctly"},{"ancestorTitles":["PerformanceBenchmark","performance calculations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PerformanceBenchmark performance calculations should handle edge cases in calculations","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle edge cases in calculations"}],"endTime":1749171759021,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/rag/performance/PerformanceBenchmark.test.js","startTime":1749171758538,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Reliability Routes","GET /sources/:sourceId"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /sources/:sourceId should get existing reliability score","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get existing reliability score"},{"ancestorTitles":["Reliability Routes","GET /sources/:sourceId"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /sources/:sourceId should calculate score if none exists","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should calculate score if none exists"},{"ancestorTitles":["Reliability Routes","GET /sources/:sourceId"],"duration":9,"failureDetails":[{}],"failureMessages":["Error: expected 200 \"OK\", got 401 \"Unauthorized\"\n    at Object.expect (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/routes/reliability.test.js:103:10)\n    at Promise.then.completed (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:444:34)\n----\n    at Test._assertStatus (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/supertest/lib/test.js:252:14)\n    at /Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/supertest/lib/test.js:308:13\n    at Test._assertFunction (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/supertest/lib/test.js:285:13)\n    at Test.assert (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/supertest/lib/test.js:164:23)\n    at Server.localAssert (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/supertest/lib/test.js:120:14)\n    at Object.onceWrapper (node:events:632:28)\n    at Server.emit (node:events:518:28)\n    at emitCloseNT (node:net:2418:8)\n    at processTicksAndRejections (node:internal/process/task_queues:89:21)"],"fullName":"Reliability Routes GET /sources/:sourceId should force recalculation when requested","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should force recalculation when requested"},{"ancestorTitles":["Reliability Routes","GET /sources/:sourceId"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /sources/:sourceId should handle source not found error","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle source not found error"},{"ancestorTitles":["Reliability Routes","GET /sources/:sourceId"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /sources/:sourceId should handle service errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle service errors"},{"ancestorTitles":["Reliability Routes","GET /sources"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /sources should get all reliability scores with default pagination","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get all reliability scores with default pagination"},{"ancestorTitles":["Reliability Routes","GET /sources"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /sources should handle custom pagination parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle custom pagination parameters"},{"ancestorTitles":["Reliability Routes","GET /sources"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /sources should filter by reliability level","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by reliability level"},{"ancestorTitles":["Reliability Routes","POST /calculate-all"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes POST /calculate-all should calculate reliability scores for all sources","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate reliability scores for all sources"},{"ancestorTitles":["Reliability Routes","POST /calculate-all"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes POST /calculate-all should use default batch size if not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default batch size if not provided"},{"ancestorTitles":["Reliability Routes","POST /calculate-all"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes POST /calculate-all should handle calculation errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle calculation errors"},{"ancestorTitles":["Reliability Routes","GET /sources/:sourceId/breakdown"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /sources/:sourceId/breakdown should get reliability score breakdown","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get reliability score breakdown"},{"ancestorTitles":["Reliability Routes","GET /sources/:sourceId/breakdown"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /sources/:sourceId/breakdown should handle missing reliability score","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing reliability score"},{"ancestorTitles":["Reliability Routes","GET /statistics"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /statistics should get reliability statistics summary","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get reliability statistics summary"},{"ancestorTitles":["Reliability Routes","GET /statistics"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /statistics should handle empty scores","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty scores"},{"ancestorTitles":["Reliability Routes","PUT /sources/:sourceId"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes PUT /sources/:sourceId should update reliability score for specific source","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update reliability score for specific source"},{"ancestorTitles":["Reliability Routes","PUT /sources/:sourceId"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes PUT /sources/:sourceId should use default timeframe if not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default timeframe if not provided"},{"ancestorTitles":["Reliability Routes","PUT /sources/:sourceId"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes PUT /sources/:sourceId should handle source not found error","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle source not found error"},{"ancestorTitles":["Reliability Routes","GET /sources/:sourceId/trends"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /sources/:sourceId/trends should get reliability trends for source","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get reliability trends for source"},{"ancestorTitles":["Reliability Routes","GET /sources/:sourceId/trends"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /sources/:sourceId/trends should handle missing reliability score for trends","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing reliability score for trends"},{"ancestorTitles":["Reliability Routes","GET /sources/:sourceId/trends"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes GET /sources/:sourceId/trends should handle missing historical data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing historical data"},{"ancestorTitles":["Reliability Routes","Error handling"],"duration":89,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes Error handling should handle missing sourceReliabilityService dependency","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle missing sourceReliabilityService dependency"},{"ancestorTitles":["Reliability Routes","Error handling"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes Error handling should handle service initialization error","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle service initialization error"},{"ancestorTitles":["Reliability Routes","Permission requirements"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes Permission requirements should require read permission for GET endpoints","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should require read permission for GET endpoints"},{"ancestorTitles":["Reliability Routes","Permission requirements"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Reliability Routes Permission requirements should require write permission for POST/PUT endpoints","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should require write permission for POST/PUT endpoints"}],"endTime":1749171759463,"message":"  ● Reliability Routes › GET /sources/:sourceId › should force recalculation when requested\n\n    expected 200 \"OK\", got 401 \"Unauthorized\"\n\n      101 |       const response = await request(app)\n      102 |         .get('/api/v1/reliability/sources/source-1?recalculate=true')\n    > 103 |         .expect(200);\n          |          ^\n      104 |\n      105 |       expect(response.body.success).toBe(true);\n      106 |       expect(response.body.data).toEqual(mockScore);\n\n      at Object.expect (tests/unit/web/routes/reliability.test.js:103:10)\n      ----\n      at Test._assertStatus (node_modules/supertest/lib/test.js:252:14)\n      at node_modules/supertest/lib/test.js:308:13\n      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)\n      at Test.assert (node_modules/supertest/lib/test.js:164:23)\n      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)\n","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/routes/reliability.test.js","startTime":1749171759026,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Review Routes","GET /pending"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes GET /pending should return pending documents from queue","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return pending documents from queue"},{"ancestorTitles":["Review Routes","GET /pending"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes GET /pending should handle search and filter parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle search and filter parameters"},{"ancestorTitles":["Review Routes","GET /pending"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes GET /pending should handle errors from queue manager","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should handle errors from queue manager"},{"ancestorTitles":["Review Routes","GET /document/:id"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes GET /document/:id should return document details from queue job","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return document details from queue job"},{"ancestorTitles":["Review Routes","GET /document/:id"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes GET /document/:id should handle document not found","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should handle document not found"},{"ancestorTitles":["Review Routes","POST /approve/:id"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /approve/:id should approve document successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should approve document successfully"},{"ancestorTitles":["Review Routes","POST /approve/:id"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /approve/:id should require valid approval data","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should require valid approval data"},{"ancestorTitles":["Review Routes","POST /reject/:id"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /reject/:id should reject document successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should reject document successfully"},{"ancestorTitles":["Review Routes","POST /reject/:id"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /reject/:id should require rejection reason","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should require rejection reason"},{"ancestorTitles":["Review Routes","POST /flag/:id"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /flag/:id should flag document successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should flag document successfully"},{"ancestorTitles":["Review Routes","POST /flag/:id"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /flag/:id should require flag type","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should require flag type"},{"ancestorTitles":["Review Routes","GET /stats"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes GET /stats should return review statistics from queue","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return review statistics from queue"},{"ancestorTitles":["Review Routes","POST /bulk/flag"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/flag should bulk flag multiple documents","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should bulk flag multiple documents"},{"ancestorTitles":["Review Routes","POST /bulk/flag"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/flag should handle partial failures in bulk flag","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle partial failures in bulk flag"},{"ancestorTitles":["Review Routes","POST /bulk/flag"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/flag should return 400 if documentIds is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if documentIds is not provided"},{"ancestorTitles":["Review Routes","POST /bulk/flag"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/flag should return 400 if type is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if type is not provided"},{"ancestorTitles":["Review Routes","POST /bulk/assign"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/assign should bulk assign multiple documents","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should bulk assign multiple documents"},{"ancestorTitles":["Review Routes","POST /bulk/assign"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/assign should handle partial failures in bulk assign","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle partial failures in bulk assign"},{"ancestorTitles":["Review Routes","POST /bulk/assign"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/assign should return 400 if documentIds is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if documentIds is not provided"},{"ancestorTitles":["Review Routes","POST /bulk/assign"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/assign should return 400 if assignTo is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if assignTo is not provided"},{"ancestorTitles":["Review Routes","POST /bulk/add-tags"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/add-tags should bulk add tags to multiple documents","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should bulk add tags to multiple documents"},{"ancestorTitles":["Review Routes","POST /bulk/add-tags"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/add-tags should handle partial failures in bulk add tags","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle partial failures in bulk add tags"},{"ancestorTitles":["Review Routes","POST /bulk/add-tags"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/add-tags should return 400 if documentIds is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if documentIds is not provided"},{"ancestorTitles":["Review Routes","POST /bulk/add-tags"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/add-tags should return 400 if tags is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if tags is not provided"},{"ancestorTitles":["Review Routes","POST /bulk/remove-tags"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/remove-tags should bulk remove tags from multiple documents","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should bulk remove tags from multiple documents"},{"ancestorTitles":["Review Routes","POST /bulk/remove-tags"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/remove-tags should handle partial failures in bulk remove tags","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle partial failures in bulk remove tags"},{"ancestorTitles":["Review Routes","POST /bulk/remove-tags"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/remove-tags should return 400 if documentIds is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if documentIds is not provided"},{"ancestorTitles":["Review Routes","POST /bulk/remove-tags"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Review Routes POST /bulk/remove-tags should return 400 if tags is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if tags is not provided"}],"endTime":1749171759688,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/routes/review.test.js","startTime":1749171759467,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ConfigManager","constructor"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager constructor should initialize with default options","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize with default options"},{"ancestorTitles":["ConfigManager","constructor"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager constructor should initialize with custom options","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with custom options"},{"ancestorTitles":["ConfigManager","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager constructor should register default validators","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should register default validators"},{"ancestorTitles":["ConfigManager","validator registration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager validator registration should register a new validator","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register a new validator"},{"ancestorTitles":["ConfigManager","validator registration"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager validator registration should throw error for invalid validator registration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for invalid validator registration"},{"ancestorTitles":["ConfigManager","configuration file handling"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration file handling should read JSON configuration file","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should read JSON configuration file"},{"ancestorTitles":["ConfigManager","configuration file handling"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration file handling should read JavaScript configuration file","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should read JavaScript configuration file"},{"ancestorTitles":["ConfigManager","configuration file handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration file handling should return null for non-existent file","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent file"},{"ancestorTitles":["ConfigManager","configuration file handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration file handling should throw error for invalid JSON","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid JSON"},{"ancestorTitles":["ConfigManager","configuration type detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration type detection should detect sources configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect sources configuration"},{"ancestorTitles":["ConfigManager","configuration type detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration type detection should detect ingestion configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect ingestion configuration"},{"ancestorTitles":["ConfigManager","configuration type detection"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration type detection should detect queue configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect queue configuration"},{"ancestorTitles":["ConfigManager","configuration type detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration type detection should return null for unknown configuration type","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null for unknown configuration type"},{"ancestorTitles":["ConfigManager","configuration validation"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration validation should validate sources configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate sources configuration"},{"ancestorTitles":["ConfigManager","configuration validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration validation should validate ingestion configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate ingestion configuration"},{"ancestorTitles":["ConfigManager","configuration validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration validation should validate queue configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate queue configuration"},{"ancestorTitles":["ConfigManager","configuration validation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration validation should reject invalid sources configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject invalid sources configuration"},{"ancestorTitles":["ConfigManager","configuration validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration validation should handle missing validator gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing validator gracefully"},{"ancestorTitles":["ConfigManager","configuration loading"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration loading should load and validate configuration file","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should load and validate configuration file"},{"ancestorTitles":["ConfigManager","configuration loading"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration loading should emit config-changed event when loading","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit config-changed event when loading"},{"ancestorTitles":["ConfigManager","file watching"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager file watching should start and stop watching","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should start and stop watching"},{"ancestorTitles":["ConfigManager","file watching"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager file watching should not start watching if already watching","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not start watching if already watching"},{"ancestorTitles":["ConfigManager","file watching"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager file watching should handle file changes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle file changes"},{"ancestorTitles":["ConfigManager","configuration management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration management should get specific configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get specific configuration"},{"ancestorTitles":["ConfigManager","configuration management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration management should get all configurations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get all configurations"},{"ancestorTitles":["ConfigManager","configuration management"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager configuration management should return undefined for non-existent configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return undefined for non-existent configuration"},{"ancestorTitles":["ConfigManager","statistics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager statistics should return configuration statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return configuration statistics"},{"ancestorTitles":["ConfigManager","error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager error handling should handle watcher errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle watcher errors"},{"ancestorTitles":["ConfigManager","error handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager error handling should handle configuration change errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle configuration change errors"},{"ancestorTitles":["ConfigManager","directory management"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager directory management should create config directory if it does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create config directory if it does not exist"},{"ancestorTitles":["ConfigManager","directory management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigManager directory management should not fail if config directory already exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not fail if config directory already exists"}],"endTime":1749171759952,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/config/ConfigManager.test.js","startTime":1749171759692,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Curation Workflow Routes","POST /start-review/:id"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes POST /start-review/:id should start review workflow for a document","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should start review workflow for a document"},{"ancestorTitles":["Curation Workflow Routes","POST /start-review/:id"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes POST /start-review/:id should return 404 if document not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 404 if document not found"},{"ancestorTitles":["Curation Workflow Routes","POST /bulk/approve"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes POST /bulk/approve should bulk approve multiple documents","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should bulk approve multiple documents"},{"ancestorTitles":["Curation Workflow Routes","POST /bulk/approve"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes POST /bulk/approve should handle errors for some documents in bulk operation","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle errors for some documents in bulk operation"},{"ancestorTitles":["Curation Workflow Routes","POST /bulk/approve"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes POST /bulk/approve should return 400 if documentIds is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if documentIds is not provided"},{"ancestorTitles":["Curation Workflow Routes","POST /bulk/reject"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes POST /bulk/reject should bulk reject multiple documents","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should bulk reject multiple documents"},{"ancestorTitles":["Curation Workflow Routes","POST /bulk/reject"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes POST /bulk/reject should return 400 if reason is not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if reason is not provided"},{"ancestorTitles":["Curation Workflow Routes","POST /bulk/start-review"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes POST /bulk/start-review should bulk start review for multiple documents","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should bulk start review for multiple documents"},{"ancestorTitles":["Curation Workflow Routes","GET /workflow/status"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes GET /workflow/status should get workflow status for multiple documents","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get workflow status for multiple documents"},{"ancestorTitles":["Curation Workflow Routes","GET /workflow/status"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes GET /workflow/status should return 400 if documentIds not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 400 if documentIds not provided"},{"ancestorTitles":["Curation Workflow Routes","GET /workflow/metrics"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes GET /workflow/metrics should get workflow metrics","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should get workflow metrics"},{"ancestorTitles":["Curation Workflow Routes","Error handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes Error handling should handle queue manager errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle queue manager errors gracefully"},{"ancestorTitles":["Curation Workflow Routes","Error handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes Error handling should handle job update errors in bulk operations","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle job update errors in bulk operations"},{"ancestorTitles":["Curation Workflow Routes","Permission checks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Curation Workflow Routes Permission checks should require appropriate permissions for each endpoint","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should require appropriate permissions for each endpoint"}],"endTime":1749171760142,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/routes/curation-workflow.test.js","startTime":1749171759955,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Error Handler Middleware","asyncHandler"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware asyncHandler should handle successful async operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle successful async operations"},{"ancestorTitles":["Error Handler Middleware","asyncHandler"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware asyncHandler should catch async errors and pass to error handler","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should catch async errors and pass to error handler"},{"ancestorTitles":["Error Handler Middleware","asyncHandler"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware asyncHandler should handle rejected promises","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle rejected promises"},{"ancestorTitles":["Error Handler Middleware","errorHandler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware errorHandler should handle ValidationError with 400 status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle ValidationError with 400 status"},{"ancestorTitles":["Error Handler Middleware","errorHandler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware errorHandler should handle AuthenticationError with 401 status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle AuthenticationError with 401 status"},{"ancestorTitles":["Error Handler Middleware","errorHandler"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware errorHandler should handle AuthorizationError with 403 status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle AuthorizationError with 403 status"},{"ancestorTitles":["Error Handler Middleware","errorHandler"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware errorHandler should handle NotFoundError with 404 status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle NotFoundError with 404 status"},{"ancestorTitles":["Error Handler Middleware","errorHandler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware errorHandler should handle generic errors with 500 status","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle generic errors with 500 status"},{"ancestorTitles":["Error Handler Middleware","errorHandler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware errorHandler should include error details in development mode","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should include error details in development mode"},{"ancestorTitles":["Error Handler Middleware","errorHandler"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware errorHandler should hide error details in production mode","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should hide error details in production mode"},{"ancestorTitles":["Error Handler Middleware","Custom Error Classes"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware Custom Error Classes should create ValidationError with correct properties","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create ValidationError with correct properties"},{"ancestorTitles":["Error Handler Middleware","Custom Error Classes"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware Custom Error Classes should create AuthenticationError with correct properties","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create AuthenticationError with correct properties"},{"ancestorTitles":["Error Handler Middleware","Custom Error Classes"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware Custom Error Classes should create AuthorizationError with correct properties","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create AuthorizationError with correct properties"},{"ancestorTitles":["Error Handler Middleware","Custom Error Classes"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Error Handler Middleware Custom Error Classes should create NotFoundError with correct properties","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create NotFoundError with correct properties"}],"endTime":1749171760317,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/middleware/errorHandler.test.js","startTime":1749171760145,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Authentication Middleware","authenticateRequest"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware authenticateRequest should allow requests with valid API key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow requests with valid API key"},{"ancestorTitles":["Authentication Middleware","authenticateRequest"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware authenticateRequest should reject requests without API key","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should reject requests without API key"},{"ancestorTitles":["Authentication Middleware","authenticateRequest"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware authenticateRequest should reject requests with invalid API key","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should reject requests with invalid API key"},{"ancestorTitles":["Authentication Middleware","authenticateRequest"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware authenticateRequest should bypass authentication in development mode","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should bypass authentication in development mode"},{"ancestorTitles":["Authentication Middleware","requirePermission"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requirePermission should allow access with correct permission","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow access with correct permission"},{"ancestorTitles":["Authentication Middleware","requirePermission"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requirePermission should deny access without required permission","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should deny access without required permission"},{"ancestorTitles":["Authentication Middleware","requirePermission"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requirePermission should deny access when user has no permissions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should deny access when user has no permissions"},{"ancestorTitles":["Authentication Middleware","requireRole"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requireRole should allow access with correct role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow access with correct role"},{"ancestorTitles":["Authentication Middleware","requireRole"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requireRole should deny access with incorrect role","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should deny access with incorrect role"},{"ancestorTitles":["Authentication Middleware","requireRole"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware requireRole should deny access when user has no role","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should deny access when user has no role"},{"ancestorTitles":["Authentication Middleware","utility functions","hasPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware utility functions hasPermission should return true for valid permission","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for valid permission"},{"ancestorTitles":["Authentication Middleware","utility functions","hasPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware utility functions hasPermission should return false for invalid permission","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for invalid permission"},{"ancestorTitles":["Authentication Middleware","utility functions","hasPermission"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware utility functions hasPermission should return false when user has no permissions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when user has no permissions"},{"ancestorTitles":["Authentication Middleware","utility functions","hasRole"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware utility functions hasRole should return true for correct role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for correct role"},{"ancestorTitles":["Authentication Middleware","utility functions","hasRole"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware utility functions hasRole should return false for incorrect role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for incorrect role"},{"ancestorTitles":["Authentication Middleware","utility functions","hasRole"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Authentication Middleware utility functions hasRole should return false when user has no role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when user has no role"}],"endTime":1749171760486,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/middleware/auth.test.js","startTime":1749171760319,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Jobs Routes","GET /"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Jobs Routes GET / should return jobs list from queue manager","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return jobs list from queue manager"},{"ancestorTitles":["Jobs Routes","GET /"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Jobs Routes GET / should handle query parameters correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle query parameters correctly"},{"ancestorTitles":["Jobs Routes","GET /:queue/:jobId"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Jobs Routes GET /:queue/:jobId should return job details","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return job details"},{"ancestorTitles":["Jobs Routes","GET /:queue/:jobId"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Jobs Routes GET /:queue/:jobId should handle job not found","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should handle job not found"},{"ancestorTitles":["Jobs Routes","POST /:queue/:jobId/retry"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Jobs Routes POST /:queue/:jobId/retry should retry failed job successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should retry failed job successfully"},{"ancestorTitles":["Jobs Routes","POST /:queue/:jobId/retry"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Jobs Routes POST /:queue/:jobId/retry should handle retry errors","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should handle retry errors"},{"ancestorTitles":["Jobs Routes","DELETE /:queue/:jobId"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Jobs Routes DELETE /:queue/:jobId should remove job successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove job successfully"},{"ancestorTitles":["Jobs Routes","DELETE /:queue/:jobId"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Jobs Routes DELETE /:queue/:jobId should handle removal errors","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should handle removal errors"},{"ancestorTitles":["Jobs Routes","GET /stats/overview"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Jobs Routes GET /stats/overview should return queue statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return queue statistics"}],"endTime":1749171760680,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/routes/jobs.test.js","startTime":1749171760489,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Dashboard Enrichment API","GET /api/dashboard/admin/data/enrichment"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard Enrichment API GET /api/dashboard/admin/data/enrichment should return enrichment pipeline data with real statistics when available","invocations":1,"location":null,"numPassingAsserts":17,"retryReasons":[],"status":"passed","title":"should return enrichment pipeline data with real statistics when available"},{"ancestorTitles":["Dashboard Enrichment API","GET /api/dashboard/admin/data/enrichment"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard Enrichment API GET /api/dashboard/admin/data/enrichment should return fallback mock data when enrichment manager is not available","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should return fallback mock data when enrichment manager is not available"},{"ancestorTitles":["Dashboard Enrichment API","GET /api/dashboard/admin/data/enrichment"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard Enrichment API GET /api/dashboard/admin/data/enrichment should return fallback mock data when dashboard manager is not available","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return fallback mock data when dashboard manager is not available"},{"ancestorTitles":["Dashboard Enrichment API","GET /api/dashboard/admin/data/enrichment"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard Enrichment API GET /api/dashboard/admin/data/enrichment should handle errors gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle errors gracefully"},{"ancestorTitles":["Dashboard Enrichment API","GET /api/dashboard/admin/data/enrichment"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard Enrichment API GET /api/dashboard/admin/data/enrichment should include all required pipeline stages","invocations":1,"location":null,"numPassingAsserts":41,"retryReasons":[],"status":"passed","title":"should include all required pipeline stages"},{"ancestorTitles":["Dashboard Enrichment API","GET /api/dashboard/admin/data/enrichment"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard Enrichment API GET /api/dashboard/admin/data/enrichment should include strategy information","invocations":1,"location":null,"numPassingAsserts":18,"retryReasons":[],"status":"passed","title":"should include strategy information"},{"ancestorTitles":["Dashboard Enrichment API","GET /api/dashboard/admin/data/enrichment"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard Enrichment API GET /api/dashboard/admin/data/enrichment should include provider performance data","invocations":1,"location":null,"numPassingAsserts":29,"retryReasons":[],"status":"passed","title":"should include provider performance data"}],"endTime":1749171760843,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/routes/dashboard-enrichment.test.js","startTime":1749171760683,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PromptVersionManager","Constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager Constructor should initialize with default configuration","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize with default configuration"},{"ancestorTitles":["PromptVersionManager","Constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager Constructor should merge custom configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should merge custom configuration"},{"ancestorTitles":["PromptVersionManager","Constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager Constructor should initialize empty collections","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize empty collections"},{"ancestorTitles":["PromptVersionManager","initialize()"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager initialize() should initialize successfully with git enabled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize successfully with git enabled"},{"ancestorTitles":["PromptVersionManager","initialize()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager initialize() should initialize without git when disabled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize without git when disabled"},{"ancestorTitles":["PromptVersionManager","initialize()"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager initialize() should load existing prompts during initialization","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should load existing prompts during initialization"},{"ancestorTitles":["PromptVersionManager","initialize()"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager initialize() should handle initialization errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle initialization errors"},{"ancestorTitles":["PromptVersionManager","savePrompt()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager savePrompt() should save a new prompt successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should save a new prompt successfully"},{"ancestorTitles":["PromptVersionManager","savePrompt()"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager savePrompt() should increment version for existing prompts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should increment version for existing prompts"},{"ancestorTitles":["PromptVersionManager","savePrompt()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager savePrompt() should extract variables from prompt content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract variables from prompt content"},{"ancestorTitles":["PromptVersionManager","savePrompt()"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager savePrompt() should commit to git when autoCommit is enabled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should commit to git when autoCommit is enabled"},{"ancestorTitles":["PromptVersionManager","savePrompt()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager savePrompt() should handle save errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle save errors"},{"ancestorTitles":["PromptVersionManager","getPrompt()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager getPrompt() should get latest prompt from cache","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get latest prompt from cache"},{"ancestorTitles":["PromptVersionManager","getPrompt()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager getPrompt() should return null for non-existent prompt","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent prompt"},{"ancestorTitles":["PromptVersionManager","getPrompt()"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager getPrompt() should get specific version from git","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should get specific version from git"},{"ancestorTitles":["PromptVersionManager","getPrompt()"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager getPrompt() should handle get errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle get errors"},{"ancestorTitles":["PromptVersionManager","generateNextVersion()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager generateNextVersion() should return 1.0.0 for new prompts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 1.0.0 for new prompts"},{"ancestorTitles":["PromptVersionManager","generateNextVersion()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager generateNextVersion() should increment patch version","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should increment patch version"},{"ancestorTitles":["PromptVersionManager","generateNextVersion()"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager generateNextVersion() should handle missing version","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing version"},{"ancestorTitles":["PromptVersionManager","extractVariables()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager extractVariables() should extract variables from template strings","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract variables from template strings"},{"ancestorTitles":["PromptVersionManager","extractVariables()"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager extractVariables() should handle duplicate variables","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle duplicate variables"},{"ancestorTitles":["PromptVersionManager","extractVariables()"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager extractVariables() should return empty array for no variables","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array for no variables"},{"ancestorTitles":["PromptVersionManager","extractVariables()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager extractVariables() should handle non-string content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle non-string content"},{"ancestorTitles":["PromptVersionManager","listPrompts()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager listPrompts() should return list of prompt IDs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return list of prompt IDs"},{"ancestorTitles":["PromptVersionManager","listPrompts()"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager listPrompts() should return empty array when no prompts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array when no prompts"},{"ancestorTitles":["PromptVersionManager","getVersionHistory()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager getVersionHistory() should return version history for prompt","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return version history for prompt"},{"ancestorTitles":["PromptVersionManager","getVersionHistory()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager getVersionHistory() should return empty array for unknown prompt","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array for unknown prompt"},{"ancestorTitles":["PromptVersionManager","rollbackPrompt()"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager rollbackPrompt() should rollback to previous version","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should rollback to previous version"},{"ancestorTitles":["PromptVersionManager","rollbackPrompt()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager rollbackPrompt() should require git to be enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require git to be enabled"},{"ancestorTitles":["PromptVersionManager","getStatistics()"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager getStatistics() should return system statistics","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return system statistics"},{"ancestorTitles":["PromptVersionManager","getStatistics()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager getStatistics() should handle empty system","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle empty system"},{"ancestorTitles":["PromptVersionManager","shutdown()"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager shutdown() should clean up resources","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should clean up resources"},{"ancestorTitles":["PromptVersionManager","shutdown()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager shutdown() should emit shutdown event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit shutdown event"},{"ancestorTitles":["PromptVersionManager","Event Handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager Event Handling should emit promptSaved event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit promptSaved event"},{"ancestorTitles":["PromptVersionManager","Event Handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PromptVersionManager Event Handling should emit error events","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit error events"}],"endTime":1749171761003,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/enrichment/PromptVersionManager.test.js","startTime":1749171760846,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1749171770375,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/components/CurationBoard.test.js: Unexpected token (8:6)\n\n       6 | const { render, screen, fireEvent, waitFor, within } = require('@testing-library/react');\n       7 | const userEvent = require('@testing-library/user-event');\n    >  8 | const '@testing-library/jest-dom';\n         |       ^\n       9 | const CurationBoard = require('../../../../src/web/components/curation/CurationBoard');\n      10 |\n      11 | // Mock fetch\n\n      at constructor (node_modules/@babel/parser/src/parse-error.ts:95:45)\n      at Parser.toParseError [as raise] (node_modules/@babel/parser/src/tokenizer/index.ts:1503:19)\n      at Parser.raise [as unexpected] (node_modules/@babel/parser/src/tokenizer/index.ts:1543:16)\n      at Parser.unexpected [as parseIdentifierName] (node_modules/@babel/parser/src/parser/expression.ts:2790:12)\n      at Parser.parseIdentifierName [as parseIdentifier] (node_modules/@babel/parser/src/parser/expression.ts:2759:23)\n      at Parser.parseIdentifier [as parseBindingAtom] (node_modules/@babel/parser/src/parser/lval.ts:391:17)\n      at Parser.parseBindingAtom [as parseVarId] (node_modules/@babel/parser/src/parser/statement.ts:1603:21)\n      at Parser.parseVarId [as parseVar] (node_modules/@babel/parser/src/parser/statement.ts:1562:12)\n      at Parser.parseVar [as parseVarStatement] (node_modules/@babel/parser/src/parser/statement.ts:1231:10)\n      at Parser.parseVarStatement [as parseStatementContent] (node_modules/@babel/parser/src/parser/statement.ts:587:21)\n      at Parser.parseStatementContent [as parseStatementLike] (node_modules/@babel/parser/src/parser/statement.ts:456:17)\n      at Parser.parseStatementLike [as parseModuleItem] (node_modules/@babel/parser/src/parser/statement.ts:393:17)\n      at Parser.parseModuleItem [as parseBlockOrModuleBlockBody] (node_modules/@babel/parser/src/parser/statement.ts:1423:16)\n      at Parser.parseBlockOrModuleBlockBody [as parseBlockBody] (node_modules/@babel/parser/src/parser/statement.ts:1397:10)\n      at Parser.parseBlockBody [as parseProgram] (node_modules/@babel/parser/src/parser/statement.ts:225:10)\n      at Parser.parseProgram [as parseTopLevel] (node_modules/@babel/parser/src/parser/statement.ts:203:25)\n      at Parser.parseTopLevel [as parse] (node_modules/@babel/parser/src/parser/index.ts:93:10)\n      at parse (node_modules/@babel/parser/src/index.ts:92:38)\n      at parser (node_modules/@babel/core/src/parser/index.ts:28:19)\n          at parser.next (<anonymous>)\n      at normalizeFile (node_modules/@babel/core/src/transformation/normalize-file.ts:49:24)\n          at normalizeFile.next (<anonymous>)\n      at run (node_modules/@babel/core/src/transformation/index.ts:40:36)\n          at run.next (<anonymous>)\n      at transform (node_modules/@babel/core/src/transform.ts:29:20)\n          at transform.next (<anonymous>)\n      at evaluateSync (node_modules/gensync/index.js:251:28)\n      at sync (node_modules/gensync/index.js:89:14)\n      at fn (node_modules/@babel/core/src/errors/rewrite-stack-trace.ts:99:14)\n      at transformSync (node_modules/@babel/core/src/transform.ts:66:52)\n      at ScriptTransformer.transformSource (node_modules/@jest/transform/build/ScriptTransformer.js:545:31)\n      at ScriptTransformer._transformAndBuildScript (node_modules/@jest/transform/build/ScriptTransformer.js:674:40)\n      at ScriptTransformer.transform (node_modules/@jest/transform/build/ScriptTransformer.js:726:19)\n","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/components/CurationBoard.test.js","startTime":1749171770375,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1749171770375,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/components/AdminDashboard.test.js: Unexpected token (7:6)\n\n       5 | const React = require('react');\n       6 | const { render, screen, fireEvent, waitFor } = require('@testing-library/react');\n    >  7 | const '@testing-library/jest-dom';\n         |       ^\n       8 | const AdminDashboard = require('../../../../src/web/components/admin/AdminDashboard');\n       9 |\n      10 | // Mock the fetch API\n\n      at constructor (node_modules/@babel/parser/src/parse-error.ts:95:45)\n      at Parser.toParseError [as raise] (node_modules/@babel/parser/src/tokenizer/index.ts:1503:19)\n      at Parser.raise [as unexpected] (node_modules/@babel/parser/src/tokenizer/index.ts:1543:16)\n      at Parser.unexpected [as parseIdentifierName] (node_modules/@babel/parser/src/parser/expression.ts:2790:12)\n      at Parser.parseIdentifierName [as parseIdentifier] (node_modules/@babel/parser/src/parser/expression.ts:2759:23)\n      at Parser.parseIdentifier [as parseBindingAtom] (node_modules/@babel/parser/src/parser/lval.ts:391:17)\n      at Parser.parseBindingAtom [as parseVarId] (node_modules/@babel/parser/src/parser/statement.ts:1603:21)\n      at Parser.parseVarId [as parseVar] (node_modules/@babel/parser/src/parser/statement.ts:1562:12)\n      at Parser.parseVar [as parseVarStatement] (node_modules/@babel/parser/src/parser/statement.ts:1231:10)\n      at Parser.parseVarStatement [as parseStatementContent] (node_modules/@babel/parser/src/parser/statement.ts:587:21)\n      at Parser.parseStatementContent [as parseStatementLike] (node_modules/@babel/parser/src/parser/statement.ts:456:17)\n      at Parser.parseStatementLike [as parseModuleItem] (node_modules/@babel/parser/src/parser/statement.ts:393:17)\n      at Parser.parseModuleItem [as parseBlockOrModuleBlockBody] (node_modules/@babel/parser/src/parser/statement.ts:1423:16)\n      at Parser.parseBlockOrModuleBlockBody [as parseBlockBody] (node_modules/@babel/parser/src/parser/statement.ts:1397:10)\n      at Parser.parseBlockBody [as parseProgram] (node_modules/@babel/parser/src/parser/statement.ts:225:10)\n      at Parser.parseProgram [as parseTopLevel] (node_modules/@babel/parser/src/parser/statement.ts:203:25)\n      at Parser.parseTopLevel [as parse] (node_modules/@babel/parser/src/parser/index.ts:93:10)\n      at parse (node_modules/@babel/parser/src/index.ts:92:38)\n      at parser (node_modules/@babel/core/src/parser/index.ts:28:19)\n          at parser.next (<anonymous>)\n      at normalizeFile (node_modules/@babel/core/src/transformation/normalize-file.ts:49:24)\n          at normalizeFile.next (<anonymous>)\n      at run (node_modules/@babel/core/src/transformation/index.ts:40:36)\n          at run.next (<anonymous>)\n      at transform (node_modules/@babel/core/src/transform.ts:29:20)\n          at transform.next (<anonymous>)\n      at evaluateSync (node_modules/gensync/index.js:251:28)\n      at sync (node_modules/gensync/index.js:89:14)\n      at fn (node_modules/@babel/core/src/errors/rewrite-stack-trace.ts:99:14)\n      at transformSync (node_modules/@babel/core/src/transform.ts:66:52)\n      at ScriptTransformer.transformSource (node_modules/@jest/transform/build/ScriptTransformer.js:545:31)\n      at ScriptTransformer._transformAndBuildScript (node_modules/@jest/transform/build/ScriptTransformer.js:674:40)\n      at ScriptTransformer.transform (node_modules/@jest/transform/build/ScriptTransformer.js:726:19)\n","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/components/AdminDashboard.test.js","startTime":1749171770375,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Dashboard UI Components","Navigation Components"],"duration":88,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Navigation Components should have all required navigation elements","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should have all required navigation elements"},{"ancestorTitles":["Dashboard UI Components","Navigation Components"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Navigation Components should have proper Bootstrap classes for responsive design","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have proper Bootstrap classes for responsive design"},{"ancestorTitles":["Dashboard UI Components","Kanban Board Structure"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Kanban Board Structure should have kanban board container","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have kanban board container"},{"ancestorTitles":["Dashboard UI Components","Kanban Board Structure"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Kanban Board Structure should have three kanban columns with correct structure","invocations":1,"location":null,"numPassingAsserts":15,"retryReasons":[],"status":"passed","title":"should have three kanban columns with correct structure"},{"ancestorTitles":["Dashboard UI Components","Kanban Board Structure"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Kanban Board Structure should have count badges for each column","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should have count badges for each column"},{"ancestorTitles":["Dashboard UI Components","View Containers"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components View Containers should have all required view containers","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should have all required view containers"},{"ancestorTitles":["Dashboard UI Components","View Containers"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components View Containers should have proper Bootstrap grid structure","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have proper Bootstrap grid structure"},{"ancestorTitles":["Dashboard UI Components","ManualReviewApp Class"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components ManualReviewApp Class should initialize with default properties","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should initialize with default properties"},{"ancestorTitles":["Dashboard UI Components","ManualReviewApp Class"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components ManualReviewApp Class should have required methods","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should have required methods"},{"ancestorTitles":["Dashboard UI Components","ManualReviewApp Class","View Management"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components ManualReviewApp Class View Management should switch views correctly","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should switch views correctly"},{"ancestorTitles":["Dashboard UI Components","ManualReviewApp Class","Data Loading"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components ManualReviewApp Class Data Loading should handle API responses correctly","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should handle API responses correctly"},{"ancestorTitles":["Dashboard UI Components","ManualReviewApp Class","Data Loading"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components ManualReviewApp Class Data Loading should handle API errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should handle API errors gracefully"},{"ancestorTitles":["Dashboard UI Components","ManualReviewApp Class","Kanban Board Rendering"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components ManualReviewApp Class Kanban Board Rendering should organize documents by status","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should organize documents by status"},{"ancestorTitles":["Dashboard UI Components","ManualReviewApp Class","Kanban Board Rendering"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components ManualReviewApp Class Kanban Board Rendering should update column counts correctly","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should update column counts correctly"},{"ancestorTitles":["Dashboard UI Components","Form Components"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Form Components should have search input with proper attributes","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have search input with proper attributes"},{"ancestorTitles":["Dashboard UI Components","Form Components"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Form Components should have filter controls","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should have filter controls"},{"ancestorTitles":["Dashboard UI Components","Button Components"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Button Components should have action buttons with proper data attributes","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should have action buttons with proper data attributes"},{"ancestorTitles":["Dashboard UI Components","Button Components"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Button Components should have proper Bootstrap button classes","invocations":1,"location":null,"numPassingAsserts":26,"retryReasons":[],"status":"passed","title":"should have proper Bootstrap button classes"},{"ancestorTitles":["Dashboard UI Components","Loading States"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Loading States should have loading indicator elements","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have loading indicator elements"},{"ancestorTitles":["Dashboard UI Components","Error Handling UI"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Error Handling UI should have error message containers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have error message containers"},{"ancestorTitles":["Dashboard UI Components","Accessibility Features"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Accessibility Features should have proper ARIA labels where needed","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have proper ARIA labels where needed"},{"ancestorTitles":["Dashboard UI Components","Accessibility Features"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"Dashboard UI Components Accessibility Features should have semantic HTML structure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have semantic HTML structure"}],"endTime":1749171761971,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/ui/dashboard-components.test.js","startTime":1749171761085,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["AlertManager","Initialization"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Initialization should initialize with default configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with default configuration"},{"ancestorTitles":["AlertManager","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Initialization should initialize with custom configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with custom configuration"},{"ancestorTitles":["AlertManager","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Initialization should initialize empty state","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize empty state"},{"ancestorTitles":["AlertManager","Alert Creation"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Alert Creation should create alert successfully","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should create alert successfully"},{"ancestorTitles":["AlertManager","Alert Creation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Alert Creation should add alert to active alerts","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should add alert to active alerts"},{"ancestorTitles":["AlertManager","Alert Creation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Alert Creation should add alert to history","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should add alert to history"},{"ancestorTitles":["AlertManager","Alert Creation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Alert Creation should update statistics","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should update statistics"},{"ancestorTitles":["AlertManager","Alert Creation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Alert Creation should emit alert_created event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit alert_created event"},{"ancestorTitles":["AlertManager","Alert Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Alert Management should acknowledge alert","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should acknowledge alert"},{"ancestorTitles":["AlertManager","Alert Management"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Alert Management should emit alert_acknowledged event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit alert_acknowledged event"},{"ancestorTitles":["AlertManager","Alert Management"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Alert Management should resolve alert","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should resolve alert"},{"ancestorTitles":["AlertManager","Alert Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Alert Management should emit alert_resolved event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit alert_resolved event"},{"ancestorTitles":["AlertManager","Alert Management"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Alert Management should throw error for non-existent alert","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for non-existent alert"},{"ancestorTitles":["AlertManager","Notification Channel Selection"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Notification Channel Selection should select channels based on severity filter","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should select channels based on severity filter"},{"ancestorTitles":["AlertManager","Notification Channel Selection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Notification Channel Selection should select channels based on type filter","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should select channels based on type filter"},{"ancestorTitles":["AlertManager","Escalation"],"duration":507,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Escalation should set escalation timer for critical alerts","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should set escalation timer for critical alerts"},{"ancestorTitles":["AlertManager","Escalation"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Escalation should clear escalation timer when alert is acknowledged","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clear escalation timer when alert is acknowledged"},{"ancestorTitles":["AlertManager","Escalation"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Escalation should clear escalation timer when alert is resolved","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clear escalation timer when alert is resolved"},{"ancestorTitles":["AlertManager","Integration"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Integration should integrate with cost tracker","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should integrate with cost tracker"},{"ancestorTitles":["AlertManager","Integration"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Integration should integrate with quality metrics","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should integrate with quality metrics"},{"ancestorTitles":["AlertManager","Integration"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Integration should handle missing integrations gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing integrations gracefully"},{"ancestorTitles":["AlertManager","Query Methods"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Query Methods should get active alerts sorted by severity and time","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should get active alerts sorted by severity and time"},{"ancestorTitles":["AlertManager","Query Methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Query Methods should filter active alerts by severity","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter active alerts by severity"},{"ancestorTitles":["AlertManager","Query Methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Query Methods should filter active alerts by type","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter active alerts by type"},{"ancestorTitles":["AlertManager","Query Methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Query Methods should get alert history","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get alert history"},{"ancestorTitles":["AlertManager","Query Methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Query Methods should limit alert history","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should limit alert history"},{"ancestorTitles":["AlertManager","Query Methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Query Methods should get statistics","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should get statistics"},{"ancestorTitles":["AlertManager","Status and Health"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Status and Health should return status when not initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return status when not initialized"},{"ancestorTitles":["AlertManager","Status and Health"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Status and Health should return status when initialized","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return status when initialized"},{"ancestorTitles":["AlertManager","Utility Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Utility Methods should generate unique alert IDs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate unique alert IDs"},{"ancestorTitles":["AlertManager","Utility Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Utility Methods should generate unique notification IDs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate unique notification IDs"},{"ancestorTitles":["AlertManager","Shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Shutdown should shutdown gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should shutdown gracefully"},{"ancestorTitles":["AlertManager","Shutdown"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"AlertManager Shutdown should clear timers on shutdown","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clear timers on shutdown"}],"endTime":1749171762685,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/monitoring/AlertManager.test.js","startTime":1749171761976,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Visibility Management Frontend","loadVisibilityData"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend loadVisibilityData should load all visibility data when current view is visibility","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should load all visibility data when current view is visibility"},{"ancestorTitles":["Visibility Management Frontend","loadVisibilityData"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend loadVisibilityData should not load data when current view is not visibility","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not load data when current view is not visibility"},{"ancestorTitles":["Visibility Management Frontend","loadVisibilityDocuments"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend loadVisibilityDocuments should render documents when API call succeeds","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should render documents when API call succeeds"},{"ancestorTitles":["Visibility Management Frontend","loadVisibilityDocuments"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend loadVisibilityDocuments should show error message when API call fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should show error message when API call fails"},{"ancestorTitles":["Visibility Management Frontend","loadVisibilityDocuments"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend loadVisibilityDocuments should show empty state when no documents","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should show empty state when no documents"},{"ancestorTitles":["Visibility Management Frontend","getVisibilityBadge"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend getVisibilityBadge should return correct badge for each visibility type","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return correct badge for each visibility type"},{"ancestorTitles":["Visibility Management Frontend","loadPendingApprovals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend loadPendingApprovals should render pending approvals when API call succeeds","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should render pending approvals when API call succeeds"},{"ancestorTitles":["Visibility Management Frontend","loadPendingApprovals"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend loadPendingApprovals should show empty state when no pending approvals","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should show empty state when no pending approvals"},{"ancestorTitles":["Visibility Management Frontend","setDocumentVisibility"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend setDocumentVisibility should update document visibility successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update document visibility successfully"},{"ancestorTitles":["Visibility Management Frontend","setDocumentVisibility"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend setDocumentVisibility should throw error when API call fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when API call fails"},{"ancestorTitles":["Visibility Management Frontend","bulkUpdateVisibility"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend bulkUpdateVisibility should update multiple documents successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update multiple documents successfully"},{"ancestorTitles":["Visibility Management Frontend","approveVisibilityChange"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend approveVisibilityChange should approve visibility change successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should approve visibility change successfully"},{"ancestorTitles":["Visibility Management Frontend","rejectVisibilityChange"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend rejectVisibilityChange should reject visibility change successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject visibility change successfully"},{"ancestorTitles":["Visibility Management Frontend","addVisibilityRule"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Visibility Management Frontend addVisibilityRule should add visibility rule successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should add visibility rule successfully"}],"endTime":1749171762957,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/web/visibility-management.test.js","startTime":1749171762689,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["FeedbackProcessor","Initialization"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Initialization should initialize successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["FeedbackProcessor","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Initialization should have correct default configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have correct default configuration"},{"ancestorTitles":["FeedbackProcessor","Feedback Processing"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Feedback Processing should validate feedback data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate feedback data"},{"ancestorTitles":["FeedbackProcessor","Feedback Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Feedback Processing should process valid feedback","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should process valid feedback"},{"ancestorTitles":["FeedbackProcessor","Feedback Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Feedback Processing should analyze sentiment correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should analyze sentiment correctly"},{"ancestorTitles":["FeedbackProcessor","Feedback Processing"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Feedback Processing should extract topics correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should extract topics correctly"},{"ancestorTitles":["FeedbackProcessor","Pattern Detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Pattern Detection should detect similar feedback patterns","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect similar feedback patterns"},{"ancestorTitles":["FeedbackProcessor","Pattern Detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Pattern Detection should update trending patterns","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update trending patterns"},{"ancestorTitles":["FeedbackProcessor","Real-time Processing"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Real-time Processing should detect immediate issues","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should detect immediate issues"},{"ancestorTitles":["FeedbackProcessor","Real-time Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Real-time Processing should generate real-time insights","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate real-time insights"},{"ancestorTitles":["FeedbackProcessor","Batch Processing"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Batch Processing should process feedback in batches","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should process feedback in batches"},{"ancestorTitles":["FeedbackProcessor","Batch Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Batch Processing should detect trends in batch processing","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should detect trends in batch processing"},{"ancestorTitles":["FeedbackProcessor","Trend Analysis"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Trend Analysis should calculate trend severity correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate trend severity correctly"},{"ancestorTitles":["FeedbackProcessor","Trend Analysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Trend Analysis should generate action recommendations","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate action recommendations"},{"ancestorTitles":["FeedbackProcessor","Performance Metrics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Performance Metrics should track processing metrics","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should track processing metrics"},{"ancestorTitles":["FeedbackProcessor","Performance Metrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Performance Metrics should provide status information","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should provide status information"},{"ancestorTitles":["FeedbackProcessor","Query Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Query Methods should return feedback patterns","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return feedback patterns"},{"ancestorTitles":["FeedbackProcessor","Query Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Query Methods should return trending issues","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return trending issues"},{"ancestorTitles":["FeedbackProcessor","Query Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Query Methods should return performance metrics","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return performance metrics"},{"ancestorTitles":["FeedbackProcessor","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Error Handling should handle invalid feedback gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid feedback gracefully"},{"ancestorTitles":["FeedbackProcessor","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Error Handling should handle analysis errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle analysis errors gracefully"},{"ancestorTitles":["FeedbackProcessor","Shutdown"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Shutdown should shutdown gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should shutdown gracefully"},{"ancestorTitles":["FeedbackProcessor","Shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackProcessor Shutdown should process remaining queue on shutdown","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should process remaining queue on shutdown"}],"endTime":1749171763116,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/services/FeedbackProcessor.test.js","startTime":1749171762959,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["JobScheduler","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Initialization should initialize successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["JobScheduler","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Initialization should emit initialized event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit initialized event"},{"ancestorTitles":["JobScheduler","Initialization"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Initialization should handle initialization errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle initialization errors"},{"ancestorTitles":["JobScheduler","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Initialization should set up event forwarding","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should set up event forwarding"},{"ancestorTitles":["JobScheduler","Single Job Scheduling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Single Job Scheduling should schedule ingestion job successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should schedule ingestion job successfully"},{"ancestorTitles":["JobScheduler","Single Job Scheduling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Single Job Scheduling should schedule job with custom options","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should schedule job with custom options"},{"ancestorTitles":["JobScheduler","Single Job Scheduling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Single Job Scheduling should emit job-scheduled event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit job-scheduled event"},{"ancestorTitles":["JobScheduler","Single Job Scheduling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Single Job Scheduling should fail when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fail when not initialized"},{"ancestorTitles":["JobScheduler","Batch Job Scheduling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Batch Job Scheduling should schedule batch job successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should schedule batch job successfully"},{"ancestorTitles":["JobScheduler","Batch Job Scheduling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Batch Job Scheduling should schedule batch with custom batch ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should schedule batch with custom batch ID"},{"ancestorTitles":["JobScheduler","Batch Job Scheduling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Batch Job Scheduling should emit batch-scheduled event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit batch-scheduled event"},{"ancestorTitles":["JobScheduler","Batch Job Scheduling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Batch Job Scheduling should fail with empty sources array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fail with empty sources array"},{"ancestorTitles":["JobScheduler","Batch Job Scheduling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Batch Job Scheduling should fail with non-array sources","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fail with non-array sources"},{"ancestorTitles":["JobScheduler","Recurring Job Scheduling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Recurring Job Scheduling should schedule recurring job successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should schedule recurring job successfully"},{"ancestorTitles":["JobScheduler","Recurring Job Scheduling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Recurring Job Scheduling should emit recurring-scheduled event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit recurring-scheduled event"},{"ancestorTitles":["JobScheduler","Recurring Job Scheduling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Recurring Job Scheduling should cancel recurring job","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should cancel recurring job"},{"ancestorTitles":["JobScheduler","Recurring Job Scheduling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Recurring Job Scheduling should fail to cancel non-existent recurring job","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fail to cancel non-existent recurring job"},{"ancestorTitles":["JobScheduler","Job Status and Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Job Status and Management should get job status","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get job status"},{"ancestorTitles":["JobScheduler","Job Status and Management"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Job Status and Management should return null for non-existent job","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent job"},{"ancestorTitles":["JobScheduler","Job Status and Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Job Status and Management should get statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get statistics"},{"ancestorTitles":["JobScheduler","Job Status and Management"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Job Status and Management should retry job","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should retry job"},{"ancestorTitles":["JobScheduler","Job Status and Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Job Status and Management should remove job","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove job"},{"ancestorTitles":["JobScheduler","Queue Control"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Queue Control should pause processing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should pause processing"},{"ancestorTitles":["JobScheduler","Queue Control"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Queue Control should resume processing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should resume processing"},{"ancestorTitles":["JobScheduler","Queue Control"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Queue Control should cleanup old jobs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cleanup old jobs"},{"ancestorTitles":["JobScheduler","Priority Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Priority Handling should handle string priorities","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle string priorities"},{"ancestorTitles":["JobScheduler","Priority Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Priority Handling should handle numeric priorities","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle numeric priorities"},{"ancestorTitles":["JobScheduler","Priority Handling"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Priority Handling should default to normal priority for unknown strings","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should default to normal priority for unknown strings"},{"ancestorTitles":["JobScheduler","Job Processing Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Job Processing Integration should process single job through processor","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should process single job through processor"},{"ancestorTitles":["JobScheduler","Job Processing Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Job Processing Integration should process batch job through processor","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should process batch job through processor"},{"ancestorTitles":["JobScheduler","Job Processing Integration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Job Processing Integration should handle unknown job type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle unknown job type"},{"ancestorTitles":["JobScheduler","Shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Shutdown should shutdown successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should shutdown successfully"},{"ancestorTitles":["JobScheduler","Shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Shutdown should handle shutdown when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown when not initialized"},{"ancestorTitles":["JobScheduler","Shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobScheduler Shutdown should handle shutdown errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown errors"}],"endTime":1749171763488,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/ingestion/queue/JobScheduler.test.js","startTime":1749171763119,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SourceHandlerRegistry","Initialization"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Initialization should initialize with empty registry","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with empty registry"},{"ancestorTitles":["SourceHandlerRegistry","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Initialization should initialize factory correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize factory correctly"},{"ancestorTitles":["SourceHandlerRegistry","Handler Registration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Registration should register single handler","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should register single handler"},{"ancestorTitles":["SourceHandlerRegistry","Handler Registration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Registration should register multiple handlers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should register multiple handlers"},{"ancestorTitles":["SourceHandlerRegistry","Handler Registration"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Registration should reject duplicate handler IDs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject duplicate handler IDs"},{"ancestorTitles":["SourceHandlerRegistry","Handler Registration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Registration should handle registration validation errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle registration validation errors"},{"ancestorTitles":["SourceHandlerRegistry","Handler Registration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Registration should handle handler creation errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle handler creation errors"},{"ancestorTitles":["SourceHandlerRegistry","Handler Registration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Registration should handle handler initialization errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle handler initialization errors"},{"ancestorTitles":["SourceHandlerRegistry","Handler Retrieval"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Retrieval should get handler by ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get handler by ID"},{"ancestorTitles":["SourceHandlerRegistry","Handler Retrieval"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Retrieval should return null for non-existent handler","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent handler"},{"ancestorTitles":["SourceHandlerRegistry","Handler Retrieval"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Retrieval should get all handlers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get all handlers"},{"ancestorTitles":["SourceHandlerRegistry","Handler Retrieval"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Retrieval should get handlers by type","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get handlers by type"},{"ancestorTitles":["SourceHandlerRegistry","Handler Retrieval"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Retrieval should get enabled handlers only","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get enabled handlers only"},{"ancestorTitles":["SourceHandlerRegistry","Handler Retrieval"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Retrieval should get handlers by visibility","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get handlers by visibility"},{"ancestorTitles":["SourceHandlerRegistry","Handler Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Management should enable handler","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should enable handler"},{"ancestorTitles":["SourceHandlerRegistry","Handler Management"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Management should disable handler","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should disable handler"},{"ancestorTitles":["SourceHandlerRegistry","Handler Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Management should unregister handler","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should unregister handler"},{"ancestorTitles":["SourceHandlerRegistry","Handler Management"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Management should handle enable/disable of non-existent handler","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle enable/disable of non-existent handler"},{"ancestorTitles":["SourceHandlerRegistry","Handler Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Handler Management should handle unregister of non-existent handler","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle unregister of non-existent handler"},{"ancestorTitles":["SourceHandlerRegistry","Batch Operations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Batch Operations should discover from all enabled handlers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should discover from all enabled handlers"},{"ancestorTitles":["SourceHandlerRegistry","Batch Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Batch Operations should skip disabled handlers in discovery","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should skip disabled handlers in discovery"},{"ancestorTitles":["SourceHandlerRegistry","Batch Operations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Batch Operations should handle discovery errors gracefully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle discovery errors gracefully"},{"ancestorTitles":["SourceHandlerRegistry","Batch Operations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Batch Operations should cleanup all handlers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cleanup all handlers"},{"ancestorTitles":["SourceHandlerRegistry","Batch Operations"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Batch Operations should handle cleanup errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle cleanup errors gracefully"},{"ancestorTitles":["SourceHandlerRegistry","Registry Statistics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Registry Statistics should return correct handler count","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return correct handler count"},{"ancestorTitles":["SourceHandlerRegistry","Registry Statistics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Registry Statistics should return correct enabled handler count","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return correct enabled handler count"},{"ancestorTitles":["SourceHandlerRegistry","Registry Statistics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Registry Statistics should return handler statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return handler statistics"},{"ancestorTitles":["SourceHandlerRegistry","Registry Statistics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Registry Statistics should return all handler IDs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return all handler IDs"},{"ancestorTitles":["SourceHandlerRegistry","Configuration Management"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Configuration Management should update handler configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update handler configuration"},{"ancestorTitles":["SourceHandlerRegistry","Configuration Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Configuration Management should validate configuration before update","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate configuration before update"},{"ancestorTitles":["SourceHandlerRegistry","Event Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Event Handling should emit events on handler registration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit events on handler registration"},{"ancestorTitles":["SourceHandlerRegistry","Event Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerRegistry Event Handling should emit events on handler unregistration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit events on handler unregistration"}],"endTime":1749171763663,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/ingestion/handlers/SourceHandlerRegistry.test.js","startTime":1749171763491,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["InputProcessor","constructor"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor constructor should initialize with default options","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with default options"},{"ancestorTitles":["InputProcessor","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor constructor should initialize with custom options","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with custom options"},{"ancestorTitles":["InputProcessor","initialize"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor initialize should initialize successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["InputProcessor","process"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should process valid input successfully","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should process valid input successfully"},{"ancestorTitles":["InputProcessor","process"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should validate query length","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate query length"},{"ancestorTitles":["InputProcessor","process"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should require non-empty query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require non-empty query"},{"ancestorTitles":["InputProcessor","process"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should handle missing query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing query"},{"ancestorTitles":["InputProcessor","process"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should validate date range filters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate date range filters"},{"ancestorTitles":["InputProcessor","process"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should validate maxResults option","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate maxResults option"},{"ancestorTitles":["InputProcessor","process"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should validate response format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate response format"},{"ancestorTitles":["InputProcessor","process"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should handle query normalization","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle query normalization"},{"ancestorTitles":["InputProcessor","process"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should detect language when enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect language when enabled"},{"ancestorTitles":["InputProcessor","process"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should classify query type when enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify query type when enabled"},{"ancestorTitles":["InputProcessor","process"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should handle different query types","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle different query types"},{"ancestorTitles":["InputProcessor","process"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should add user context to filters","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should add user context to filters"},{"ancestorTitles":["InputProcessor","process"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor process should require initialization","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require initialization"},{"ancestorTitles":["InputProcessor","getStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor getStatus should return status when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return status when not initialized"},{"ancestorTitles":["InputProcessor","getStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor getStatus should return status when initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return status when initialized"},{"ancestorTitles":["InputProcessor","shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor shutdown should shutdown successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should shutdown successfully"},{"ancestorTitles":["InputProcessor","shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor shutdown should handle shutdown when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown when not initialized"},{"ancestorTitles":["InputProcessor","private methods","preprocessQuery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor private methods preprocessQuery should normalize query correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should normalize query correctly"},{"ancestorTitles":["InputProcessor","private methods","classifyQuery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor private methods classifyQuery should classify different query types","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should classify different query types"},{"ancestorTitles":["InputProcessor","private methods","detectLanguage"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor private methods detectLanguage should detect language correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should detect language correctly"},{"ancestorTitles":["InputProcessor","private methods","processFilters"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor private methods processFilters should process filters with user context","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should process filters with user context"},{"ancestorTitles":["InputProcessor","private methods","processFilters"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"InputProcessor private methods processFilters should handle empty filters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty filters"}],"endTime":1749171763820,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/rag/components/InputProcessor.test.js","startTime":1749171763665,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ConfigIntegration","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration constructor should initialize with default options","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with default options"},{"ancestorTitles":["ConfigIntegration","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration constructor should initialize with custom options","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize with custom options"},{"ancestorTitles":["ConfigIntegration","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration constructor should use provided configManager instance","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use provided configManager instance"},{"ancestorTitles":["ConfigIntegration","initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration initialization should initialize successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["ConfigIntegration","initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration initialization should not initialize if already initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not initialize if already initialized"},{"ancestorTitles":["ConfigIntegration","initialization"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration initialization should handle initialization errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle initialization errors"},{"ancestorTitles":["ConfigIntegration","shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration shutdown should shutdown successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should shutdown successfully"},{"ancestorTitles":["ConfigIntegration","shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration shutdown should not shutdown if not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not shutdown if not initialized"},{"ancestorTitles":["ConfigIntegration","shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration shutdown should handle shutdown errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle shutdown errors"},{"ancestorTitles":["ConfigIntegration","component registration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration component registration should register a component","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register a component"},{"ancestorTitles":["ConfigIntegration","component registration"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration component registration should throw error for invalid component registration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should throw error for invalid component registration"},{"ancestorTitles":["ConfigIntegration","component registration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration component registration should unregister a component","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should unregister a component"},{"ancestorTitles":["ConfigIntegration","component registration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration component registration should handle unregistering non-existent component","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle unregistering non-existent component"},{"ancestorTitles":["ConfigIntegration","configuration access"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration configuration access should get specific configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get specific configuration"},{"ancestorTitles":["ConfigIntegration","configuration access"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration configuration access should get all configurations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get all configurations"},{"ancestorTitles":["ConfigIntegration","configuration reloading"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration configuration reloading should reload configuration successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reload configuration successfully"},{"ancestorTitles":["ConfigIntegration","configuration reloading"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration configuration reloading should handle reload errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle reload errors"},{"ancestorTitles":["ConfigIntegration","configuration change handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration configuration change handling should handle configuration changes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle configuration changes"},{"ancestorTitles":["ConfigIntegration","configuration change handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration configuration change handling should handle component update errors with rollback","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle component update errors with rollback"},{"ancestorTitles":["ConfigIntegration","configuration change handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration configuration change handling should handle rollback failure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle rollback failure"},{"ancestorTitles":["ConfigIntegration","configuration removal handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration configuration removal handling should handle configuration removal","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle configuration removal"},{"ancestorTitles":["ConfigIntegration","configuration removal handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration configuration removal handling should handle components without handleConfigRemoval method","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle components without handleConfigRemoval method"},{"ancestorTitles":["ConfigIntegration","component filtering"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration component filtering should get applicable components with handlesConfigType method","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get applicable components with handlesConfigType method"},{"ancestorTitles":["ConfigIntegration","component filtering"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration component filtering should include all components without handlesConfigType method","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include all components without handlesConfigType method"},{"ancestorTitles":["ConfigIntegration","configuration validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration configuration validation should validate all configurations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate all configurations"},{"ancestorTitles":["ConfigIntegration","statistics"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration statistics should return integration statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return integration statistics"},{"ancestorTitles":["ConfigIntegration","error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration error handling should handle configuration errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle configuration errors"},{"ancestorTitles":["ConfigIntegration","error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ConfigIntegration error handling should emit integration-error event when listeners exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit integration-error event when listeners exist"}],"endTime":1749171763991,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/config/ConfigIntegration.test.js","startTime":1749171763823,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["BaseProvider","constructor"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider constructor should throw error when instantiated directly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when instantiated directly"},{"ancestorTitles":["BaseProvider","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider constructor should allow instantiation of subclasses","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow instantiation of subclasses"},{"ancestorTitles":["BaseProvider","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider constructor should set default configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should set default configuration"},{"ancestorTitles":["BaseProvider","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider constructor should merge custom configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should merge custom configuration"},{"ancestorTitles":["BaseProvider","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider constructor should initialize health properties","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize health properties"},{"ancestorTitles":["BaseProvider","abstract methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider abstract methods should throw error for getName","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for getName"},{"ancestorTitles":["BaseProvider","abstract methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider abstract methods should throw error for getSupportedModels","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for getSupportedModels"},{"ancestorTitles":["BaseProvider","abstract methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider abstract methods should throw error for complete","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for complete"},{"ancestorTitles":["BaseProvider","abstract methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider abstract methods should throw error for calculateCost","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for calculateCost"},{"ancestorTitles":["BaseProvider","healthCheck"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider healthCheck should return healthy status on successful completion","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return healthy status on successful completion"},{"ancestorTitles":["BaseProvider","healthCheck"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider healthCheck should return unhealthy status on completion failure","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return unhealthy status on completion failure"},{"ancestorTitles":["BaseProvider","healthCheck"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider healthCheck should use first supported model for health check","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use first supported model for health check"},{"ancestorTitles":["BaseProvider","getStats"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider getStats should return provider statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return provider statistics"},{"ancestorTitles":["BaseProvider","counter methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider counter methods should increment request count","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should increment request count"},{"ancestorTitles":["BaseProvider","counter methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider counter methods should increment error count","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should increment error count"},{"ancestorTitles":["BaseProvider","counter methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"BaseProvider counter methods should reset error count","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reset error count"}],"endTime":1749171764125,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/enrichment/providers/BaseProvider.test.js","startTime":1749171763994,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["EmbeddingCache","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Initialization should initialize with default TTL configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize with default TTL configuration"},{"ancestorTitles":["EmbeddingCache","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Initialization should initialize with custom TTL configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize with custom TTL configuration"},{"ancestorTitles":["EmbeddingCache","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Initialization should initialize embedding statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize embedding statistics"},{"ancestorTitles":["EmbeddingCache","Document Embedding Caching"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Document Embedding Caching should cache document embedding","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cache document embedding"},{"ancestorTitles":["EmbeddingCache","Document Embedding Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Document Embedding Caching should get cached document embedding","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get cached document embedding"},{"ancestorTitles":["EmbeddingCache","Document Embedding Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Document Embedding Caching should return null for cache miss","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null for cache miss"},{"ancestorTitles":["EmbeddingCache","Document Embedding Caching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Document Embedding Caching should update embedding statistics on cache hit","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should update embedding statistics on cache hit"},{"ancestorTitles":["EmbeddingCache","Text Embedding Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Text Embedding Caching should cache text embedding","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cache text embedding"},{"ancestorTitles":["EmbeddingCache","Text Embedding Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Text Embedding Caching should get cached text embedding","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get cached text embedding"},{"ancestorTitles":["EmbeddingCache","Text Embedding Caching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Text Embedding Caching should generate consistent keys for same text and model","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate consistent keys for same text and model"},{"ancestorTitles":["EmbeddingCache","Text Embedding Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Text Embedding Caching should generate different keys for different text","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate different keys for different text"},{"ancestorTitles":["EmbeddingCache","Similarity Results Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Similarity Results Caching should cache similarity results","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cache similarity results"},{"ancestorTitles":["EmbeddingCache","Similarity Results Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Similarity Results Caching should get cached similarity results","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get cached similarity results"},{"ancestorTitles":["EmbeddingCache","Batch Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Batch Operations should cache multiple embeddings in batch","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should cache multiple embeddings in batch"},{"ancestorTitles":["EmbeddingCache","Batch Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Batch Operations should handle batch caching errors gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle batch caching errors gracefully"},{"ancestorTitles":["EmbeddingCache","Batch Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Batch Operations should get multiple embeddings in batch","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should get multiple embeddings in batch"},{"ancestorTitles":["EmbeddingCache","Cache Invalidation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Cache Invalidation should invalidate document embeddings","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should invalidate document embeddings"},{"ancestorTitles":["EmbeddingCache","Cache Invalidation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Cache Invalidation should invalidate embeddings by model","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should invalidate embeddings by model"},{"ancestorTitles":["EmbeddingCache","Cache Invalidation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Cache Invalidation should invalidate all embeddings for document","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should invalidate all embeddings for document"},{"ancestorTitles":["EmbeddingCache","Cache Warming"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Cache Warming should warm embedding cache","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should warm embedding cache"},{"ancestorTitles":["EmbeddingCache","Cache Warming"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Cache Warming should identify already cached embeddings","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should identify already cached embeddings"},{"ancestorTitles":["EmbeddingCache","Statistics and Metrics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Statistics and Metrics should get embedding-specific statistics","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get embedding-specific statistics"},{"ancestorTitles":["EmbeddingCache","Statistics and Metrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Statistics and Metrics should estimate cache size","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should estimate cache size"},{"ancestorTitles":["EmbeddingCache","Statistics and Metrics"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Statistics and Metrics should calculate cache efficiency","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate cache efficiency"},{"ancestorTitles":["EmbeddingCache","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Error Handling should handle cache set errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cache set errors gracefully"},{"ancestorTitles":["EmbeddingCache","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Error Handling should handle cache get errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cache get errors gracefully"},{"ancestorTitles":["EmbeddingCache","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Error Handling should handle invalidation errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalidation errors gracefully"},{"ancestorTitles":["EmbeddingCache","Vector Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Vector Operations should calculate vector size correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate vector size correctly"},{"ancestorTitles":["EmbeddingCache","Vector Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Vector Operations should handle empty vectors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty vectors"},{"ancestorTitles":["EmbeddingCache","Vector Operations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Vector Operations should handle invalid vectors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid vectors"},{"ancestorTitles":["EmbeddingCache","Integration with CacheManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Integration with CacheManager should extend CacheManager functionality","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should extend CacheManager functionality"},{"ancestorTitles":["EmbeddingCache","Integration with CacheManager"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingCache Integration with CacheManager should call parent methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call parent methods"}],"endTime":1749171764275,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/cache/EmbeddingCache.test.js","startTime":1749171764128,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["RAGManager","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager constructor should initialize with required dependencies","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should initialize with required dependencies"},{"ancestorTitles":["RAGManager","constructor"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager constructor should initialize components","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize components"},{"ancestorTitles":["RAGManager","initialize"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager initialize should initialize all components successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should initialize all components successfully"},{"ancestorTitles":["RAGManager","initialize"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager initialize should handle initialization errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle initialization errors"},{"ancestorTitles":["RAGManager","processQuery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager processQuery should process query successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should process query successfully"},{"ancestorTitles":["RAGManager","processQuery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager processQuery should handle input processing errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle input processing errors"},{"ancestorTitles":["RAGManager","processQuery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager processQuery should handle document retrieval errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle document retrieval errors"},{"ancestorTitles":["RAGManager","processQuery"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager processQuery should handle response generation errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle response generation errors"},{"ancestorTitles":["RAGManager","processQuery"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager processQuery should require initialization before processing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should require initialization before processing"},{"ancestorTitles":["RAGManager","getHealthStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager getHealthStatus should return health status when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return health status when not initialized"},{"ancestorTitles":["RAGManager","getHealthStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager getHealthStatus should return health status when initialized","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return health status when initialized"},{"ancestorTitles":["RAGManager","getHealthStatus"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager getHealthStatus should handle component status errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle component status errors"},{"ancestorTitles":["RAGManager","shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager shutdown should shutdown all components","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should shutdown all components"},{"ancestorTitles":["RAGManager","shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager shutdown should handle shutdown when not initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle shutdown when not initialized"},{"ancestorTitles":["RAGManager with Performance Features","initialization with performance features"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager with Performance Features initialization with performance features should initialize with performance components","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should initialize with performance components"},{"ancestorTitles":["RAGManager with Performance Features","initialization with performance features"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager with Performance Features initialization with performance features should include performance components in health status","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should include performance components in health status"},{"ancestorTitles":["RAGManager with Performance Features","initialization with performance features"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RAGManager with Performance Features initialization with performance features should shutdown performance components","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should shutdown performance components"}],"endTime":1749171764444,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/rag/RAGManager.test.js","startTime":1749171764278,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["QualityMetrics","Constructor"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics Constructor should initialize with default SLOs","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize with default SLOs"},{"ancestorTitles":["QualityMetrics","Constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics Constructor should initialize time windows","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize time windows"},{"ancestorTitles":["QualityMetrics","recordMetric"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics recordMetric should record metric with timestamp","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should record metric with timestamp"},{"ancestorTitles":["QualityMetrics","recordMetric"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics recordMetric should emit metric event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit metric event"},{"ancestorTitles":["QualityMetrics","recordMetric"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics recordMetric should keep only recent metrics","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should keep only recent metrics"},{"ancestorTitles":["QualityMetrics","recordAPIRequest"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics recordAPIRequest should record response time and request count","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should record response time and request count"},{"ancestorTitles":["QualityMetrics","recordAPIRequest"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics recordAPIRequest should record error for 4xx/5xx status codes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record error for 4xx/5xx status codes"},{"ancestorTitles":["QualityMetrics","recordAPIRequest"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics recordAPIRequest should record success for 2xx/3xx status codes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record success for 2xx/3xx status codes"},{"ancestorTitles":["QualityMetrics","recordAPIRequest"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics recordAPIRequest should record availability based on status code","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should record availability based on status code"},{"ancestorTitles":["QualityMetrics","recordLLMProcessing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics recordLLMProcessing should record processing time and success rate","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should record processing time and success rate"},{"ancestorTitles":["QualityMetrics","recordLLMProcessing"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics recordLLMProcessing should record error on failure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record error on failure"},{"ancestorTitles":["QualityMetrics","calculateMetrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics calculateMetrics should calculate basic statistics","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should calculate basic statistics"},{"ancestorTitles":["QualityMetrics","calculateMetrics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics calculateMetrics should calculate percentiles","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate percentiles"},{"ancestorTitles":["QualityMetrics","calculateMetrics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics calculateMetrics should return zeros for no data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return zeros for no data"},{"ancestorTitles":["QualityMetrics","calculateMetrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics calculateMetrics should filter by time window","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by time window"},{"ancestorTitles":["QualityMetrics","calculateErrorRate"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics calculateErrorRate should calculate error rate correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate error rate correctly"},{"ancestorTitles":["QualityMetrics","calculateErrorRate"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics calculateErrorRate should return 0 for no requests","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 for no requests"},{"ancestorTitles":["QualityMetrics","checkSLOCompliance"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics checkSLOCompliance should check response time SLO","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should check response time SLO"},{"ancestorTitles":["QualityMetrics","checkSLOCompliance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics checkSLOCompliance should check error rate SLO","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should check error rate SLO"},{"ancestorTitles":["QualityMetrics","checkSLOCompliance"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics checkSLOCompliance should throw error for unknown SLO","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for unknown SLO"},{"ancestorTitles":["QualityMetrics","generateQualityReport"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics generateQualityReport should generate comprehensive report","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate comprehensive report"},{"ancestorTitles":["QualityMetrics","generateQualityReport"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics generateQualityReport should handle DAO save failure gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle DAO save failure gracefully"},{"ancestorTitles":["QualityMetrics","SLO Violation Events"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics SLO Violation Events should emit SLO violation event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit SLO violation event"},{"ancestorTitles":["QualityMetrics","Helper Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics Helper Methods getMetricKey should generate consistent keys","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"getMetricKey should generate consistent keys"},{"ancestorTitles":["QualityMetrics","Helper Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMetrics Helper Methods percentile should calculate correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"percentile should calculate correctly"}],"endTime":1749171764593,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/monitoring/QualityMetrics.test.js","startTime":1749171764447,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LLMProviderManager","constructor"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager constructor should throw error with no providers configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error with no providers configured"},{"ancestorTitles":["LLMProviderManager","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager constructor should initialize OpenAI provider when configured","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize OpenAI provider when configured"},{"ancestorTitles":["LLMProviderManager","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager constructor should initialize Anthropic provider when configured","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize Anthropic provider when configured"},{"ancestorTitles":["LLMProviderManager","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager constructor should initialize both providers when both configured","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize both providers when both configured"},{"ancestorTitles":["LLMProviderManager","constructor"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager constructor should handle provider initialization errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle provider initialization errors gracefully"},{"ancestorTitles":["LLMProviderManager","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager constructor should start health monitoring","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should start health monitoring"},{"ancestorTitles":["LLMProviderManager","getProvider"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager getProvider should return available provider","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return available provider"},{"ancestorTitles":["LLMProviderManager","getProvider"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager getProvider should exclude specified providers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should exclude specified providers"},{"ancestorTitles":["LLMProviderManager","getProvider"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager getProvider should throw error when no providers available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when no providers available"},{"ancestorTitles":["LLMProviderManager","getProvider"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager getProvider should select provider based on document size strategy","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should select provider based on document size strategy"},{"ancestorTitles":["LLMProviderManager","getProvider"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager getProvider should select provider based on task type strategy","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should select provider based on task type strategy"},{"ancestorTitles":["LLMProviderManager","getProvider"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager getProvider should select provider with lowest error rate as fallback","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should select provider with lowest error rate as fallback"},{"ancestorTitles":["LLMProviderManager","executeWithFailover"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager executeWithFailover should execute successfully with first provider","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should execute successfully with first provider"},{"ancestorTitles":["LLMProviderManager","executeWithFailover"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager executeWithFailover should failover to second provider on first provider failure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should failover to second provider on first provider failure"},{"ancestorTitles":["LLMProviderManager","executeWithFailover"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager executeWithFailover should throw error when all providers fail","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when all providers fail"},{"ancestorTitles":["LLMProviderManager","executeWithFailover"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager executeWithFailover should handle provider failure and update health","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle provider failure and update health"},{"ancestorTitles":["LLMProviderManager","executeWithProvider"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager executeWithProvider should execute and add metadata","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should execute and add metadata"},{"ancestorTitles":["LLMProviderManager","executeWithProvider"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager executeWithProvider should enhance error with provider context","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should enhance error with provider context"},{"ancestorTitles":["LLMProviderManager","getAvailableProviders"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager getAvailableProviders should return only healthy and available providers","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return only healthy and available providers"},{"ancestorTitles":["LLMProviderManager","getAvailableProviders"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager getAvailableProviders should exclude specified providers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should exclude specified providers"},{"ancestorTitles":["LLMProviderManager","getAvailableProviders"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager getAvailableProviders should exclude unavailable providers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should exclude unavailable providers"},{"ancestorTitles":["LLMProviderManager","handleProviderFailure"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager handleProviderFailure should increment consecutive failures","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should increment consecutive failures"},{"ancestorTitles":["LLMProviderManager","handleProviderFailure"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager handleProviderFailure should mark provider unavailable after threshold","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should mark provider unavailable after threshold"},{"ancestorTitles":["LLMProviderManager","handleProviderFailure"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager handleProviderFailure should handle unknown provider gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle unknown provider gracefully"},{"ancestorTitles":["LLMProviderManager","performHealthChecks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager performHealthChecks should perform health checks on all providers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should perform health checks on all providers"},{"ancestorTitles":["LLMProviderManager","performHealthChecks"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager performHealthChecks should handle health check failures","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle health check failures"},{"ancestorTitles":["LLMProviderManager","getSystemHealth"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager getSystemHealth should return system health summary","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return system health summary"},{"ancestorTitles":["LLMProviderManager","shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"LLMProviderManager shutdown should clear health check interval","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clear health check interval"}],"endTime":1749171764767,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/enrichment/LLMProviderManager.test.js","startTime":1749171764596,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Document Model","Model Definition"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Model Definition should define Document model with correct attributes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should define Document model with correct attributes"},{"ancestorTitles":["Document Model","Instance Methods","hasEmbedding"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Instance Methods hasEmbedding should return true when embedding exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when embedding exists"},{"ancestorTitles":["Document Model","Instance Methods","hasEmbedding"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Instance Methods hasEmbedding should return false when embedding is null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when embedding is null"},{"ancestorTitles":["Document Model","Instance Methods","getEmbedding"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Instance Methods getEmbedding should return parsed embedding array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return parsed embedding array"},{"ancestorTitles":["Document Model","Instance Methods","getEmbedding"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Instance Methods getEmbedding should return null for invalid embedding","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for invalid embedding"},{"ancestorTitles":["Document Model","Instance Methods","setEmbedding"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Instance Methods setEmbedding should set embedding from array","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should set embedding from array"},{"ancestorTitles":["Document Model","Instance Methods","setEmbedding"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Instance Methods setEmbedding should handle null embedding","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle null embedding"},{"ancestorTitles":["Document Model","Instance Methods","calculateWordCount"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Instance Methods calculateWordCount should calculate word count from content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate word count from content"},{"ancestorTitles":["Document Model","Instance Methods","calculateWordCount"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Instance Methods calculateWordCount should return 0 for empty content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 0 for empty content"},{"ancestorTitles":["Document Model","Instance Methods","isEnriched"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Instance Methods isEnriched should return true for completed enrichment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for completed enrichment"},{"ancestorTitles":["Document Model","Instance Methods","isEnriched"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Instance Methods isEnriched should return false for pending enrichment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for pending enrichment"},{"ancestorTitles":["Document Model","Class Methods","findBySource"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Class Methods findBySource should find documents by source ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find documents by source ID"},{"ancestorTitles":["Document Model","Class Methods","findBySource"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Class Methods findBySource should return empty array for non-existent source","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array for non-existent source"},{"ancestorTitles":["Document Model","Class Methods","findByContentHash"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Class Methods findByContentHash should find document by content hash","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find document by content hash"},{"ancestorTitles":["Document Model","Class Methods","findByContentHash"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Class Methods findByContentHash should return null for non-existent hash","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent hash"},{"ancestorTitles":["Document Model","Class Methods","findSimilar"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Class Methods findSimilar should find similar documents by embedding","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find similar documents by embedding"},{"ancestorTitles":["Document Model","Class Methods","findSimilar"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Class Methods findSimilar should use default parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default parameters"},{"ancestorTitles":["Document Model","Class Methods","searchByVector"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Class Methods searchByVector should search documents by vector similarity","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should search documents by vector similarity"},{"ancestorTitles":["Document Model","CRUD Operations","create"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model CRUD Operations create should create new document","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create new document"},{"ancestorTitles":["Document Model","CRUD Operations","findAll"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model CRUD Operations findAll should find all documents","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should find all documents"},{"ancestorTitles":["Document Model","CRUD Operations","findAll"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Document Model CRUD Operations findAll should find documents with conditions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find documents with conditions"},{"ancestorTitles":["Document Model","CRUD Operations","update"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model CRUD Operations update should update document","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update document"},{"ancestorTitles":["Document Model","Validations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Validations should validate required fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate required fields"},{"ancestorTitles":["Document Model","Hooks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Hooks should have hooks for word count and timestamps","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have hooks for word count and timestamps"},{"ancestorTitles":["Document Model","Vector Operations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Document Model Vector Operations should handle vector embedding storage","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle vector embedding storage"}],"endTime":1749171764928,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/orm/document-model.test.js","startTime":1749171764769,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["EmbeddingService","Constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService Constructor should initialize with default configuration","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should initialize with default configuration"},{"ancestorTitles":["EmbeddingService","Constructor"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService Constructor should throw error when API key is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when API key is missing"},{"ancestorTitles":["EmbeddingService","Constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService Constructor should accept custom configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should accept custom configuration"},{"ancestorTitles":["EmbeddingService","generateEmbedding"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService generateEmbedding should generate embedding for valid text","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate embedding for valid text"},{"ancestorTitles":["EmbeddingService","generateEmbedding"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService generateEmbedding should handle text truncation for long inputs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle text truncation for long inputs"},{"ancestorTitles":["EmbeddingService","generateEmbedding"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService generateEmbedding should validate input text","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate input text"},{"ancestorTitles":["EmbeddingService","generateEmbedding"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService generateEmbedding should handle API errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle API errors"},{"ancestorTitles":["EmbeddingService","generateEmbedding"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService generateEmbedding should handle network timeouts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle network timeouts"},{"ancestorTitles":["EmbeddingService","generateEmbedding"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService generateEmbedding should handle invalid response format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid response format"},{"ancestorTitles":["EmbeddingService","generateEmbedding"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService generateEmbedding should work with different models","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should work with different models"},{"ancestorTitles":["EmbeddingService","generateEmbedding"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService generateEmbedding should reject unsupported models","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject unsupported models"},{"ancestorTitles":["EmbeddingService","generateBatchEmbeddings"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService generateBatchEmbeddings should generate embeddings for multiple texts","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate embeddings for multiple texts"},{"ancestorTitles":["EmbeddingService","generateBatchEmbeddings"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService generateBatchEmbeddings should handle batch processing for large arrays","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle batch processing for large arrays"},{"ancestorTitles":["EmbeddingService","generateBatchEmbeddings"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService generateBatchEmbeddings should validate input array","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate input array"},{"ancestorTitles":["EmbeddingService","generateBatchEmbeddings"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService generateBatchEmbeddings should handle batch API errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle batch API errors"},{"ancestorTitles":["EmbeddingService","Utility Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService Utility Methods should return correct embedding dimensions","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return correct embedding dimensions"},{"ancestorTitles":["EmbeddingService","Utility Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService Utility Methods should throw error for unknown model dimensions","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for unknown model dimensions"},{"ancestorTitles":["EmbeddingService","Utility Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService Utility Methods should calculate costs correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate costs correctly"},{"ancestorTitles":["EmbeddingService","Utility Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService Utility Methods should throw error for unknown model costs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for unknown model costs"},{"ancestorTitles":["EmbeddingService","Utility Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService Utility Methods should report readiness status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should report readiness status"},{"ancestorTitles":["EmbeddingService","Utility Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService Utility Methods should return service status","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return service status"},{"ancestorTitles":["EmbeddingService","Request Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService Request Handling should include proper headers in requests","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should include proper headers in requests"},{"ancestorTitles":["EmbeddingService","Request Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService Request Handling should handle JSON parsing errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle JSON parsing errors"},{"ancestorTitles":["EmbeddingService","Request Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"EmbeddingService Request Handling should handle network errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle network errors"}],"endTime":1749171765068,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/enrichment/EmbeddingService.test.js","startTime":1749171764930,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ResponseCache","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Initialization should initialize with default TTL configuration","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should initialize with default TTL configuration"},{"ancestorTitles":["ResponseCache","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Initialization should initialize with custom TTL configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with custom TTL configuration"},{"ancestorTitles":["ResponseCache","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Initialization should initialize response statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize response statistics"},{"ancestorTitles":["ResponseCache","Response Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Response Caching should cache enrichment response","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cache enrichment response"},{"ancestorTitles":["ResponseCache","Response Caching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Response Caching should get cached response","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get cached response"},{"ancestorTitles":["ResponseCache","Response Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Response Caching should return null for cache miss","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null for cache miss"},{"ancestorTitles":["ResponseCache","Response Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Response Caching should update response statistics on cache hit","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should update response statistics on cache hit"},{"ancestorTitles":["ResponseCache","Response Type Specific Caching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Response Type Specific Caching should cache enrichment response with correct TTL","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cache enrichment response with correct TTL"},{"ancestorTitles":["ResponseCache","Response Type Specific Caching"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Response Type Specific Caching should cache summary response with correct TTL","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cache summary response with correct TTL"},{"ancestorTitles":["ResponseCache","Response Type Specific Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Response Type Specific Caching should cache translation response with correct TTL","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cache translation response with correct TTL"},{"ancestorTitles":["ResponseCache","Response Type Specific Caching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Response Type Specific Caching should cache classification response with correct TTL","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cache classification response with correct TTL"},{"ancestorTitles":["ResponseCache","Response Type Specific Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Response Type Specific Caching should cache extraction response with correct TTL","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cache extraction response with correct TTL"},{"ancestorTitles":["ResponseCache","Response Type Specific Caching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Response Type Specific Caching should cache generation response with correct TTL","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cache generation response with correct TTL"},{"ancestorTitles":["ResponseCache","Key Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Key Generation should generate consistent keys for same inputs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate consistent keys for same inputs"},{"ancestorTitles":["ResponseCache","Key Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Key Generation should generate different keys for different response types","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate different keys for different response types"},{"ancestorTitles":["ResponseCache","Key Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Key Generation should generate different keys for different parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate different keys for different parameters"},{"ancestorTitles":["ResponseCache","Key Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Key Generation should handle parameters with different order","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle parameters with different order"},{"ancestorTitles":["ResponseCache","Cache Invalidation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Cache Invalidation should invalidate responses by model","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should invalidate responses by model"},{"ancestorTitles":["ResponseCache","Cache Invalidation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Cache Invalidation should invalidate responses by type","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should invalidate responses by type"},{"ancestorTitles":["ResponseCache","Cache Invalidation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Cache Invalidation should invalidate document enrichment responses","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should invalidate document enrichment responses"},{"ancestorTitles":["ResponseCache","Cache Invalidation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Cache Invalidation should invalidate all responses","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should invalidate all responses"},{"ancestorTitles":["ResponseCache","Cache Warming"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Cache Warming should warm response cache","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should warm response cache"},{"ancestorTitles":["ResponseCache","Cache Warming"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Cache Warming should identify already cached responses","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should identify already cached responses"},{"ancestorTitles":["ResponseCache","Cache Warming"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Cache Warming should preload common responses","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should preload common responses"},{"ancestorTitles":["ResponseCache","Statistics and Metrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Statistics and Metrics should get response-specific statistics","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get response-specific statistics"},{"ancestorTitles":["ResponseCache","Statistics and Metrics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Statistics and Metrics should calculate cost savings","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate cost savings"},{"ancestorTitles":["ResponseCache","Statistics and Metrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Statistics and Metrics should get response type breakdown","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should get response type breakdown"},{"ancestorTitles":["ResponseCache","Cost Estimation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Cost Estimation should estimate cost for GPT-4","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should estimate cost for GPT-4"},{"ancestorTitles":["ResponseCache","Cost Estimation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Cost Estimation should estimate cost for GPT-3.5-turbo","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should estimate cost for GPT-3.5-turbo"},{"ancestorTitles":["ResponseCache","Cost Estimation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Cost Estimation should use default cost for unknown models","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default cost for unknown models"},{"ancestorTitles":["ResponseCache","Cost Estimation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Cost Estimation should handle zero tokens","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle zero tokens"},{"ancestorTitles":["ResponseCache","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Error Handling should handle cache set errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cache set errors gracefully"},{"ancestorTitles":["ResponseCache","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Error Handling should handle cache get errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cache get errors gracefully"},{"ancestorTitles":["ResponseCache","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Error Handling should handle invalidation errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalidation errors gracefully"},{"ancestorTitles":["ResponseCache","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Error Handling should handle warming errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle warming errors gracefully"},{"ancestorTitles":["ResponseCache","Token Counting"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Token Counting should extract token count from response usage","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract token count from response usage"},{"ancestorTitles":["ResponseCache","Token Counting"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Token Counting should estimate token count from content length","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should estimate token count from content length"},{"ancestorTitles":["ResponseCache","Token Counting"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Token Counting should handle responses without content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle responses without content"},{"ancestorTitles":["ResponseCache","Integration with CacheManager"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Integration with CacheManager should extend CacheManager functionality","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should extend CacheManager functionality"},{"ancestorTitles":["ResponseCache","Integration with CacheManager"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ResponseCache Integration with CacheManager should call parent methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call parent methods"}],"endTime":1749171765217,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/cache/ResponseCache.test.js","startTime":1749171765071,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DashboardManager","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager constructor should initialize with default config","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize with default config"},{"ancestorTitles":["DashboardManager","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager constructor should initialize with custom config","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with custom config"},{"ancestorTitles":["DashboardManager","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager constructor should initialize dashboard data structure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize dashboard data structure"},{"ancestorTitles":["DashboardManager","initialize"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager initialize should initialize successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["DashboardManager","initialize"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager initialize should handle initialization errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle initialization errors"},{"ancestorTitles":["DashboardManager","setupEventListeners"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager setupEventListeners should set up cost tracker event listeners","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should set up cost tracker event listeners"},{"ancestorTitles":["DashboardManager","setupEventListeners"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager setupEventListeners should set up quality metrics event listeners","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should set up quality metrics event listeners"},{"ancestorTitles":["DashboardManager","setupEventListeners"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager setupEventListeners should handle missing cost tracker","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing cost tracker"},{"ancestorTitles":["DashboardManager","setupEventListeners"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager setupEventListeners should handle missing quality metrics","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing quality metrics"},{"ancestorTitles":["DashboardManager","refreshCostDashboard"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager refreshCostDashboard should refresh cost dashboard data","invocations":1,"location":null,"numPassingAsserts":9,"retryReasons":[],"status":"passed","title":"should refresh cost dashboard data"},{"ancestorTitles":["DashboardManager","refreshCostDashboard"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager refreshCostDashboard should handle missing cost tracker","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing cost tracker"},{"ancestorTitles":["DashboardManager","refreshCostDashboard"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager refreshCostDashboard should handle cost tracker errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cost tracker errors"},{"ancestorTitles":["DashboardManager","refreshQualityDashboard"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager refreshQualityDashboard should refresh quality dashboard data","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should refresh quality dashboard data"},{"ancestorTitles":["DashboardManager","refreshQualityDashboard"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager refreshQualityDashboard should handle missing quality metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing quality metrics"},{"ancestorTitles":["DashboardManager","refreshQualityDashboard"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager refreshQualityDashboard should handle quality metrics errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle quality metrics errors"},{"ancestorTitles":["DashboardManager","refreshOperationalDashboard"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager refreshOperationalDashboard should refresh operational dashboard data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should refresh operational dashboard data"},{"ancestorTitles":["DashboardManager","calculateCostTrends"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager calculateCostTrends should calculate increasing trend","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate increasing trend"},{"ancestorTitles":["DashboardManager","calculateCostTrends"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager calculateCostTrends should calculate stable trend","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate stable trend"},{"ancestorTitles":["DashboardManager","calculateCostTrends"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager calculateCostTrends should handle insufficient data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle insufficient data"},{"ancestorTitles":["DashboardManager","calculateCostTrends"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager calculateCostTrends should handle empty data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty data"},{"ancestorTitles":["DashboardManager","calculateQualityTrends"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager calculateQualityTrends should calculate improving trend","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate improving trend"},{"ancestorTitles":["DashboardManager","calculateQualityTrends"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager calculateQualityTrends should calculate degrading trend","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate degrading trend"},{"ancestorTitles":["DashboardManager","calculateQualityTrends"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager calculateQualityTrends should handle insufficient data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle insufficient data"},{"ancestorTitles":["DashboardManager","real-time updates"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager real-time updates should update real-time cost data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update real-time cost data"},{"ancestorTitles":["DashboardManager","real-time updates"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager real-time updates should update real-time quality data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update real-time quality data"},{"ancestorTitles":["DashboardManager","real-time updates"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager real-time updates should handle budget alerts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle budget alerts"},{"ancestorTitles":["DashboardManager","real-time updates"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager real-time updates should handle SLO violations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle SLO violations"},{"ancestorTitles":["DashboardManager","data getters"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager data getters should get cost dashboard data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get cost dashboard data"},{"ancestorTitles":["DashboardManager","data getters"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager data getters should get quality dashboard data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get quality dashboard data"},{"ancestorTitles":["DashboardManager","data getters"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager data getters should get operational dashboard data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get operational dashboard data"},{"ancestorTitles":["DashboardManager","data getters"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager data getters should get all dashboard data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get all dashboard data"},{"ancestorTitles":["DashboardManager","periodic refresh"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager periodic refresh should start periodic refresh","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should start periodic refresh"},{"ancestorTitles":["DashboardManager","periodic refresh"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager periodic refresh should stop periodic refresh","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should stop periodic refresh"},{"ancestorTitles":["DashboardManager","periodic refresh"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager periodic refresh should handle refresh errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle refresh errors gracefully"},{"ancestorTitles":["DashboardManager","shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager shutdown should shutdown gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should shutdown gracefully"},{"ancestorTitles":["DashboardManager","shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DashboardManager shutdown should handle shutdown errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle shutdown errors"}],"endTime":1749171765370,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/monitoring/dashboard/DashboardManager.test.js","startTime":1749171765220,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["FeedbackDAO","createFeedback"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO createFeedback should create feedback successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create feedback successfully"},{"ancestorTitles":["FeedbackDAO","createFeedback"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO createFeedback should handle errors during feedback creation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle errors during feedback creation"},{"ancestorTitles":["FeedbackDAO","createDocumentFeedback"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO createDocumentFeedback should create legacy document feedback successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create legacy document feedback successfully"},{"ancestorTitles":["FeedbackDAO","getFeedbackById"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackById should get feedback by ID successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get feedback by ID successfully"},{"ancestorTitles":["FeedbackDAO","getFeedbackById"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackById should return null when feedback not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when feedback not found"},{"ancestorTitles":["FeedbackDAO","getFeedbackById"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackById should handle get feedback by ID errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle get feedback by ID errors"},{"ancestorTitles":["FeedbackDAO","getFeedbackByDocumentId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackByDocumentId should get feedback by document ID with default options","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should get feedback by document ID with default options"},{"ancestorTitles":["FeedbackDAO","getFeedbackByDocumentId"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackByDocumentId should get feedback by document ID with feedback type filter","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should get feedback by document ID with feedback type filter"},{"ancestorTitles":["FeedbackDAO","getFeedbackByDocumentId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackByDocumentId should get feedback by document ID with custom pagination","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get feedback by document ID with custom pagination"},{"ancestorTitles":["FeedbackDAO","getFeedbackByDocumentId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackByDocumentId should handle get feedback by document ID errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle get feedback by document ID errors"},{"ancestorTitles":["FeedbackDAO","getFeedbackByUserId"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackByUserId should get feedback by user ID successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should get feedback by user ID successfully"},{"ancestorTitles":["FeedbackDAO","getFeedbackByUserId"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackByUserId should handle get feedback by user ID errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle get feedback by user ID errors"},{"ancestorTitles":["FeedbackDAO","updateFeedback"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO updateFeedback should update feedback successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update feedback successfully"},{"ancestorTitles":["FeedbackDAO","updateFeedback"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO updateFeedback should throw error when no valid fields to update","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when no valid fields to update"},{"ancestorTitles":["FeedbackDAO","updateFeedback"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO updateFeedback should throw error when feedback not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when feedback not found"},{"ancestorTitles":["FeedbackDAO","updateFeedback"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO updateFeedback should handle update feedback errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle update feedback errors"},{"ancestorTitles":["FeedbackDAO","deleteFeedback"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO deleteFeedback should delete feedback successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should delete feedback successfully"},{"ancestorTitles":["FeedbackDAO","deleteFeedback"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO deleteFeedback should throw error when feedback not found for deletion","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when feedback not found for deletion"},{"ancestorTitles":["FeedbackDAO","deleteFeedback"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO deleteFeedback should handle delete feedback errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle delete feedback errors"},{"ancestorTitles":["FeedbackDAO","getFeedbackAggregates"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackAggregates should get feedback aggregates successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get feedback aggregates successfully"},{"ancestorTitles":["FeedbackDAO","getFeedbackAggregates"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackAggregates should return null when aggregates not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when aggregates not found"},{"ancestorTitles":["FeedbackDAO","getFeedbackAggregates"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackAggregates should handle get feedback aggregates errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle get feedback aggregates errors"},{"ancestorTitles":["FeedbackDAO","updateFeedbackAggregates"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO updateFeedbackAggregates should update feedback aggregates successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update feedback aggregates successfully"},{"ancestorTitles":["FeedbackDAO","updateFeedbackAggregates"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO updateFeedbackAggregates should handle null values in aggregates calculation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle null values in aggregates calculation"},{"ancestorTitles":["FeedbackDAO","updateFeedbackAggregates"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO updateFeedbackAggregates should handle update feedback aggregates errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle update feedback aggregates errors"},{"ancestorTitles":["FeedbackDAO","getFeedbackStatistics"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackStatistics should get feedback statistics for all documents","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get feedback statistics for all documents"},{"ancestorTitles":["FeedbackDAO","getFeedbackStatistics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackStatistics should get feedback statistics for specific documents","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get feedback statistics for specific documents"},{"ancestorTitles":["FeedbackDAO","getFeedbackStatistics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackStatistics should handle get feedback statistics errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle get feedback statistics errors"},{"ancestorTitles":["FeedbackDAO","getFeedbackTrends"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackTrends should get feedback trends with default options","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get feedback trends with default options"},{"ancestorTitles":["FeedbackDAO","getFeedbackTrends"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackTrends should get feedback trends with filters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get feedback trends with filters"},{"ancestorTitles":["FeedbackDAO","getFeedbackTrends"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO getFeedbackTrends should handle get feedback trends errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle get feedback trends errors"},{"ancestorTitles":["FeedbackDAO","bulkCreateFeedback"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO bulkCreateFeedback should bulk create feedback successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should bulk create feedback successfully"},{"ancestorTitles":["FeedbackDAO","bulkCreateFeedback"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO bulkCreateFeedback should throw error for invalid feedback entries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for invalid feedback entries"},{"ancestorTitles":["FeedbackDAO","bulkCreateFeedback"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"FeedbackDAO bulkCreateFeedback should rollback on error","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should rollback on error"}],"endTime":1749171765524,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/FeedbackDAO.test.js","startTime":1749171765373,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DocumentRetriever","Constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Constructor should initialize with default options","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with default options"},{"ancestorTitles":["DocumentRetriever","Constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Constructor should initialize with embedding service when API key provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with embedding service when API key provided"},{"ancestorTitles":["DocumentRetriever","Constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Constructor should use custom embedding model when specified","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use custom embedding model when specified"},{"ancestorTitles":["DocumentRetriever","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Initialization should initialize successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["DocumentRetriever","Initialization"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Initialization should throw error if database manager is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if database manager is missing"},{"ancestorTitles":["DocumentRetriever","Query Embedding Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Query Embedding Generation should generate real embeddings when service is available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate real embeddings when service is available"},{"ancestorTitles":["DocumentRetriever","Query Embedding Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Query Embedding Generation should fall back to mock embeddings when service is not available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fall back to mock embeddings when service is not available"},{"ancestorTitles":["DocumentRetriever","Query Embedding Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Query Embedding Generation should handle embedding service errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle embedding service errors gracefully"},{"ancestorTitles":["DocumentRetriever","Vector Search"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Vector Search should perform vector search with similarity threshold","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should perform vector search with similarity threshold"},{"ancestorTitles":["DocumentRetriever","Vector Search"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Vector Search should handle empty vector search results","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty vector search results"},{"ancestorTitles":["DocumentRetriever","Keyword Search"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Keyword Search should perform keyword search with ranking","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should perform keyword search with ranking"},{"ancestorTitles":["DocumentRetriever","Keyword Search"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Keyword Search should handle special characters in search query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle special characters in search query"},{"ancestorTitles":["DocumentRetriever","Hybrid Search"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Hybrid Search should combine vector and keyword search results using RRF","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should combine vector and keyword search results using RRF"},{"ancestorTitles":["DocumentRetriever","Hybrid Search"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Hybrid Search should handle empty search results gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty search results gracefully"},{"ancestorTitles":["DocumentRetriever","Hybrid Search"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Hybrid Search should respect maxResults parameter","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should respect maxResults parameter"},{"ancestorTitles":["DocumentRetriever","Result Ranking and Fusion"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Result Ranking and Fusion should implement Reciprocal Rank Fusion correctly","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should implement Reciprocal Rank Fusion correctly"},{"ancestorTitles":["DocumentRetriever","Result Ranking and Fusion"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Result Ranking and Fusion should handle results with only vector matches","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle results with only vector matches"},{"ancestorTitles":["DocumentRetriever","Result Ranking and Fusion"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Result Ranking and Fusion should handle results with only keyword matches","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle results with only keyword matches"},{"ancestorTitles":["DocumentRetriever","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Error Handling should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["DocumentRetriever","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Error Handling should handle visibility filtering errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle visibility filtering errors"},{"ancestorTitles":["DocumentRetriever","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Error Handling should validate query parameter","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate query parameter"},{"ancestorTitles":["DocumentRetriever","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentRetriever Error Handling should validate user authentication","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate user authentication"}],"endTime":1749171765668,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/rag/DocumentRetriever.test.js","startTime":1749171765527,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Source Model","Model Definition"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Model Definition should define Source model with correct attributes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should define Source model with correct attributes"},{"ancestorTitles":["Source Model","Instance Methods","isActive"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Instance Methods isActive should return true for active source","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for active source"},{"ancestorTitles":["Source Model","Instance Methods","isActive"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Instance Methods isActive should return false for inactive source","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for inactive source"},{"ancestorTitles":["Source Model","Instance Methods","getLastIngestion"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Instance Methods getLastIngestion should return last ingestion date","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return last ingestion date"},{"ancestorTitles":["Source Model","Instance Methods","getLastIngestion"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Instance Methods getLastIngestion should return null if no ingestion date","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if no ingestion date"},{"ancestorTitles":["Source Model","Instance Methods","updateLastIngestion"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Instance Methods updateLastIngestion should update last ingestion timestamp","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update last ingestion timestamp"},{"ancestorTitles":["Source Model","Instance Methods","updateLastIngestion"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Instance Methods updateLastIngestion should use current date if no date provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use current date if no date provided"},{"ancestorTitles":["Source Model","Class Methods","findActive"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Class Methods findActive should find all active sources","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find all active sources"},{"ancestorTitles":["Source Model","Class Methods","findActive"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Class Methods findActive should return empty array if no active sources","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array if no active sources"},{"ancestorTitles":["Source Model","Class Methods","findByType"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Class Methods findByType should find sources by type","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find sources by type"},{"ancestorTitles":["Source Model","Class Methods","findByType"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Class Methods findByType should return empty array for unknown type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array for unknown type"},{"ancestorTitles":["Source Model","Class Methods","findByName"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Class Methods findByName should find source by name","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find source by name"},{"ancestorTitles":["Source Model","Class Methods","findByName"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Class Methods findByName should return null for non-existent source","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent source"},{"ancestorTitles":["Source Model","CRUD Operations","create"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Source Model CRUD Operations create should create new source","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create new source"},{"ancestorTitles":["Source Model","CRUD Operations","findAll"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model CRUD Operations findAll should find all sources","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should find all sources"},{"ancestorTitles":["Source Model","CRUD Operations","findAll"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Source Model CRUD Operations findAll should find sources with conditions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find sources with conditions"},{"ancestorTitles":["Source Model","CRUD Operations","findOne"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model CRUD Operations findOne should find single source","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find single source"},{"ancestorTitles":["Source Model","CRUD Operations","findByPk"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model CRUD Operations findByPk should find source by primary key","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find source by primary key"},{"ancestorTitles":["Source Model","CRUD Operations","update"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Source Model CRUD Operations update should update source","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update source"},{"ancestorTitles":["Source Model","CRUD Operations","destroy"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model CRUD Operations destroy should delete source","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should delete source"},{"ancestorTitles":["Source Model","Validations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Validations should validate required fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate required fields"},{"ancestorTitles":["Source Model","Hooks"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Source Model Hooks should have beforeCreate hook for timestamps","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have beforeCreate hook for timestamps"}],"endTime":1749171765829,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/orm/source-model.test.js","startTime":1749171765671,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["StaticSourceHandler","Configuration Validation"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Configuration Validation should validate valid configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should validate valid configuration"},{"ancestorTitles":["StaticSourceHandler","Configuration Validation"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Configuration Validation should reject configuration without basePath","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject configuration without basePath"},{"ancestorTitles":["StaticSourceHandler","Configuration Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Configuration Validation should reject configuration with non-existent path","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject configuration with non-existent path"},{"ancestorTitles":["StaticSourceHandler","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Initialization should initialize successfully with valid configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize successfully with valid configuration"},{"ancestorTitles":["StaticSourceHandler","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Initialization should fail initialization with invalid path","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fail initialization with invalid path"},{"ancestorTitles":["StaticSourceHandler","Discovery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Discovery should discover files in directory","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should discover files in directory"},{"ancestorTitles":["StaticSourceHandler","Discovery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Discovery should filter files by extension","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should filter files by extension"},{"ancestorTitles":["StaticSourceHandler","Content Extraction"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Content Extraction should extract text file content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should extract text file content"},{"ancestorTitles":["StaticSourceHandler","Content Extraction"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Content Extraction should handle binary files","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle binary files"},{"ancestorTitles":["StaticSourceHandler","Content Transformation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Content Transformation should transform extracted content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should transform extracted content"},{"ancestorTitles":["StaticSourceHandler","Content Transformation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Content Transformation should extract title from file path","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract title from file path"},{"ancestorTitles":["StaticSourceHandler","Helper Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Helper Methods should check if file is allowed","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should check if file is allowed"},{"ancestorTitles":["StaticSourceHandler","Helper Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Helper Methods should determine if file is binary","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should determine if file is binary"},{"ancestorTitles":["StaticSourceHandler","Helper Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Helper Methods should clean content properly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clean content properly"},{"ancestorTitles":["StaticSourceHandler","Helper Methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"StaticSourceHandler Helper Methods should count words correctly","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should count words correctly"}],"endTime":1749171765963,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/ingestion/handlers/StaticSourceHandler.test.js","startTime":1749171765831,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CostReporter","Initialization"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Initialization should initialize with default configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with default configuration"},{"ancestorTitles":["CostReporter","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Initialization should initialize with custom configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with custom configuration"},{"ancestorTitles":["CostReporter","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Initialization should initialize DAO when persistence enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize DAO when persistence enabled"},{"ancestorTitles":["CostReporter","Report Generation"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Report Generation should generate basic report with default options","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should generate basic report with default options"},{"ancestorTitles":["CostReporter","Report Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Report Generation should generate report for specific date range","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate report for specific date range"},{"ancestorTitles":["CostReporter","Report Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Report Generation should generate report with analytics","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate report with analytics"},{"ancestorTitles":["CostReporter","Report Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Report Generation should generate report with recommendations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate report with recommendations"},{"ancestorTitles":["CostReporter","Report Formatting"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Report Formatting should format report as JSON by default","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should format report as JSON by default"},{"ancestorTitles":["CostReporter","Report Formatting"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Report Formatting should format report as CSV","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should format report as CSV"},{"ancestorTitles":["CostReporter","Report Formatting"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Report Formatting should format report as HTML","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should format report as HTML"},{"ancestorTitles":["CostReporter","Report Export"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Report Export should export report to file","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export report to file"},{"ancestorTitles":["CostReporter","Analytics Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Analytics Generation should generate analytics from cost events","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should generate analytics from cost events"},{"ancestorTitles":["CostReporter","Trends Analysis"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Trends Analysis should generate trends from cost events","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate trends from cost events"},{"ancestorTitles":["CostReporter","Error Handling"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Error Handling should handle DAO errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle DAO errors gracefully"},{"ancestorTitles":["CostReporter","Error Handling"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Error Handling should handle invalid date ranges","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid date ranges"},{"ancestorTitles":["CostReporter","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Error Handling should handle empty cost events","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty cost events"},{"ancestorTitles":["CostReporter","Configuration Options"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Configuration Options should respect timezone configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should respect timezone configuration"},{"ancestorTitles":["CostReporter","Configuration Options"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CostReporter Configuration Options should use default start date when not specified","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use default start date when not specified"}],"endTime":1749171766117,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/monitoring/CostReporter.test.js","startTime":1749171765965,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ORMManager","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager constructor should create ORM manager with default config","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create ORM manager with default config"},{"ancestorTitles":["ORMManager","constructor"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager constructor should create ORM manager with custom config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create ORM manager with custom config"},{"ancestorTitles":["ORMManager","initialize"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager initialize should initialize ORM successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize ORM successfully"},{"ancestorTitles":["ORMManager","initialize"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager initialize should handle initialization errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle initialization errors"},{"ancestorTitles":["ORMManager","getModel"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager getModel should get model when initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get model when initialized"},{"ancestorTitles":["ORMManager","getModel"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager getModel should throw error when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when not initialized"},{"ancestorTitles":["ORMManager","getModels"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager getModels should get all models when initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get all models when initialized"},{"ancestorTitles":["ORMManager","getModels"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager getModels should throw error when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when not initialized"},{"ancestorTitles":["ORMManager","getSequelize"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager getSequelize should get Sequelize instance when initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get Sequelize instance when initialized"},{"ancestorTitles":["ORMManager","getSequelize"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager getSequelize should throw error when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when not initialized"},{"ancestorTitles":["ORMManager","isReady"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager isReady should return true when initialized and ready","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when initialized and ready"},{"ancestorTitles":["ORMManager","isReady"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager isReady should return false when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when not initialized"},{"ancestorTitles":["ORMManager","transaction"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager transaction should execute transaction when initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should execute transaction when initialized"},{"ancestorTitles":["ORMManager","transaction"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager transaction should throw error when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when not initialized"},{"ancestorTitles":["ORMManager","query"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager query should execute query when initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should execute query when initialized"},{"ancestorTitles":["ORMManager","query"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager query should execute query with default options","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should execute query with default options"},{"ancestorTitles":["ORMManager","query"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager query should throw error when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when not initialized"},{"ancestorTitles":["ORMManager","sync"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager sync should sync models when initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should sync models when initialized"},{"ancestorTitles":["ORMManager","sync"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager sync should sync with default options","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should sync with default options"},{"ancestorTitles":["ORMManager","sync"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager sync should throw error when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when not initialized"},{"ancestorTitles":["ORMManager","close"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager close should close ORM when initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should close ORM when initialized"},{"ancestorTitles":["ORMManager","close"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager close should handle close when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle close when not initialized"},{"ancestorTitles":["ORMManager","healthCheck"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager healthCheck should return healthy status when initialized and connected","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return healthy status when initialized and connected"},{"ancestorTitles":["ORMManager","healthCheck"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager healthCheck should return error status when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return error status when not initialized"},{"ancestorTitles":["ORMManager","healthCheck"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORMManager healthCheck should return error status when authentication fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return error status when authentication fails"},{"ancestorTitles":["ORM Module Functions","getORM"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ORM Module Functions getORM should create singleton ORM instance","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create singleton ORM instance"},{"ancestorTitles":["ORM Module Functions","getORM"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORM Module Functions getORM should create ORM with config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create ORM with config"},{"ancestorTitles":["ORM Module Functions","initializeORM"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ORM Module Functions initializeORM should initialize ORM and return instance","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize ORM and return instance"},{"ancestorTitles":["ORM Module Functions","initializeORM"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ORM Module Functions initializeORM should initialize ORM with config","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize ORM with config"},{"ancestorTitles":["ORM Module Functions","closeORM"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ORM Module Functions closeORM should close ORM instance","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should close ORM instance"},{"ancestorTitles":["ORM Module Functions","closeORM"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ORM Module Functions closeORM should handle close when no instance exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle close when no instance exists"}],"endTime":1749171766270,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/orm/orm-manager.test.js","startTime":1749171766119,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CacheManager","Initialization"],"duration":2,"failureDetails":[{"matcherResult":{"actual":"redis","expected":"localhost","message":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"localhost\"\nReceived: \"redis\"","name":"toBe","pass":false}}],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"localhost\"\nReceived: \"redis\"\n    at Object.toBe (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/cache/CacheManager.test.js:91:39)\n    at Promise.then.completed (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"CacheManager Initialization should initialize with default configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should initialize with default configuration"},{"ancestorTitles":["CacheManager","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Initialization should initialize with custom configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with custom configuration"},{"ancestorTitles":["CacheManager","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Initialization should initialize Redis client and memory cache","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize Redis client and memory cache"},{"ancestorTitles":["CacheManager","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Initialization should handle Redis connection failure gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle Redis connection failure gracefully"},{"ancestorTitles":["CacheManager","Cache Operations","set"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations set should set value in memory cache","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should set value in memory cache"},{"ancestorTitles":["CacheManager","Cache Operations","set"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations set should set value in Redis cache","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should set value in Redis cache"},{"ancestorTitles":["CacheManager","Cache Operations","set"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations set should handle custom TTL","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle custom TTL"},{"ancestorTitles":["CacheManager","Cache Operations","set"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations set should emit set event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit set event"},{"ancestorTitles":["CacheManager","Cache Operations","set"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations set should handle Redis set failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle Redis set failure gracefully"},{"ancestorTitles":["CacheManager","Cache Operations","get"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations get should get value from memory cache","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get value from memory cache"},{"ancestorTitles":["CacheManager","Cache Operations","get"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations get should get value from Redis when not in memory","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get value from Redis when not in memory"},{"ancestorTitles":["CacheManager","Cache Operations","get"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations get should return null for non-existent key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for non-existent key"},{"ancestorTitles":["CacheManager","Cache Operations","get"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations get should handle expired memory cache entries","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle expired memory cache entries"},{"ancestorTitles":["CacheManager","Cache Operations","get"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations get should emit hit event for memory cache hit","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit hit event for memory cache hit"},{"ancestorTitles":["CacheManager","Cache Operations","get"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations get should emit hit event for Redis cache hit","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit hit event for Redis cache hit"},{"ancestorTitles":["CacheManager","Cache Operations","get"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations get should emit miss event for cache miss","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit miss event for cache miss"},{"ancestorTitles":["CacheManager","Cache Operations","get"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations get should handle Redis get failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle Redis get failure gracefully"},{"ancestorTitles":["CacheManager","Cache Operations","delete"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations delete should delete from both memory and Redis","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should delete from both memory and Redis"},{"ancestorTitles":["CacheManager","Cache Operations","delete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations delete should emit delete event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit delete event"},{"ancestorTitles":["CacheManager","Cache Operations","delete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations delete should handle Redis delete failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle Redis delete failure gracefully"},{"ancestorTitles":["CacheManager","Cache Operations","clear"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations clear should clear memory cache with pattern","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should clear memory cache with pattern"},{"ancestorTitles":["CacheManager","Cache Operations","clear"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations clear should clear Redis cache with pattern","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clear Redis cache with pattern"},{"ancestorTitles":["CacheManager","Cache Operations","clear"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Operations clear should clear all caches when no pattern provided","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should clear all caches when no pattern provided"},{"ancestorTitles":["CacheManager","Statistics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Statistics should track cache statistics","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should track cache statistics"},{"ancestorTitles":["CacheManager","Statistics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Statistics should calculate memory usage","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate memory usage"},{"ancestorTitles":["CacheManager","Health Check"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Health Check should return healthy status when connected","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return healthy status when connected"},{"ancestorTitles":["CacheManager","Health Check"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Health Check should return unhealthy status when Redis is disconnected","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return unhealthy status when Redis is disconnected"},{"ancestorTitles":["CacheManager","Health Check"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Health Check should handle Redis ping failure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle Redis ping failure"},{"ancestorTitles":["CacheManager","Cache Warming"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Warming should warm cache with provided data","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should warm cache with provided data"},{"ancestorTitles":["CacheManager","Cache Warming"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Cache Warming should handle warmup failures gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle warmup failures gracefully"},{"ancestorTitles":["CacheManager","Key Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Key Generation should generate keys with prefix","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate keys with prefix"},{"ancestorTitles":["CacheManager","Key Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Key Generation should generate keys with multiple parts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate keys with multiple parts"},{"ancestorTitles":["CacheManager","Key Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Key Generation should handle empty parts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty parts"},{"ancestorTitles":["CacheManager","Shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Shutdown should shutdown gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should shutdown gracefully"},{"ancestorTitles":["CacheManager","Shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CacheManager Shutdown should handle shutdown errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown errors gracefully"}],"endTime":1749171766417,"message":"  ● CacheManager › Initialization › should initialize with default configuration\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"localhost\"\n    Received: \"redis\"\n\n      89 |       const cache = new CacheManager();\n      90 |       expect(cache.config).toBeDefined();\n    > 91 |       expect(cache.config.redis.host).toBe('localhost');\n         |                                       ^\n      92 |       expect(cache.config.redis.port).toBe(6379);\n      93 |       expect(cache.config.ttl.default).toBe(3600);\n      94 |     });\n\n      at Object.toBe (tests/unit/cache/CacheManager.test.js:91:39)\n","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/cache/CacheManager.test.js","startTime":1749171766272,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["SourceHandlerFactory","Handler Registration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Registration should register all default handlers","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should register all default handlers"},{"ancestorTitles":["SourceHandlerFactory","Handler Registration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Registration should register custom handler","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register custom handler"},{"ancestorTitles":["SourceHandlerFactory","Handler Registration"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Registration should throw error when registering handler with existing type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when registering handler with existing type"},{"ancestorTitles":["SourceHandlerFactory","Handler Registration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Registration should allow overriding existing handler when force is true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow overriding existing handler when force is true"},{"ancestorTitles":["SourceHandlerFactory","Handler Creation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Creation should create StaticSourceHandler","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create StaticSourceHandler"},{"ancestorTitles":["SourceHandlerFactory","Handler Creation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Creation should create SemiStaticSourceHandler","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create SemiStaticSourceHandler"},{"ancestorTitles":["SourceHandlerFactory","Handler Creation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Creation should create DynamicConsistentSourceHandler","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create DynamicConsistentSourceHandler"},{"ancestorTitles":["SourceHandlerFactory","Handler Creation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Creation should create DynamicUnstructuredSourceHandler","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create DynamicUnstructuredSourceHandler"},{"ancestorTitles":["SourceHandlerFactory","Handler Creation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Creation should throw error for unsupported handler type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for unsupported handler type"},{"ancestorTitles":["SourceHandlerFactory","Handler Creation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Creation should throw error for invalid configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid configuration"},{"ancestorTitles":["SourceHandlerFactory","Handler Creation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Creation should throw error for configuration without type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for configuration without type"},{"ancestorTitles":["SourceHandlerFactory","Handler Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Validation should validate handler configuration before creation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate handler configuration before creation"},{"ancestorTitles":["SourceHandlerFactory","Handler Validation"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Validation should reject invalid handler configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject invalid handler configuration"},{"ancestorTitles":["SourceHandlerFactory","Handler Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Validation should handle validation for unsupported type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle validation for unsupported type"},{"ancestorTitles":["SourceHandlerFactory","Handler Introspection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Introspection should return list of registered handler types","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return list of registered handler types"},{"ancestorTitles":["SourceHandlerFactory","Handler Introspection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Introspection should check if handler type is supported","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should check if handler type is supported"},{"ancestorTitles":["SourceHandlerFactory","Handler Introspection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Introspection should return handler class for registered type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return handler class for registered type"},{"ancestorTitles":["SourceHandlerFactory","Handler Introspection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Introspection should return null for unregistered type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for unregistered type"},{"ancestorTitles":["SourceHandlerFactory","Batch Operations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Batch Operations should create multiple handlers from configurations","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should create multiple handlers from configurations"},{"ancestorTitles":["SourceHandlerFactory","Batch Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Batch Operations should handle errors in batch creation gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle errors in batch creation gracefully"},{"ancestorTitles":["SourceHandlerFactory","Batch Operations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Batch Operations should validate multiple configurations","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate multiple configurations"},{"ancestorTitles":["SourceHandlerFactory","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Error Handling should handle handler constructor errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle handler constructor errors"},{"ancestorTitles":["SourceHandlerFactory","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Error Handling should provide detailed error information","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should provide detailed error information"},{"ancestorTitles":["SourceHandlerFactory","Configuration Helpers"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Configuration Helpers should provide default configuration for handler type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should provide default configuration for handler type"},{"ancestorTitles":["SourceHandlerFactory","Configuration Helpers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Configuration Helpers should return null for unsupported type default config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null for unsupported type default config"},{"ancestorTitles":["SourceHandlerFactory","Configuration Helpers"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Configuration Helpers should merge user config with defaults","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should merge user config with defaults"},{"ancestorTitles":["SourceHandlerFactory","Handler Lifecycle"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Lifecycle should initialize handler after creation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize handler after creation"},{"ancestorTitles":["SourceHandlerFactory","Handler Lifecycle"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceHandlerFactory Handler Lifecycle should cleanup handler resources","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cleanup handler resources"}],"endTime":1749171766556,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/ingestion/handlers/SourceHandlerFactory.test.js","startTime":1749171766419,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SourceReliabilityService","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService constructor should initialize with required dependencies","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize with required dependencies"},{"ancestorTitles":["SourceReliabilityService","constructor"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService constructor should throw error if databaseManager is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if databaseManager is missing"},{"ancestorTitles":["SourceReliabilityService","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService constructor should throw error if auditService is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if auditService is missing"},{"ancestorTitles":["SourceReliabilityService","getDocumentQualityMetrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService getDocumentQualityMetrics should fetch document quality metrics successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fetch document quality metrics successfully"},{"ancestorTitles":["SourceReliabilityService","getDocumentQualityMetrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService getDocumentQualityMetrics should handle no documents case","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle no documents case"},{"ancestorTitles":["SourceReliabilityService","getDocumentQualityMetrics"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService getDocumentQualityMetrics should handle database errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database errors"},{"ancestorTitles":["SourceReliabilityService","getUserFeedbackMetrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService getUserFeedbackMetrics should fetch user feedback metrics successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fetch user feedback metrics successfully"},{"ancestorTitles":["SourceReliabilityService","getUserFeedbackMetrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService getUserFeedbackMetrics should handle no feedback case","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle no feedback case"},{"ancestorTitles":["SourceReliabilityService","getContentConsistencyMetrics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService getContentConsistencyMetrics should fetch content consistency metrics successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fetch content consistency metrics successfully"},{"ancestorTitles":["SourceReliabilityService","getErrorRateMetrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService getErrorRateMetrics should fetch error rate metrics successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fetch error rate metrics successfully"},{"ancestorTitles":["SourceReliabilityService","getHistoricalPerformanceMetrics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService getHistoricalPerformanceMetrics should fetch historical performance metrics successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should fetch historical performance metrics successfully"},{"ancestorTitles":["SourceReliabilityService","getHistoricalPerformanceMetrics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService getHistoricalPerformanceMetrics should handle insufficient data for trend calculation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle insufficient data for trend calculation"},{"ancestorTitles":["SourceReliabilityService","calculateLinearRegression"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService calculateLinearRegression should calculate trend correctly for increasing data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate trend correctly for increasing data"},{"ancestorTitles":["SourceReliabilityService","calculateLinearRegression"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService calculateLinearRegression should calculate trend correctly for decreasing data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate trend correctly for decreasing data"},{"ancestorTitles":["SourceReliabilityService","calculateLinearRegression"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService calculateLinearRegression should handle stable data","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle stable data"},{"ancestorTitles":["SourceReliabilityService","calculateLinearRegression"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService calculateLinearRegression should handle insufficient data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle insufficient data"},{"ancestorTitles":["SourceReliabilityService","calculateReliabilityScore"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService calculateReliabilityScore should calculate reliability score successfully","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should calculate reliability score successfully"},{"ancestorTitles":["SourceReliabilityService","calculateReliabilityScore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService calculateReliabilityScore should determine reliability level correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should determine reliability level correctly"},{"ancestorTitles":["SourceReliabilityService","calculateReliabilityScore"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService calculateReliabilityScore should handle sources with no data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle sources with no data"},{"ancestorTitles":["SourceReliabilityService","calculateReliabilityScore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService calculateReliabilityScore should store calculated score in database","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should store calculated score in database"},{"ancestorTitles":["SourceReliabilityService","calculateReliabilityScore"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService calculateReliabilityScore should log audit event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log audit event"},{"ancestorTitles":["SourceReliabilityService","getReliabilityScore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService getReliabilityScore should retrieve stored reliability score","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should retrieve stored reliability score"},{"ancestorTitles":["SourceReliabilityService","getReliabilityScore"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService getReliabilityScore should return null if no score found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if no score found"},{"ancestorTitles":["SourceReliabilityService","getAllReliabilityScores"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService getAllReliabilityScores should retrieve all reliability scores with pagination","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should retrieve all reliability scores with pagination"},{"ancestorTitles":["SourceReliabilityService","updateAllReliabilityScores"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService updateAllReliabilityScores should update scores for all active sources","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should update scores for all active sources"},{"ancestorTitles":["SourceReliabilityService","updateAllReliabilityScores"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService updateAllReliabilityScores should handle batch processing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle batch processing"},{"ancestorTitles":["SourceReliabilityService","updateAllReliabilityScores"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService updateAllReliabilityScores should handle individual calculation failures","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle individual calculation failures"},{"ancestorTitles":["SourceReliabilityService","determineReliabilityLevel"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService determineReliabilityLevel should classify high reliability correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify high reliability correctly"},{"ancestorTitles":["SourceReliabilityService","determineReliabilityLevel"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService determineReliabilityLevel should classify medium reliability correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify medium reliability correctly"},{"ancestorTitles":["SourceReliabilityService","determineReliabilityLevel"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService determineReliabilityLevel should classify low reliability correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should classify low reliability correctly"},{"ancestorTitles":["SourceReliabilityService","determineReliabilityLevel"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService determineReliabilityLevel should handle edge cases","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle edge cases"},{"ancestorTitles":["SourceReliabilityService","normalizeScore"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService normalizeScore should normalize scores correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should normalize scores correctly"},{"ancestorTitles":["SourceReliabilityService","normalizeScore"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SourceReliabilityService normalizeScore should handle edge cases","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle edge cases"}],"endTime":1749171766723,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/services/SourceReliabilityService.test.js","startTime":1749171766558,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DatabaseOptimizer","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer constructor should initialize with default options","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should initialize with default options"},{"ancestorTitles":["DatabaseOptimizer","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer constructor should initialize with custom options","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with custom options"},{"ancestorTitles":["DatabaseOptimizer","initialize"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer initialize should initialize successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["DatabaseOptimizer","initialize"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer initialize should throw error if database manager is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if database manager is missing"},{"ancestorTitles":["DatabaseOptimizer","initialize"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer initialize should create indexes during initialization","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create indexes during initialization"},{"ancestorTitles":["DatabaseOptimizer","createOptimizedIndexes"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer createOptimizedIndexes should create vector search indexes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create vector search indexes"},{"ancestorTitles":["DatabaseOptimizer","createOptimizedIndexes"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer createOptimizedIndexes should handle index creation errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle index creation errors gracefully"},{"ancestorTitles":["DatabaseOptimizer","optimizedVectorSearch"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer optimizedVectorSearch should perform vector search with caching","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should perform vector search with caching"},{"ancestorTitles":["DatabaseOptimizer","optimizedVectorSearch"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer optimizedVectorSearch should return cached results when available","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return cached results when available"},{"ancestorTitles":["DatabaseOptimizer","optimizedVectorSearch"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer optimizedVectorSearch should handle query errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle query errors"},{"ancestorTitles":["DatabaseOptimizer","optimizedKeywordSearch"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer optimizedKeywordSearch should perform keyword search with caching","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should perform keyword search with caching"},{"ancestorTitles":["DatabaseOptimizer","optimizedKeywordSearch"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer optimizedKeywordSearch should return cached results when available","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return cached results when available"},{"ancestorTitles":["DatabaseOptimizer","getQueryPerformanceMetrics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer getQueryPerformanceMetrics should return performance metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return performance metrics"},{"ancestorTitles":["DatabaseOptimizer","getQueryPerformanceMetrics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer getQueryPerformanceMetrics should track metrics after queries","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should track metrics after queries"},{"ancestorTitles":["DatabaseOptimizer","getCacheStats"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer getCacheStats should return cache statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return cache statistics"},{"ancestorTitles":["DatabaseOptimizer","clearCache"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer clearCache should clear the cache","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clear the cache"},{"ancestorTitles":["DatabaseOptimizer","getStatus"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer getStatus should return status when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return status when not initialized"},{"ancestorTitles":["DatabaseOptimizer","getStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer getStatus should return status when initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return status when initialized"},{"ancestorTitles":["DatabaseOptimizer","getStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer getStatus should indicate missing database manager","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should indicate missing database manager"},{"ancestorTitles":["DatabaseOptimizer","shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer shutdown should shutdown gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should shutdown gracefully"},{"ancestorTitles":["DatabaseOptimizer","shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer shutdown should handle shutdown when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown when not initialized"},{"ancestorTitles":["DatabaseOptimizer","cache key generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer cache key generation should generate consistent cache keys","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate consistent cache keys"},{"ancestorTitles":["DatabaseOptimizer","cache key generation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseOptimizer cache key generation should generate different keys for different parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate different keys for different parameters"}],"endTime":1749171766883,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/rag/performance/DatabaseOptimizer.test.js","startTime":1749171766725,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PermissionManager","initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager initialization should initialize successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["PermissionManager","initialization"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager initialization should handle initialization errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle initialization errors"},{"ancestorTitles":["PermissionManager","hasPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager hasPermission should return true when user has direct permission","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true when user has direct permission"},{"ancestorTitles":["PermissionManager","hasPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager hasPermission should return false when user has explicit denial","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when user has explicit denial"},{"ancestorTitles":["PermissionManager","hasPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager hasPermission should check role permissions when no direct permission exists","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should check role permissions when no direct permission exists"},{"ancestorTitles":["PermissionManager","hasPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager hasPermission should return false when no permissions found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when no permissions found"},{"ancestorTitles":["PermissionManager","hasPermission"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager hasPermission should use cache for repeated permission checks","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should use cache for repeated permission checks"},{"ancestorTitles":["PermissionManager","hasPermission"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager hasPermission should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["PermissionManager","hasPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager hasPermission should handle resource-specific permissions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle resource-specific permissions"},{"ancestorTitles":["PermissionManager","filterDocumentsByPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager filterDocumentsByPermission should return accessible documents","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return accessible documents"},{"ancestorTitles":["PermissionManager","filterDocumentsByPermission"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager filterDocumentsByPermission should return empty array for empty input","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array for empty input"},{"ancestorTitles":["PermissionManager","filterDocumentsByPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager filterDocumentsByPermission should return empty array for null input","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return empty array for null input"},{"ancestorTitles":["PermissionManager","filterDocumentsByPermission"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager filterDocumentsByPermission should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["PermissionManager","canAccessDocument"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager canAccessDocument should return true when user can access document","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when user can access document"},{"ancestorTitles":["PermissionManager","canAccessDocument"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager canAccessDocument should return false when user cannot access document","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when user cannot access document"},{"ancestorTitles":["PermissionManager","canAccessDocument"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager canAccessDocument should handle errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle errors gracefully"},{"ancestorTitles":["PermissionManager","logAccess"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager logAccess should log access successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log access successfully"},{"ancestorTitles":["PermissionManager","logAccess"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager logAccess should handle logging errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle logging errors gracefully"},{"ancestorTitles":["PermissionManager","logAccess"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager logAccess should handle missing metadata gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing metadata gracefully"},{"ancestorTitles":["PermissionManager","cache management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager cache management should clear user cache","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clear user cache"},{"ancestorTitles":["PermissionManager","cache management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager cache management should clear all cache","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should clear all cache"},{"ancestorTitles":["PermissionManager","cache management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager cache management should handle cache disabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cache disabled"},{"ancestorTitles":["PermissionManager","_getCacheKey"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager _getCacheKey should generate consistent cache keys","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate consistent cache keys"},{"ancestorTitles":["PermissionManager","_getCacheKey"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager _getCacheKey should handle null values in cache key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle null values in cache key"},{"ancestorTitles":["PermissionManager","error handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager error handling should always release database connections","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should always release database connections"},{"ancestorTitles":["PermissionManager","error handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PermissionManager error handling should handle connection errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle connection errors"}],"endTime":1749171767017,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/permissions/PermissionManager.test.js","startTime":1749171766885,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["QueueManager","Initialization"],"duration":3,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"ingestion-queue\", ObjectContaining {\"defaultJobOptions\": Any<Object>, \"redis\": ObjectContaining {\"socket\": {\"host\": \"localhost\", \"port\": 6379}}}\nReceived: \"ingestion-queue\", {\"defaultJobOptions\": {\"attempts\": 3, \"backoff\": {\"delay\": 2000, \"type\": \"exponential\"}, \"removeOnComplete\": 100, \"removeOnFail\": 50}, \"redis\": \"redis://localhost:6379\"}\n\nNumber of calls: 1","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"ingestion-queue\", ObjectContaining {\"defaultJobOptions\": Any<Object>, \"redis\": ObjectContaining {\"socket\": {\"host\": \"localhost\", \"port\": 6379}}}\nReceived: \"ingestion-queue\", {\"defaultJobOptions\": {\"attempts\": 3, \"backoff\": {\"delay\": 2000, \"type\": \"exponential\"}, \"removeOnComplete\": 100, \"removeOnFail\": 50}, \"redis\": \"redis://localhost:6379\"}\n\nNumber of calls: 1\n    at Object.toHaveBeenCalledWith (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/ingestion/queue/QueueManager.test.js:70:20)"],"fullName":"QueueManager Initialization should initialize successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"failed","title":"should initialize successfully"},{"ancestorTitles":["QueueManager","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Initialization should emit initialized event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit initialized event"},{"ancestorTitles":["QueueManager","Initialization"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Initialization should handle initialization errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle initialization errors"},{"ancestorTitles":["QueueManager","Job Management"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Job Management should add ingestion job successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should add ingestion job successfully"},{"ancestorTitles":["QueueManager","Job Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Job Management should add job with custom options","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should add job with custom options"},{"ancestorTitles":["QueueManager","Job Management"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Job Management should emit job-added event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit job-added event"},{"ancestorTitles":["QueueManager","Job Management"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Job Management should fail to add job when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fail to add job when not initialized"},{"ancestorTitles":["QueueManager","Job Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Job Processing should start processing with processor function","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should start processing with processor function"},{"ancestorTitles":["QueueManager","Job Processing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Job Processing should emit processing-started event","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit processing-started event"},{"ancestorTitles":["QueueManager","Job Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Job Processing should handle job processing with processor wrapper","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle job processing with processor wrapper"},{"ancestorTitles":["QueueManager","Job Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Job Processing should handle job processing errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle job processing errors"},{"ancestorTitles":["QueueManager","Statistics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Statistics should return queue statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return queue statistics"},{"ancestorTitles":["QueueManager","Statistics"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Statistics should return basic stats when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return basic stats when not initialized"},{"ancestorTitles":["QueueManager","Job Operations"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Job Operations should get job by ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get job by ID"},{"ancestorTitles":["QueueManager","Job Operations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Job Operations should remove job by ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should remove job by ID"},{"ancestorTitles":["QueueManager","Job Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Job Operations should return false when removing non-existent job","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when removing non-existent job"},{"ancestorTitles":["QueueManager","Job Operations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Job Operations should retry job by ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should retry job by ID"},{"ancestorTitles":["QueueManager","Queue Control"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Queue Control should pause queue","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should pause queue"},{"ancestorTitles":["QueueManager","Queue Control"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Queue Control should resume queue","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should resume queue"},{"ancestorTitles":["QueueManager","Queue Control"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Queue Control should clean queue","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should clean queue"},{"ancestorTitles":["QueueManager","Shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Shutdown should shutdown successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should shutdown successfully"},{"ancestorTitles":["QueueManager","Shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Shutdown should handle shutdown when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown when not initialized"},{"ancestorTitles":["QueueManager","Shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Shutdown should handle shutdown errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown errors"},{"ancestorTitles":["QueueManager","Event Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Event Handling should set up queue event listeners","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should set up queue event listeners"},{"ancestorTitles":["QueueManager","Event Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueueManager Event Handling should emit job events from queue events","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should emit job events from queue events"}],"endTime":1749171767182,"message":"  ● QueueManager › Initialization › should initialize successfully\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: \"ingestion-queue\", ObjectContaining {\"defaultJobOptions\": Any<Object>, \"redis\": ObjectContaining {\"socket\": {\"host\": \"localhost\", \"port\": 6379}}}\n    Received: \"ingestion-queue\", {\"defaultJobOptions\": {\"attempts\": 3, \"backoff\": {\"delay\": 2000, \"type\": \"exponential\"}, \"removeOnComplete\": 100, \"removeOnFail\": 50}, \"redis\": \"redis://localhost:6379\"}\n\n    Number of calls: 1\n\n      68 |       });\n      69 |       expect(mockRedisClient.connect).toHaveBeenCalled();\n    > 70 |       expect(Bull).toHaveBeenCalledWith('ingestion-queue', expect.objectContaining({\n         |                    ^\n      71 |         redis: expect.objectContaining({\n      72 |           socket: {\n      73 |             host: 'localhost',\n\n      at Object.toHaveBeenCalledWith (tests/unit/ingestion/queue/QueueManager.test.js:70:20)\n","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/ingestion/queue/QueueManager.test.js","startTime":1749171767019,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["JobDAO","create"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO create should create a job successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create a job successfully"},{"ancestorTitles":["JobDAO","create"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO create should use default values","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default values"},{"ancestorTitles":["JobDAO","create"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO create should handle creation errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle creation errors"},{"ancestorTitles":["JobDAO","findById"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO findById should find job by ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find job by ID"},{"ancestorTitles":["JobDAO","findById"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO findById should return null when job not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when job not found"},{"ancestorTitles":["JobDAO","findById"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO findById should handle query errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle query errors"},{"ancestorTitles":["JobDAO","updateStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO updateStatus should update job status successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update job status successfully"},{"ancestorTitles":["JobDAO","updateStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO updateStatus should add started_at when status is running","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should add started_at when status is running"},{"ancestorTitles":["JobDAO","updateStatus"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO updateStatus should add completed_at when status is completed","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should add completed_at when status is completed"},{"ancestorTitles":["JobDAO","updateStatus"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO updateStatus should throw error when job not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when job not found"},{"ancestorTitles":["JobDAO","findByStatus"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO findByStatus should find jobs by status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find jobs by status"},{"ancestorTitles":["JobDAO","findByStatus"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO findByStatus should filter by type when provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by type when provided"},{"ancestorTitles":["JobDAO","getNextPending"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO getNextPending should get next pending job without dependencies","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get next pending job without dependencies"},{"ancestorTitles":["JobDAO","getNextPending"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO getNextPending should filter by type when provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by type when provided"},{"ancestorTitles":["JobDAO","getNextPending"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO getNextPending should return null when no pending jobs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when no pending jobs"},{"ancestorTitles":["JobDAO","addDependency"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO addDependency should add job dependency successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should add job dependency successfully"},{"ancestorTitles":["JobDAO","addDependency"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO addDependency should handle dependency creation errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle dependency creation errors"},{"ancestorTitles":["JobDAO","addLog"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO addLog should add job log entry","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should add job log entry"},{"ancestorTitles":["JobDAO","addLog"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO addLog should handle empty metadata","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty metadata"},{"ancestorTitles":["JobDAO","getLogs"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO getLogs should get job logs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get job logs"},{"ancestorTitles":["JobDAO","getLogs"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO getLogs should filter by level when provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by level when provided"},{"ancestorTitles":["JobDAO","cancel"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO cancel should cancel job successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should cancel job successfully"},{"ancestorTitles":["JobDAO","retry"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO retry should retry failed job successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should retry failed job successfully"},{"ancestorTitles":["JobDAO","retry"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO retry should throw error when job not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when job not found"},{"ancestorTitles":["JobDAO","retry"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO retry should throw error when job is not failed","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when job is not failed"},{"ancestorTitles":["JobDAO","getStats"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO getStats should return job statistics","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return job statistics"},{"ancestorTitles":["JobDAO","cleanup"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO cleanup should cleanup old jobs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cleanup old jobs"},{"ancestorTitles":["JobDAO","cleanup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO cleanup should use default retention period","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default retention period"},{"ancestorTitles":["JobDAO","getQueueStatus"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"JobDAO getQueueStatus should return queue status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return queue status"}],"endTime":1749171767355,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/JobDAO.test.js","startTime":1749171767183,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ParallelSearchManager","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager constructor should initialize with default options","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize with default options"},{"ancestorTitles":["ParallelSearchManager","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager constructor should initialize with custom options","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with custom options"},{"ancestorTitles":["ParallelSearchManager","initialize"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager initialize should initialize successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["ParallelSearchManager","initialize"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager initialize should throw error if document retriever is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if document retriever is missing"},{"ancestorTitles":["ParallelSearchManager","performParallelSearch"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager performParallelSearch should throw error if not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error if not initialized"},{"ancestorTitles":["ParallelSearchManager","performParallelSearch"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager performParallelSearch should throw error for invalid query","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for invalid query"},{"ancestorTitles":["ParallelSearchManager","performParallelSearch"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager performParallelSearch should throw error for missing user auth","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw error for missing user auth"},{"ancestorTitles":["ParallelSearchManager","performParallelSearch"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager performParallelSearch should perform parallel search successfully","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should perform parallel search successfully"},{"ancestorTitles":["ParallelSearchManager","performParallelSearch"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager performParallelSearch should handle embedding generation failure gracefully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle embedding generation failure gracefully"},{"ancestorTitles":["ParallelSearchManager","performParallelSearch"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager performParallelSearch should handle vector search failure gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle vector search failure gracefully"},{"ancestorTitles":["ParallelSearchManager","performParallelSearch"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager performParallelSearch should respect custom limit from filters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should respect custom limit from filters"},{"ancestorTitles":["ParallelSearchManager","performParallelSearch"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager performParallelSearch should handle timeout during parallel search","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle timeout during parallel search"},{"ancestorTitles":["ParallelSearchManager","performParallelSearch"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager performParallelSearch should handle embedding generation timeout","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle embedding generation timeout"},{"ancestorTitles":["ParallelSearchManager","performParallelSearch"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager performParallelSearch should handle vector search timeout","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle vector search timeout"},{"ancestorTitles":["ParallelSearchManager","calculateParallelEfficiency"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager calculateParallelEfficiency should calculate efficiency correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate efficiency correctly"},{"ancestorTitles":["ParallelSearchManager","calculateParallelEfficiency"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager calculateParallelEfficiency should handle zero results","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle zero results"},{"ancestorTitles":["ParallelSearchManager","getPerformanceStats"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager getPerformanceStats should return performance statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return performance statistics"},{"ancestorTitles":["ParallelSearchManager","getStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager getStatus should return status information","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return status information"},{"ancestorTitles":["ParallelSearchManager","getStatus"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"ParallelSearchManager getStatus should indicate missing document retriever","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should indicate missing document retriever"}],"endTime":1749171767533,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/rag/performance/ParallelSearchManager.test.js","startTime":1749171767357,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CostDAO","Initialization"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Initialization should initialize database connection","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize database connection"},{"ancestorTitles":["CostDAO","Initialization"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Initialization should handle initialization failure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle initialization failure"},{"ancestorTitles":["CostDAO","Cost Event Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Cost Event Operations should save cost event successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should save cost event successfully"},{"ancestorTitles":["CostDAO","Cost Event Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Cost Event Operations should get cost events with date range","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get cost events with date range"},{"ancestorTitles":["CostDAO","Cost Event Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Cost Event Operations should get cost events with filters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get cost events with filters"},{"ancestorTitles":["CostDAO","Cost Event Operations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Cost Event Operations should get cost summary","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should get cost summary"},{"ancestorTitles":["CostDAO","Budget Operations"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Budget Operations should get active budgets","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should get active budgets"},{"ancestorTitles":["CostDAO","Budget Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Budget Operations should get budget spending","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get budget spending"},{"ancestorTitles":["CostDAO","Alert Operations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Alert Operations should save cost alert successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should save cost alert successfully"},{"ancestorTitles":["CostDAO","Report Operations"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Report Operations should save cost report successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should save cost report successfully"},{"ancestorTitles":["CostDAO","Data Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Data Management should cleanup old events","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cleanup old events"},{"ancestorTitles":["CostDAO","Data Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Data Management should close database connection","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should close database connection"},{"ancestorTitles":["CostDAO","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Error Handling should handle connection errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle connection errors gracefully"},{"ancestorTitles":["CostDAO","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostDAO Error Handling should handle query errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle query errors gracefully"}],"endTime":1749171767672,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/monitoring/CostDAO.test.js","startTime":1749171767535,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["MigrationManager","initializeMigrationTable"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager initializeMigrationTable should create migration tracking table","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create migration tracking table"},{"ancestorTitles":["MigrationManager","getAvailableMigrations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager getAvailableMigrations should return sorted list of migration files","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return sorted list of migration files"},{"ancestorTitles":["MigrationManager","getAvailableMigrations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager getAvailableMigrations should return empty array when migrations directory does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array when migrations directory does not exist"},{"ancestorTitles":["MigrationManager","getAvailableMigrations"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager getAvailableMigrations should throw error for other filesystem errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for other filesystem errors"},{"ancestorTitles":["MigrationManager","getAppliedMigrations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager getAppliedMigrations should return list of applied migrations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return list of applied migrations"},{"ancestorTitles":["MigrationManager","getPendingMigrations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager getPendingMigrations should return migrations not yet applied","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return migrations not yet applied"},{"ancestorTitles":["MigrationManager","calculateChecksum"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager calculateChecksum should calculate SHA256 checksum of content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should calculate SHA256 checksum of content"},{"ancestorTitles":["MigrationManager","parseMigrationFile"],"duration":1,"failureDetails":[{}],"failureMessages":["TypeError: migrationManager.parseMigrationFile is not a function\n    at Object.parseMigrationFile (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/MigrationManager.test.js:145:39)\n    at Promise.then.completed (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"MigrationManager parseMigrationFile should parse migration file into forward and rollback scripts","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should parse migration file into forward and rollback scripts"},{"ancestorTitles":["MigrationManager","parseMigrationFile"],"duration":0,"failureDetails":[{}],"failureMessages":["TypeError: migrationManager.parseMigrationFile is not a function\n    at Object.parseMigrationFile (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/MigrationManager.test.js:154:39)\n    at Promise.then.completed (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"MigrationManager parseMigrationFile should handle migration with no rollback section","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle migration with no rollback section"},{"ancestorTitles":["MigrationManager","applyMigration"],"duration":5,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"CREATE TABLE test (id INTEGER);\"\nReceived\n       1: \"BEGIN\"\n       2: \"INSERT INTO schema_migrations (version, name, rollback_script, checksum)·\n                   VALUES ($1, $2, $3, $4)\", [{\"filename\": \"0001_test_migration.sql\", \"name\": \"test_migration\", \"version\": \"0001\"}, undefined, \"\", \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"]\n       3: \"COMMIT\"\n\nNumber of calls: 4","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: \"CREATE TABLE test (id INTEGER);\"\nReceived\n       1: \"BEGIN\"\n       2: \"INSERT INTO schema_migrations (version, name, rollback_script, checksum)·\n                   VALUES ($1, $2, $3, $4)\", [{\"filename\": \"0001_test_migration.sql\", \"name\": \"test_migration\", \"version\": \"0001\"}, undefined, \"\", \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"]\n       3: \"COMMIT\"\n\nNumber of calls: 4\n    at Object.toHaveBeenCalledWith (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/MigrationManager.test.js:180:32)"],"fullName":"MigrationManager applyMigration should apply migration successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should apply migration successfully"},{"ancestorTitles":["MigrationManager","applyMigration"],"duration":1,"failureDetails":[{"message":"expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: undefined"}],"failureMessages":["Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: undefined\n    at expect (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/expect/build/index.js:113:15)\n    at Object.expect (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/MigrationManager.test.js:203:13)\n    at Promise.then.completed (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"MigrationManager applyMigration should rollback transaction on error","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should rollback transaction on error"},{"ancestorTitles":["MigrationManager","rollbackMigration"],"duration":0,"failureDetails":[{}],"failureMessages":["Error: Empty rollback script provided for migration 0001 (undefined)\n    at MigrationManager.rollbackMigration (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/src/database/MigrationManager.js:227:13)\n    at Object.rollbackMigration (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/MigrationManager.test.js:222:30)\n    at Promise.then.completed (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"MigrationManager rollbackMigration should rollback migration successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should rollback migration successfully"},{"ancestorTitles":["MigrationManager","rollbackMigration"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected substring: \"Migration 0001 not found in applied migrations\"\nReceived message:   \"Empty rollback script provided for migration 0001 (undefined)\"\n\n      225 |   async rollbackMigration(version, name, rollbackScriptContent) {\n      226 |     if (!rollbackScriptContent || rollbackScriptContent.trim() === '') {\n    > 227 |       throw new Error(`Empty rollback script provided for migration ${version} (${name})`);\n          |             ^\n      228 |     }\n      229 |\n      230 |     const client = await this.db.getClient();\n\n      at MigrationManager.rollbackMigration (src/database/MigrationManager.js:227:13)\n      at Object.rollbackMigration (tests/unit/database/MigrationManager.test.js:236:37)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected substring: \"Migration 0001 not found in applied migrations\"\nReceived message:   \"Empty rollback script provided for migration 0001 (undefined)\"\n\n      225 |   async rollbackMigration(version, name, rollbackScriptContent) {\n      226 |     if (!rollbackScriptContent || rollbackScriptContent.trim() === '') {\n    > 227 |       throw new Error(`Empty rollback script provided for migration ${version} (${name})`);\n          |             ^\n      228 |     }\n      229 |\n      230 |     const client = await this.db.getClient();\n\n      at MigrationManager.rollbackMigration (src/database/MigrationManager.js:227:13)\n      at Object.rollbackMigration (tests/unit/database/MigrationManager.test.js:236:37)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected substring: \"Migration 0001 not found in applied migrations\"\nReceived message:   \"Empty rollback script provided for migration 0001 (undefined)\"\n\n      225 |   async rollbackMigration(version, name, rollbackScriptContent) {\n      226 |     if (!rollbackScriptContent || rollbackScriptContent.trim() === '') {\n    > 227 |       throw new Error(`Empty rollback script provided for migration ${version} (${name})`);\n          |             ^\n      228 |     }\n      229 |\n      230 |     const client = await this.db.getClient();\n\n      at MigrationManager.rollbackMigration (src/database/MigrationManager.js:227:13)\n      at Object.rollbackMigration (tests/unit/database/MigrationManager.test.js:236:37)\n    at Object.toThrow (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/expect/build/index.js:218:22)\n    at Object.toThrow (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/MigrationManager.test.js:236:72)\n    at Promise.then.completed (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"MigrationManager rollbackMigration should throw error if migration not found","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if migration not found"},{"ancestorTitles":["MigrationManager","rollbackMigration"],"duration":1,"failureDetails":[{"matcherResult":{"message":"expect(received).rejects.toThrow(expected)\n\nExpected substring: \"Empty rollback script for migration 0001\"\nReceived message:   \"Empty rollback script provided for migration 0001 (undefined)\"\n\n      225 |   async rollbackMigration(version, name, rollbackScriptContent) {\n      226 |     if (!rollbackScriptContent || rollbackScriptContent.trim() === '') {\n    > 227 |       throw new Error(`Empty rollback script provided for migration ${version} (${name})`);\n          |             ^\n      228 |     }\n      229 |\n      230 |     const client = await this.db.getClient();\n\n      at MigrationManager.rollbackMigration (src/database/MigrationManager.js:227:13)\n      at Object.rollbackMigration (tests/unit/database/MigrationManager.test.js:251:37)","pass":false},"message":"expect(received).rejects.toThrow(expected)\n\nExpected substring: \"Empty rollback script for migration 0001\"\nReceived message:   \"Empty rollback script provided for migration 0001 (undefined)\"\n\n      225 |   async rollbackMigration(version, name, rollbackScriptContent) {\n      226 |     if (!rollbackScriptContent || rollbackScriptContent.trim() === '') {\n    > 227 |       throw new Error(`Empty rollback script provided for migration ${version} (${name})`);\n          |             ^\n      228 |     }\n      229 |\n      230 |     const client = await this.db.getClient();\n\n      at MigrationManager.rollbackMigration (src/database/MigrationManager.js:227:13)\n      at Object.rollbackMigration (tests/unit/database/MigrationManager.test.js:251:37)"}],"failureMessages":["Error: expect(received).rejects.toThrow(expected)\n\nExpected substring: \"Empty rollback script for migration 0001\"\nReceived message:   \"Empty rollback script provided for migration 0001 (undefined)\"\n\n      225 |   async rollbackMigration(version, name, rollbackScriptContent) {\n      226 |     if (!rollbackScriptContent || rollbackScriptContent.trim() === '') {\n    > 227 |       throw new Error(`Empty rollback script provided for migration ${version} (${name})`);\n          |             ^\n      228 |     }\n      229 |\n      230 |     const client = await this.db.getClient();\n\n      at MigrationManager.rollbackMigration (src/database/MigrationManager.js:227:13)\n      at Object.rollbackMigration (tests/unit/database/MigrationManager.test.js:251:37)\n    at Object.toThrow (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/expect/build/index.js:218:22)\n    at Object.toThrow (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/MigrationManager.test.js:251:72)\n    at Promise.then.completed (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"MigrationManager rollbackMigration should throw error if rollback script is empty","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error if rollback script is empty"},{"ancestorTitles":["MigrationManager","migrate"],"duration":403,"failureDetails":[{"matcherResult":{"message":"expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: {\"filename\": \"0001_migration1.sql\", \"name\": \"migration1\", \"version\": \"0001\"}\nReceived\n       1: \"0001\", \"migration1\", \"CREATE TABLE test (id INTEGER);\"\n       2: \"0002\", \"migration2\", \"CREATE TABLE test (id INTEGER);\"\n\nNumber of calls: 2","pass":false}}],"failureMessages":["Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: {\"filename\": \"0001_migration1.sql\", \"name\": \"migration1\", \"version\": \"0001\"}\nReceived\n       1: \"0001\", \"migration1\", \"CREATE TABLE test (id INTEGER);\"\n       2: \"0002\", \"migration2\", \"CREATE TABLE test (id INTEGER);\"\n\nNumber of calls: 2\n    at Object.toHaveBeenCalledWith (/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/MigrationManager.test.js:270:47)"],"fullName":"MigrationManager migrate should apply all pending migrations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should apply all pending migrations"},{"ancestorTitles":["MigrationManager","migrate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager migrate should do nothing if no pending migrations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should do nothing if no pending migrations"},{"ancestorTitles":["MigrationManager","getStatus"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager getStatus should return migration status summary","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return migration status summary"},{"ancestorTitles":["MigrationManager","validateMigrations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager validateMigrations should detect checksum mismatches","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect checksum mismatches"},{"ancestorTitles":["MigrationManager","validateMigrations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager validateMigrations should detect missing migration files","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should detect missing migration files"},{"ancestorTitles":["MigrationManager","createMigration"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager createMigration should create new migration file with incremented version","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create new migration file with incremented version"},{"ancestorTitles":["MigrationManager","createMigration"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"MigrationManager createMigration should start with version 0001 if no migrations exist","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should start with version 0001 if no migrations exist"}],"endTime":1749171768222,"message":"  ● MigrationManager › parseMigrationFile › should parse migration file into forward and rollback scripts\n\n    TypeError: migrationManager.parseMigrationFile is not a function\n\n      143 | DROP TABLE test;`;\n      144 |\n    > 145 |       const result = migrationManager.parseMigrationFile(content);\n          |                                       ^\n      146 |\n      147 |       expect(result.forward).toContain('CREATE TABLE test');\n      148 |       expect(result.rollback).toContain('DROP TABLE test');\n\n      at Object.parseMigrationFile (tests/unit/database/MigrationManager.test.js:145:39)\n\n  ● MigrationManager › parseMigrationFile › should handle migration with no rollback section\n\n    TypeError: migrationManager.parseMigrationFile is not a function\n\n      152 |       const content = 'CREATE TABLE test (id INTEGER);';\n      153 |\n    > 154 |       const result = migrationManager.parseMigrationFile(content);\n          |                                       ^\n      155 |\n      156 |       expect(result.forward).toContain('CREATE TABLE test');\n      157 |       expect(result.rollback).toBe('');\n\n      at Object.parseMigrationFile (tests/unit/database/MigrationManager.test.js:154:39)\n\n  ● MigrationManager › applyMigration › should apply migration successfully\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: \"CREATE TABLE test (id INTEGER);\"\n    Received\n           1: \"BEGIN\"\n           2: \"INSERT INTO schema_migrations (version, name, rollback_script, checksum)·\n                       VALUES ($1, $2, $3, $4)\", [{\"filename\": \"0001_test_migration.sql\", \"name\": \"test_migration\", \"version\": \"0001\"}, undefined, \"\", \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"]\n           3: \"COMMIT\"\n\n    Number of calls: 4\n\n      178 |\n      179 |       expect(mockClient.query).toHaveBeenCalledWith('BEGIN');\n    > 180 |       expect(mockClient.query).toHaveBeenCalledWith('CREATE TABLE test (id INTEGER);');\n          |                                ^\n      181 |       expect(mockClient.query).toHaveBeenCalledWith(\n      182 |         expect.stringContaining('INSERT INTO schema_migrations'),\n      183 |         expect.arrayContaining(['0001', 'test_migration'])\n\n      at Object.toHaveBeenCalledWith (tests/unit/database/MigrationManager.test.js:180:32)\n\n  ● MigrationManager › applyMigration › should rollback transaction on error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      201 |       });\n      202 |\n    > 203 |       await expect(migrationManager.applyMigration(migration)).rejects.toThrow('Failed to apply migration');\n          |             ^\n      204 |\n      205 |       expect(mockClient.query).toHaveBeenCalledWith('ROLLBACK');\n      206 |       expect(mockClient.release).toHaveBeenCalled();\n\n      at expect (node_modules/expect/build/index.js:113:15)\n      at Object.expect (tests/unit/database/MigrationManager.test.js:203:13)\n\n  ● MigrationManager › rollbackMigration › should rollback migration successfully\n\n    Empty rollback script provided for migration 0001 (undefined)\n\n      225 |   async rollbackMigration(version, name, rollbackScriptContent) {\n      226 |     if (!rollbackScriptContent || rollbackScriptContent.trim() === '') {\n    > 227 |       throw new Error(`Empty rollback script provided for migration ${version} (${name})`);\n          |             ^\n      228 |     }\n      229 |\n      230 |     const client = await this.db.getClient();\n\n      at MigrationManager.rollbackMigration (src/database/MigrationManager.js:227:13)\n      at Object.rollbackMigration (tests/unit/database/MigrationManager.test.js:222:30)\n\n  ● MigrationManager › rollbackMigration › should throw error if migration not found\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected substring: \"Migration 0001 not found in applied migrations\"\n    Received message:   \"Empty rollback script provided for migration 0001 (undefined)\"\n\n          225 |   async rollbackMigration(version, name, rollbackScriptContent) {\n          226 |     if (!rollbackScriptContent || rollbackScriptContent.trim() === '') {\n        > 227 |       throw new Error(`Empty rollback script provided for migration ${version} (${name})`);\n              |             ^\n          228 |     }\n          229 |\n          230 |     const client = await this.db.getClient();\n\n      at MigrationManager.rollbackMigration (src/database/MigrationManager.js:227:13)\n      at Object.rollbackMigration (tests/unit/database/MigrationManager.test.js:236:37)\n      at Object.toThrow (node_modules/expect/build/index.js:218:22)\n      at Object.toThrow (tests/unit/database/MigrationManager.test.js:236:72)\n\n  ● MigrationManager › rollbackMigration › should throw error if rollback script is empty\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected substring: \"Empty rollback script for migration 0001\"\n    Received message:   \"Empty rollback script provided for migration 0001 (undefined)\"\n\n          225 |   async rollbackMigration(version, name, rollbackScriptContent) {\n          226 |     if (!rollbackScriptContent || rollbackScriptContent.trim() === '') {\n        > 227 |       throw new Error(`Empty rollback script provided for migration ${version} (${name})`);\n              |             ^\n          228 |     }\n          229 |\n          230 |     const client = await this.db.getClient();\n\n      at MigrationManager.rollbackMigration (src/database/MigrationManager.js:227:13)\n      at Object.rollbackMigration (tests/unit/database/MigrationManager.test.js:251:37)\n      at Object.toThrow (node_modules/expect/build/index.js:218:22)\n      at Object.toThrow (tests/unit/database/MigrationManager.test.js:251:72)\n\n  ● MigrationManager › migrate › should apply all pending migrations\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: {\"filename\": \"0001_migration1.sql\", \"name\": \"migration1\", \"version\": \"0001\"}\n    Received\n           1: \"0001\", \"migration1\", \"CREATE TABLE test (id INTEGER);\"\n           2: \"0002\", \"migration2\", \"CREATE TABLE test (id INTEGER);\"\n\n    Number of calls: 2\n\n      268 |\n      269 |       expect(migrationManager.applyMigration).toHaveBeenCalledTimes(2);\n    > 270 |       expect(migrationManager.applyMigration).toHaveBeenCalledWith(pendingMigrations[0]);\n          |                                               ^\n      271 |       expect(migrationManager.applyMigration).toHaveBeenCalledWith(pendingMigrations[1]);\n      272 |     });\n      273 |\n\n      at Object.toHaveBeenCalledWith (tests/unit/database/MigrationManager.test.js:270:47)\n","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/MigrationManager.test.js","startTime":1749171767673,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["QualityDAO","saveQualityReport"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO saveQualityReport should save quality report successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should save quality report successfully"},{"ancestorTitles":["QualityDAO","saveQualityReport"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO saveQualityReport should handle database error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database error"},{"ancestorTitles":["QualityDAO","getQualityReports"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO getQualityReports should retrieve quality reports with default parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should retrieve quality reports with default parameters"},{"ancestorTitles":["QualityDAO","getQualityReports"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO getQualityReports should filter by window period","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by window period"},{"ancestorTitles":["QualityDAO","getQualityReports"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO getQualityReports should handle pagination","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle pagination"},{"ancestorTitles":["QualityDAO","saveSLOViolation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO saveSLOViolation should save SLO violation successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should save SLO violation successfully"},{"ancestorTitles":["QualityDAO","saveSLOViolation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO saveSLOViolation should handle missing optional fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing optional fields"},{"ancestorTitles":["QualityDAO","getSLOViolations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO getSLOViolations should retrieve SLO violations with default parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should retrieve SLO violations with default parameters"},{"ancestorTitles":["QualityDAO","getSLOViolations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO getSLOViolations should filter by SLO ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by SLO ID"},{"ancestorTitles":["QualityDAO","getSLOViolations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO getSLOViolations should filter by compliance status","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by compliance status"},{"ancestorTitles":["QualityDAO","getSLOViolations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO getSLOViolations should filter by time range","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by time range"},{"ancestorTitles":["QualityDAO","saveMetricDataPoint"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO saveMetricDataPoint should save metric data point successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should save metric data point successfully"},{"ancestorTitles":["QualityDAO","saveMetricDataPoint"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO saveMetricDataPoint should handle missing labels","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing labels"},{"ancestorTitles":["QualityDAO","saveMetricDataPoint"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO saveMetricDataPoint should handle missing optional fields","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing optional fields"},{"ancestorTitles":["QualityDAO","getMetricDataPoints"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO getMetricDataPoints should retrieve metric data points with default parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should retrieve metric data points with default parameters"},{"ancestorTitles":["QualityDAO","getMetricDataPoints"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO getMetricDataPoints should filter by metric type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by metric type"},{"ancestorTitles":["QualityDAO","getMetricDataPoints"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO getMetricDataPoints should filter by time range","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by time range"},{"ancestorTitles":["QualityDAO","getMetricDataPoints"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO getMetricDataPoints should filter by labels","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should filter by labels"},{"ancestorTitles":["QualityDAO","cleanupOldData"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO cleanupOldData should cleanup old quality reports","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should cleanup old quality reports"},{"ancestorTitles":["QualityDAO","cleanupOldData"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO cleanupOldData should use default retention period","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default retention period"},{"ancestorTitles":["QualityDAO","cleanupOldData"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO cleanupOldData should handle cleanup errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cleanup errors gracefully"},{"ancestorTitles":["QualityDAO","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO Error Handling should handle JSON parsing errors in getQualityReports","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle JSON parsing errors in getQualityReports"},{"ancestorTitles":["QualityDAO","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityDAO Error Handling should handle JSON parsing errors in getSLOViolations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle JSON parsing errors in getSLOViolations"}],"endTime":1749171768357,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/monitoring/QualityDAO.test.js","startTime":1749171768224,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["QueryCache","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Initialization should initialize with default TTL configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with default TTL configuration"},{"ancestorTitles":["QueryCache","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Initialization should initialize with custom TTL configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with custom TTL configuration"},{"ancestorTitles":["QueryCache","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Initialization should initialize query statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize query statistics"},{"ancestorTitles":["QueryCache","Cache Key Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Cache Key Generation should generate query key with basic parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate query key with basic parameters"},{"ancestorTitles":["QueryCache","Cache Key Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Cache Key Generation should generate consistent keys for same query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate consistent keys for same query"},{"ancestorTitles":["QueryCache","Cache Key Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Cache Key Generation should generate different keys for different queries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate different keys for different queries"},{"ancestorTitles":["QueryCache","Cache Key Generation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Cache Key Generation should generate different keys for different options","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate different keys for different options"},{"ancestorTitles":["QueryCache","Cache Key Generation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Cache Key Generation should normalize query options for consistent keys","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should normalize query options for consistent keys"},{"ancestorTitles":["QueryCache","Query Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Query Caching should cache query results","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cache query results"},{"ancestorTitles":["QueryCache","Query Caching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Query Caching should get cached query results","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get cached query results"},{"ancestorTitles":["QueryCache","Query Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Query Caching should return null for cache miss","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null for cache miss"},{"ancestorTitles":["QueryCache","Query Caching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Query Caching should update query statistics on cache hit","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update query statistics on cache hit"},{"ancestorTitles":["QueryCache","Query Caching"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Query Caching should update query statistics on cache miss","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should update query statistics on cache miss"},{"ancestorTitles":["QueryCache","Search Results Caching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Search Results Caching should cache search results","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cache search results"},{"ancestorTitles":["QueryCache","Search Results Caching"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Search Results Caching should get cached search results","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get cached search results"},{"ancestorTitles":["QueryCache","TTL Determination"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache TTL Determination should return default TTL for simple queries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return default TTL for simple queries"},{"ancestorTitles":["QueryCache","TTL Determination"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache TTL Determination should return longer TTL for complex queries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return longer TTL for complex queries"},{"ancestorTitles":["QueryCache","TTL Determination"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache TTL Determination should return shorter TTL for real-time queries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return shorter TTL for real-time queries"},{"ancestorTitles":["QueryCache","TTL Determination"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache TTL Determination should respect suggested TTL","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should respect suggested TTL"},{"ancestorTitles":["QueryCache","TTL Determination"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache TTL Determination should use search results TTL for search queries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use search results TTL for search queries"},{"ancestorTitles":["QueryCache","Cache Invalidation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Cache Invalidation should invalidate queries by pattern","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should invalidate queries by pattern"},{"ancestorTitles":["QueryCache","Cache Invalidation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Cache Invalidation should invalidate queries by source","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should invalidate queries by source"},{"ancestorTitles":["QueryCache","Cache Invalidation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Cache Invalidation should invalidate queries by document","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should invalidate queries by document"},{"ancestorTitles":["QueryCache","Cache Warming"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Cache Warming should preload common queries","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should preload common queries"},{"ancestorTitles":["QueryCache","Cache Warming"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Cache Warming should identify already cached queries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should identify already cached queries"},{"ancestorTitles":["QueryCache","Statistics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Statistics should get query-specific statistics","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get query-specific statistics"},{"ancestorTitles":["QueryCache","Statistics"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Statistics should calculate cache efficiency","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate cache efficiency"},{"ancestorTitles":["QueryCache","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Error Handling should handle cache set errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cache set errors gracefully"},{"ancestorTitles":["QueryCache","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Error Handling should handle cache get errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cache get errors gracefully"},{"ancestorTitles":["QueryCache","Error Handling"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Error Handling should handle invalidation errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalidation errors gracefully"},{"ancestorTitles":["QueryCache","Integration with CacheManager"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Integration with CacheManager should extend CacheManager functionality","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should extend CacheManager functionality"},{"ancestorTitles":["QueryCache","Integration with CacheManager"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QueryCache Integration with CacheManager should call parent methods","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call parent methods"}],"endTime":1749171768493,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/cache/QueryCache.test.js","startTime":1749171768359,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DynamicConsistentSourceHandler","Configuration Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Configuration Validation should validate valid configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate valid configuration"},{"ancestorTitles":["DynamicConsistentSourceHandler","Configuration Validation"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Configuration Validation should reject configuration without sources","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject configuration without sources"},{"ancestorTitles":["DynamicConsistentSourceHandler","Configuration Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Configuration Validation should reject configuration with empty sources array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject configuration with empty sources array"},{"ancestorTitles":["DynamicConsistentSourceHandler","Configuration Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Configuration Validation should validate source configurations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate source configurations"},{"ancestorTitles":["DynamicConsistentSourceHandler","Configuration Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Configuration Validation should validate supported source types","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate supported source types"},{"ancestorTitles":["DynamicConsistentSourceHandler","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Initialization should initialize successfully with valid configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize successfully with valid configuration"},{"ancestorTitles":["DynamicConsistentSourceHandler","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Initialization should initialize source processors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize source processors"},{"ancestorTitles":["DynamicConsistentSourceHandler","Discovery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Discovery should discover documents from RSS feeds","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should discover documents from RSS feeds"},{"ancestorTitles":["DynamicConsistentSourceHandler","Discovery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Discovery should discover documents from API endpoints","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should discover documents from API endpoints"},{"ancestorTitles":["DynamicConsistentSourceHandler","Discovery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Discovery should handle source discovery errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle source discovery errors gracefully"},{"ancestorTitles":["DynamicConsistentSourceHandler","Discovery"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Discovery should apply deduplication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should apply deduplication"},{"ancestorTitles":["DynamicConsistentSourceHandler","Content Extraction"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Content Extraction should extract RSS item content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should extract RSS item content"},{"ancestorTitles":["DynamicConsistentSourceHandler","Content Extraction"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Content Extraction should extract API content directly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should extract API content directly"},{"ancestorTitles":["DynamicConsistentSourceHandler","Content Extraction"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Content Extraction should handle extraction errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle extraction errors"},{"ancestorTitles":["DynamicConsistentSourceHandler","Content Transformation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Content Transformation should transform RSS content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should transform RSS content"},{"ancestorTitles":["DynamicConsistentSourceHandler","Content Transformation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Content Transformation should transform API content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should transform API content"},{"ancestorTitles":["DynamicConsistentSourceHandler","RSS Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler RSS Processing should parse RSS feed correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should parse RSS feed correctly"},{"ancestorTitles":["DynamicConsistentSourceHandler","RSS Processing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler RSS Processing should handle malformed RSS","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle malformed RSS"},{"ancestorTitles":["DynamicConsistentSourceHandler","API Processing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler API Processing should process API response correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should process API response correctly"},{"ancestorTitles":["DynamicConsistentSourceHandler","Helper Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Helper Methods should setup authentication for API sources","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should setup authentication for API sources"},{"ancestorTitles":["DynamicConsistentSourceHandler","Helper Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Helper Methods should generate document ID consistently","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate document ID consistently"},{"ancestorTitles":["DynamicConsistentSourceHandler","Helper Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Helper Methods should deduplicate documents","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should deduplicate documents"},{"ancestorTitles":["DynamicConsistentSourceHandler","Helper Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Helper Methods should clean HTML content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clean HTML content"},{"ancestorTitles":["DynamicConsistentSourceHandler","Helper Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Helper Methods should count words correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should count words correctly"},{"ancestorTitles":["DynamicConsistentSourceHandler","Cleanup"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DynamicConsistentSourceHandler Cleanup should cleanup resources","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cleanup resources"}],"endTime":1749171768648,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/ingestion/handlers/DynamicConsistentSourceHandler.test.js","startTime":1749171768495,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["OutputFormatter","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter constructor should initialize with default options","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with default options"},{"ancestorTitles":["OutputFormatter","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter constructor should initialize with custom options","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with custom options"},{"ancestorTitles":["OutputFormatter","initialize"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter initialize should initialize successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["OutputFormatter","format"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter format should format response as JSON by default","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should format response as JSON by default"},{"ancestorTitles":["OutputFormatter","format"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter format should format response as text","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should format response as text"},{"ancestorTitles":["OutputFormatter","format"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter format should format response as markdown","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should format response as markdown"},{"ancestorTitles":["OutputFormatter","format"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter format should exclude sources when includeSources is false","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should exclude sources when includeSources is false"},{"ancestorTitles":["OutputFormatter","format"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter format should exclude metadata when includeMetadata is false","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should exclude metadata when includeMetadata is false"},{"ancestorTitles":["OutputFormatter","format"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter format should handle missing response sources","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle missing response sources"},{"ancestorTitles":["OutputFormatter","format"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter format should handle empty documents array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty documents array"},{"ancestorTitles":["OutputFormatter","format"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter format should handle missing confidence score","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing confidence score"},{"ancestorTitles":["OutputFormatter","formatSources"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter formatSources should format sources correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should format sources correctly"},{"ancestorTitles":["OutputFormatter","formatSources"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter formatSources should limit sources to top 10","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should limit sources to top 10"},{"ancestorTitles":["OutputFormatter","formatSources"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter formatSources should handle missing titles and URLs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing titles and URLs"},{"ancestorTitles":["OutputFormatter","formatMetadata"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter formatMetadata should format metadata correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should format metadata correctly"},{"ancestorTitles":["OutputFormatter","formatMetadata"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter formatMetadata should handle missing metadata fields","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle missing metadata fields"},{"ancestorTitles":["OutputFormatter","calculateAverageRelevance"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter calculateAverageRelevance should calculate average relevance correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate average relevance correctly"},{"ancestorTitles":["OutputFormatter","calculateAverageRelevance"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter calculateAverageRelevance should handle empty documents array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty documents array"},{"ancestorTitles":["OutputFormatter","calculateAverageRelevance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter calculateAverageRelevance should handle documents without search metadata","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle documents without search metadata"},{"ancestorTitles":["OutputFormatter","formatError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter formatError should format error response correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should format error response correctly"},{"ancestorTitles":["OutputFormatter","formatError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter formatError should handle error without name","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle error without name"},{"ancestorTitles":["OutputFormatter","formatError"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter formatError should handle error without message","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle error without message"},{"ancestorTitles":["OutputFormatter","getStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter getStatus should return status when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return status when not initialized"},{"ancestorTitles":["OutputFormatter","getStatus"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter getStatus should return status when initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return status when initialized"},{"ancestorTitles":["OutputFormatter","shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter shutdown should shutdown successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should shutdown successfully"},{"ancestorTitles":["OutputFormatter","shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"OutputFormatter shutdown should handle shutdown when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown when not initialized"}],"endTime":1749171768779,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/rag/components/OutputFormatter.test.js","startTime":1749171768650,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["PrometheusExporter","Initialization"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Initialization should initialize with default configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with default configuration"},{"ancestorTitles":["PrometheusExporter","Initialization"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Initialization should initialize with custom configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with custom configuration"},{"ancestorTitles":["PrometheusExporter","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Initialization should initialize custom metrics","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize custom metrics"},{"ancestorTitles":["PrometheusExporter","Cost Tracking"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Cost Tracking should record cost metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record cost metrics"},{"ancestorTitles":["PrometheusExporter","Cost Tracking"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Cost Tracking should record token metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record token metrics"},{"ancestorTitles":["PrometheusExporter","Cost Tracking"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Cost Tracking should update budget utilization","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update budget utilization"},{"ancestorTitles":["PrometheusExporter","Quality Tracking"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Quality Tracking should record API response metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record API response metrics"},{"ancestorTitles":["PrometheusExporter","Quality Tracking"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Quality Tracking should update error rate","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update error rate"},{"ancestorTitles":["PrometheusExporter","Quality Tracking"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Quality Tracking should update SLO compliance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update SLO compliance"},{"ancestorTitles":["PrometheusExporter","Quality Tracking"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Quality Tracking should record document processing time","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record document processing time"},{"ancestorTitles":["PrometheusExporter","System Tracking"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter System Tracking should update active connections","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update active connections"},{"ancestorTitles":["PrometheusExporter","System Tracking"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter System Tracking should update queue size","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update queue size"},{"ancestorTitles":["PrometheusExporter","System Tracking"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter System Tracking should update cache hit rate","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update cache hit rate"},{"ancestorTitles":["PrometheusExporter","System Tracking"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter System Tracking should record document ingestion","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record document ingestion"},{"ancestorTitles":["PrometheusExporter","Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Integration should integrate with cost tracker","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should integrate with cost tracker"},{"ancestorTitles":["PrometheusExporter","Integration"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Integration should integrate with quality metrics","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should integrate with quality metrics"},{"ancestorTitles":["PrometheusExporter","Integration"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Integration should handle missing integrations gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing integrations gracefully"},{"ancestorTitles":["PrometheusExporter","Status and Health"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Status and Health should return status when not initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return status when not initialized"},{"ancestorTitles":["PrometheusExporter","Status and Health"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Status and Health should return status when initialized","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return status when initialized"},{"ancestorTitles":["PrometheusExporter","Status and Health"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Status and Health should return content type","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return content type"},{"ancestorTitles":["PrometheusExporter","Metrics Export"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Metrics Export should export metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export metrics"},{"ancestorTitles":["PrometheusExporter","Metrics Export"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Metrics Export should export metrics as string","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should export metrics as string"},{"ancestorTitles":["PrometheusExporter","Shutdown"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Shutdown should shutdown gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should shutdown gracefully"},{"ancestorTitles":["PrometheusExporter","Shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"PrometheusExporter Shutdown should handle shutdown when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown when not initialized"}],"endTime":1749171768958,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/monitoring/PrometheusExporter.test.js","startTime":1749171768781,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CostTracker","Initialization"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Initialization should initialize with default configuration","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should initialize with default configuration"},{"ancestorTitles":["CostTracker","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Initialization should initialize with custom configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with custom configuration"},{"ancestorTitles":["CostTracker","Initialization"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Initialization should initialize DAO and load data when persistence enabled","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize DAO and load data when persistence enabled"},{"ancestorTitles":["CostTracker","Cost Calculation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Cost Calculation should calculate cost for OpenAI GPT-4","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate cost for OpenAI GPT-4"},{"ancestorTitles":["CostTracker","Cost Calculation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Cost Calculation should calculate cost for Anthropic Claude","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should calculate cost for Anthropic Claude"},{"ancestorTitles":["CostTracker","Cost Calculation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Cost Calculation should handle unknown provider/model with zero cost","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle unknown provider/model with zero cost"},{"ancestorTitles":["CostTracker","Cost Tracking"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Cost Tracking should track cost event successfully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should track cost event successfully"},{"ancestorTitles":["CostTracker","Cost Tracking"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Cost Tracking should update in-memory caches when tracking cost","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update in-memory caches when tracking cost"},{"ancestorTitles":["CostTracker","Cost Tracking"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Cost Tracking should emit cost event after tracking","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should emit cost event after tracking"},{"ancestorTitles":["CostTracker","Data Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Data Management should cleanup old records","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cleanup old records"},{"ancestorTitles":["CostTracker","Data Management"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Data Management should get cost summary","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get cost summary"},{"ancestorTitles":["CostTracker","Data Management"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Data Management should get daily totals","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get daily totals"},{"ancestorTitles":["CostTracker","Data Management"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Data Management should get monthly totals","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get monthly totals"},{"ancestorTitles":["CostTracker","Data Management"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Data Management should get provider totals","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get provider totals"},{"ancestorTitles":["CostTracker","Error Handling"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Error Handling should handle cost tracking failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cost tracking failure gracefully"},{"ancestorTitles":["CostTracker","Error Handling"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"CostTracker Error Handling should handle initialization failure gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle initialization failure gracefully"}],"endTime":1749171769099,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/monitoring/CostTracker.test.js","startTime":1749171768961,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DocumentDAO","create"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO create should create a document successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create a document successfully"},{"ancestorTitles":["DocumentDAO","create"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO create should handle creation errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle creation errors"},{"ancestorTitles":["DocumentDAO","create"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO create should use default values for optional fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use default values for optional fields"},{"ancestorTitles":["DocumentDAO","findById"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO findById should find document by ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find document by ID"},{"ancestorTitles":["DocumentDAO","findById"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO findById should return null when document not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when document not found"},{"ancestorTitles":["DocumentDAO","findById"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO findById should handle query errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle query errors"},{"ancestorTitles":["DocumentDAO","findByHash"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO findByHash should find document by hash","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find document by hash"},{"ancestorTitles":["DocumentDAO","findByHash"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO findByHash should return null when hash not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when hash not found"},{"ancestorTitles":["DocumentDAO","search"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO search should search documents with basic query","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should search documents with basic query"},{"ancestorTitles":["DocumentDAO","search"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO search should search with filters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should search with filters"},{"ancestorTitles":["DocumentDAO","search"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO search should handle search errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle search errors"},{"ancestorTitles":["DocumentDAO","findBySource"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO findBySource should find documents by source","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find documents by source"},{"ancestorTitles":["DocumentDAO","findBySource"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO findBySource should use custom options","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use custom options"},{"ancestorTitles":["DocumentDAO","update"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO update should update document successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update document successfully"},{"ancestorTitles":["DocumentDAO","update"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO update should throw error when no fields to update","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when no fields to update"},{"ancestorTitles":["DocumentDAO","update"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO update should throw error when document not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when document not found"},{"ancestorTitles":["DocumentDAO","delete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO delete should delete document successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should delete document successfully"},{"ancestorTitles":["DocumentDAO","delete"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO delete should throw error when document not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when document not found"},{"ancestorTitles":["DocumentDAO","findPendingReview"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO findPendingReview should find documents pending review","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should find documents pending review"},{"ancestorTitles":["DocumentDAO","findPendingReview"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO findPendingReview should use custom options","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should use custom options"},{"ancestorTitles":["DocumentDAO","getStats"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO getStats should return document statistics","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return document statistics"},{"ancestorTitles":["DocumentDAO","bulkCreate"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO bulkCreate should create multiple documents in transaction","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should create multiple documents in transaction"},{"ancestorTitles":["DocumentDAO","bulkCreate"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DocumentDAO bulkCreate should handle bulk creation errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle bulk creation errors"}],"endTime":1749171769244,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/DocumentDAO.test.js","startTime":1749171769101,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["RequestThrottler","constructor"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler constructor should initialize with default options","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should initialize with default options"},{"ancestorTitles":["RequestThrottler","constructor"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler constructor should initialize with custom options","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize with custom options"},{"ancestorTitles":["RequestThrottler","initialize"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler initialize should initialize successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["RequestThrottler","initialize"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler initialize should not initialize twice","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not initialize twice"},{"ancestorTitles":["RequestThrottler","middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler middleware should create middleware function","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create middleware function"},{"ancestorTitles":["RequestThrottler","middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler middleware should process request when under limits","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should process request when under limits"},{"ancestorTitles":["RequestThrottler","middleware"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler middleware should queue request when at concurrent limit","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should queue request when at concurrent limit"},{"ancestorTitles":["RequestThrottler","middleware"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler middleware should reject request when queue is full","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should reject request when queue is full"},{"ancestorTitles":["RequestThrottler","middleware"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler middleware should handle rate limiting","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle rate limiting"},{"ancestorTitles":["RequestThrottler","getMetrics"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler getMetrics should return metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return metrics"},{"ancestorTitles":["RequestThrottler","getStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler getStatus should return status when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return status when not initialized"},{"ancestorTitles":["RequestThrottler","getStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler getStatus should return status when initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return status when initialized"},{"ancestorTitles":["RequestThrottler","shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler shutdown should shutdown gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should shutdown gracefully"},{"ancestorTitles":["RequestThrottler","shutdown"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler shutdown should handle shutdown when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown when not initialized"},{"ancestorTitles":["RequestThrottler","client identification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler client identification should identify client by API key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should identify client by API key"},{"ancestorTitles":["RequestThrottler","client identification"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler client identification should identify client by user ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should identify client by user ID"},{"ancestorTitles":["RequestThrottler","client identification"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RequestThrottler client identification should identify client by IP address","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should identify client by IP address"}],"endTime":1749171769392,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/rag/performance/RequestThrottler.test.js","startTime":1749171769246,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["IngestionJobProcessor","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Initialization should initialize successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should initialize successfully"},{"ancestorTitles":["IngestionJobProcessor","Initialization"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Initialization should handle initialization errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle initialization errors"},{"ancestorTitles":["IngestionJobProcessor","Single Job Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Single Job Processing should process job successfully","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should process job successfully"},{"ancestorTitles":["IngestionJobProcessor","Single Job Processing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Single Job Processing should handle existing source","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle existing source"},{"ancestorTitles":["IngestionJobProcessor","Single Job Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Single Job Processing should handle document processing errors","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle document processing errors"},{"ancestorTitles":["IngestionJobProcessor","Single Job Processing"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Single Job Processing should stop on error when configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should stop on error when configured"},{"ancestorTitles":["IngestionJobProcessor","Single Job Processing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Single Job Processing should fail without source configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fail without source configuration"},{"ancestorTitles":["IngestionJobProcessor","Single Job Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Single Job Processing should fail when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fail when not initialized"},{"ancestorTitles":["IngestionJobProcessor","Single Job Processing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Single Job Processing should cleanup on error","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should cleanup on error"},{"ancestorTitles":["IngestionJobProcessor","Batch Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Batch Processing should process batch successfully","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should process batch successfully"},{"ancestorTitles":["IngestionJobProcessor","Batch Processing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Batch Processing should handle batch with failed sources","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle batch with failed sources"},{"ancestorTitles":["IngestionJobProcessor","Batch Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Batch Processing should stop batch on error when configured","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should stop batch on error when configured"},{"ancestorTitles":["IngestionJobProcessor","Batch Processing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Batch Processing should fail with empty sources","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fail with empty sources"},{"ancestorTitles":["IngestionJobProcessor","Batch Processing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Batch Processing should fail without sources array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fail without sources array"},{"ancestorTitles":["IngestionJobProcessor","Batch Processing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Batch Processing should generate batch ID if not provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate batch ID if not provided"},{"ancestorTitles":["IngestionJobProcessor","Shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Shutdown should shutdown successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should shutdown successfully"},{"ancestorTitles":["IngestionJobProcessor","Shutdown"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Shutdown should handle shutdown when not initialized","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown when not initialized"},{"ancestorTitles":["IngestionJobProcessor","Shutdown"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Shutdown should handle shutdown errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle shutdown errors"},{"ancestorTitles":["IngestionJobProcessor","Progress Reporting"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Progress Reporting should report progress during job processing","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should report progress during job processing"},{"ancestorTitles":["IngestionJobProcessor","Progress Reporting"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"IngestionJobProcessor Progress Reporting should report progress during batch processing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should report progress during batch processing"}],"endTime":1749171769532,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/ingestion/queue/IngestionJobProcessor.test.js","startTime":1749171769394,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DatabaseManager","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager constructor should initialize with default configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with default configuration"},{"ancestorTitles":["DatabaseManager","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager constructor should use DATABASE_URL when available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use DATABASE_URL when available"},{"ancestorTitles":["DatabaseManager","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager constructor should use provided configuration","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should use provided configuration"},{"ancestorTitles":["DatabaseManager","constructor"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager constructor should use environment variables when available","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should use environment variables when available"},{"ancestorTitles":["DatabaseManager","initialize"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager initialize should successfully initialize connection","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should successfully initialize connection"},{"ancestorTitles":["DatabaseManager","initialize"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager initialize should handle connection failure","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle connection failure"},{"ancestorTitles":["DatabaseManager","query"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager query should execute query successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should execute query successfully"},{"ancestorTitles":["DatabaseManager","query"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager query should handle query errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle query errors"},{"ancestorTitles":["DatabaseManager","query"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager query should throw error when not connected","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when not connected"},{"ancestorTitles":["DatabaseManager","transaction"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager transaction should execute transaction successfully","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should execute transaction successfully"},{"ancestorTitles":["DatabaseManager","transaction"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager transaction should rollback on error","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should rollback on error"},{"ancestorTitles":["DatabaseManager","applySchema"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager applySchema should apply schema successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should apply schema successfully"},{"ancestorTitles":["DatabaseManager","applySchema"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager applySchema should handle schema file read error","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle schema file read error"},{"ancestorTitles":["DatabaseManager","runMigrations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager runMigrations should create migrations table and run migrations","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create migrations table and run migrations"},{"ancestorTitles":["DatabaseManager","runMigrations"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager runMigrations should skip already applied migrations","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should skip already applied migrations"},{"ancestorTitles":["DatabaseManager","runMigrations"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager runMigrations should handle missing migrations directory","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing migrations directory"},{"ancestorTitles":["DatabaseManager","healthCheck"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager healthCheck should return healthy status","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return healthy status"},{"ancestorTitles":["DatabaseManager","healthCheck"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager healthCheck should return unhealthy status on error","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return unhealthy status on error"},{"ancestorTitles":["DatabaseManager","getStats"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager getStats should return database statistics","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return database statistics"},{"ancestorTitles":["DatabaseManager","cleanup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager cleanup should cleanup old data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should cleanup old data"},{"ancestorTitles":["DatabaseManager","close"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager close should close connection","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should close connection"},{"ancestorTitles":["DatabaseManager","close"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager close should handle close when pool is null","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle close when pool is null"},{"ancestorTitles":["DatabaseManager","getClient"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DatabaseManager getClient should return a client","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return a client"}],"endTime":1749171769685,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/database/DatabaseManager.test.js","startTime":1749171769536,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SemiStaticSourceHandler","Configuration Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Configuration Validation should validate valid configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate valid configuration"},{"ancestorTitles":["SemiStaticSourceHandler","Configuration Validation"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Configuration Validation should reject configuration without baseUrl","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject configuration without baseUrl"},{"ancestorTitles":["SemiStaticSourceHandler","Configuration Validation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Configuration Validation should reject configuration without endpoints","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject configuration without endpoints"},{"ancestorTitles":["SemiStaticSourceHandler","Configuration Validation"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Configuration Validation should validate authentication configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate authentication configuration"},{"ancestorTitles":["SemiStaticSourceHandler","Configuration Validation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Configuration Validation should validate endpoint accessibility","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate endpoint accessibility"},{"ancestorTitles":["SemiStaticSourceHandler","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Initialization should initialize successfully with valid configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize successfully with valid configuration"},{"ancestorTitles":["SemiStaticSourceHandler","Initialization"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Initialization should fail initialization with invalid endpoints","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fail initialization with invalid endpoints"},{"ancestorTitles":["SemiStaticSourceHandler","Discovery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Discovery should discover documents from all endpoints","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should discover documents from all endpoints"},{"ancestorTitles":["SemiStaticSourceHandler","Discovery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Discovery should handle endpoints with no ETag","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle endpoints with no ETag"},{"ancestorTitles":["SemiStaticSourceHandler","Discovery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Discovery should skip inaccessible endpoints","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should skip inaccessible endpoints"},{"ancestorTitles":["SemiStaticSourceHandler","Content Extraction"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Content Extraction should extract content from endpoint","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should extract content from endpoint"},{"ancestorTitles":["SemiStaticSourceHandler","Content Extraction"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Content Extraction should handle text content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle text content"},{"ancestorTitles":["SemiStaticSourceHandler","Content Extraction"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Content Extraction should handle extraction errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle extraction errors"},{"ancestorTitles":["SemiStaticSourceHandler","Content Transformation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Content Transformation should transform JSON content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should transform JSON content"},{"ancestorTitles":["SemiStaticSourceHandler","Content Transformation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Content Transformation should transform HTML content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should transform HTML content"},{"ancestorTitles":["SemiStaticSourceHandler","Content Transformation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Content Transformation should handle plain text content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle plain text content"},{"ancestorTitles":["SemiStaticSourceHandler","Change Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Change Detection should detect changes using ETag","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect changes using ETag"},{"ancestorTitles":["SemiStaticSourceHandler","Change Detection"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Change Detection should detect no changes with same ETag","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should detect no changes with same ETag"},{"ancestorTitles":["SemiStaticSourceHandler","Change Detection"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Change Detection should fallback to last-modified when no ETag","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should fallback to last-modified when no ETag"},{"ancestorTitles":["SemiStaticSourceHandler","Helper Methods"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Helper Methods should setup authentication headers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should setup authentication headers"},{"ancestorTitles":["SemiStaticSourceHandler","Helper Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Helper Methods should handle basic authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle basic authentication"},{"ancestorTitles":["SemiStaticSourceHandler","Helper Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Helper Methods should handle API key authentication","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle API key authentication"},{"ancestorTitles":["SemiStaticSourceHandler","Helper Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Helper Methods should extract title from JSON content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract title from JSON content"},{"ancestorTitles":["SemiStaticSourceHandler","Helper Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Helper Methods should extract title from HTML content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract title from HTML content"},{"ancestorTitles":["SemiStaticSourceHandler","Helper Methods"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Helper Methods should clean HTML content","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clean HTML content"},{"ancestorTitles":["SemiStaticSourceHandler","Helper Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Helper Methods should generate document ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate document ID"},{"ancestorTitles":["SemiStaticSourceHandler","Helper Methods"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Helper Methods should count words correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should count words correctly"},{"ancestorTitles":["SemiStaticSourceHandler","Cleanup"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"SemiStaticSourceHandler Cleanup should cleanup resources","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should cleanup resources"}],"endTime":1749171769836,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/ingestion/handlers/SemiStaticSourceHandler.test.js","startTime":1749171769688,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["QualityMiddleware","apiMonitoring middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware apiMonitoring middleware should record API request metrics","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should record API request metrics"},{"ancestorTitles":["QualityMiddleware","apiMonitoring middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware apiMonitoring middleware should handle requests without user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle requests without user"},{"ancestorTitles":["QualityMiddleware","apiMonitoring middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware apiMonitoring middleware should handle requests without route","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle requests without route"},{"ancestorTitles":["QualityMiddleware","apiMonitoring middleware"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware apiMonitoring middleware should handle metrics recording errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle metrics recording errors gracefully"},{"ancestorTitles":["QualityMiddleware","wrapDatabaseOperation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware wrapDatabaseOperation should record successful database operation","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should record successful database operation"},{"ancestorTitles":["QualityMiddleware","wrapDatabaseOperation"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware wrapDatabaseOperation should record failed database operation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should record failed database operation"},{"ancestorTitles":["QualityMiddleware","wrapDatabaseOperation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware wrapDatabaseOperation should handle metrics recording errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle metrics recording errors gracefully"},{"ancestorTitles":["QualityMiddleware","wrapLLMProcessing"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware wrapLLMProcessing should record successful LLM processing","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should record successful LLM processing"},{"ancestorTitles":["QualityMiddleware","wrapLLMProcessing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware wrapLLMProcessing should record failed LLM processing","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should record failed LLM processing"},{"ancestorTitles":["QualityMiddleware","wrapOperation"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware wrapOperation should record successful generic operation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should record successful generic operation"},{"ancestorTitles":["QualityMiddleware","wrapOperation"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware wrapOperation should record failed generic operation","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should record failed generic operation"},{"ancestorTitles":["QualityMiddleware","errorMonitoring middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware errorMonitoring middleware should record error metrics","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should record error metrics"},{"ancestorTitles":["QualityMiddleware","errorMonitoring middleware"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware errorMonitoring middleware should handle errors without status","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle errors without status"},{"ancestorTitles":["QualityMiddleware","healthCheck endpoint"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware healthCheck endpoint should return healthy status","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return healthy status"},{"ancestorTitles":["QualityMiddleware","healthCheck endpoint"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware healthCheck endpoint should return degraded status for critical violations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return degraded status for critical violations"},{"ancestorTitles":["QualityMiddleware","healthCheck endpoint"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware healthCheck endpoint should handle errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle errors gracefully"},{"ancestorTitles":["QualityMiddleware","metricsEndpoint"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware metricsEndpoint should return specific metric data","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return specific metric data"},{"ancestorTitles":["QualityMiddleware","metricsEndpoint"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware metricsEndpoint should return quality report when no specific metric requested","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return quality report when no specific metric requested"},{"ancestorTitles":["QualityMiddleware","metricsEndpoint"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware metricsEndpoint should handle errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle errors gracefully"},{"ancestorTitles":["QualityMiddleware","sloEndpoint"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware sloEndpoint should return specific SLO compliance","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return specific SLO compliance"},{"ancestorTitles":["QualityMiddleware","sloEndpoint"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware sloEndpoint should return all SLO compliance when no specific SLO requested","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return all SLO compliance when no specific SLO requested"},{"ancestorTitles":["QualityMiddleware","sloEndpoint"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"QualityMiddleware sloEndpoint should handle errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle errors gracefully"}],"endTime":1749171769976,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/monitoring/QualityMiddleware.test.js","startTime":1749171769840,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Ingestion Types","SOURCE_TYPES"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ingestion Types SOURCE_TYPES should have all required source types","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should have all required source types"},{"ancestorTitles":["Ingestion Types","SOURCE_TYPES"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ingestion Types SOURCE_TYPES should have exactly 4 source types","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have exactly 4 source types"},{"ancestorTitles":["Ingestion Types","VISIBILITY_LEVELS"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ingestion Types VISIBILITY_LEVELS should have all required visibility levels","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have all required visibility levels"},{"ancestorTitles":["Ingestion Types","VISIBILITY_LEVELS"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ingestion Types VISIBILITY_LEVELS should have exactly 3 visibility levels","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have exactly 3 visibility levels"},{"ancestorTitles":["Ingestion Types","PROCESSING_STATUS"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ingestion Types PROCESSING_STATUS should have all required processing statuses","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should have all required processing statuses"},{"ancestorTitles":["Ingestion Types","PROCESSING_STATUS"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ingestion Types PROCESSING_STATUS should have exactly 7 processing statuses","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should have exactly 7 processing statuses"},{"ancestorTitles":["Ingestion Types","BaseSourceHandler"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ingestion Types BaseSourceHandler should initialize with correct configuration","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should initialize with correct configuration"},{"ancestorTitles":["Ingestion Types","BaseSourceHandler"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Ingestion Types BaseSourceHandler should throw error when calling abstract methods","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should throw error when calling abstract methods"},{"ancestorTitles":["Ingestion Types","BaseSourceHandler"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Ingestion Types BaseSourceHandler should accept any configuration without validation","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should accept any configuration without validation"},{"ancestorTitles":["Ingestion Types","BaseSourceHandler"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Ingestion Types BaseSourceHandler should store configuration as provided","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should store configuration as provided"}],"endTime":1749171770110,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/ingestion/types.test.js","startTime":1749171769978,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["TracingManager","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TracingManager constructor should initialize with default options","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with default options"},{"ancestorTitles":["TracingManager","constructor"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TracingManager constructor should initialize with custom options","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should initialize with custom options"},{"ancestorTitles":["TracingManager","startSpan"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TracingManager startSpan should start a new span when enabled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should start a new span when enabled"},{"ancestorTitles":["TracingManager","startSpan"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TracingManager startSpan should return no-op span when disabled","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return no-op span when disabled"},{"ancestorTitles":["TracingManager","RAG-specific spans"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TracingManager RAG-specific spans should create query span with correct attributes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create query span with correct attributes"},{"ancestorTitles":["TracingManager","RAG-specific spans"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TracingManager RAG-specific spans should create retrieval span with correct attributes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create retrieval span with correct attributes"},{"ancestorTitles":["TracingManager","RAG-specific spans"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"TracingManager RAG-specific spans should create generation span with correct attributes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create generation span with correct attributes"},{"ancestorTitles":["TracingManager","generateTraceId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"TracingManager generateTraceId should generate a valid UUID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate a valid UUID"},{"ancestorTitles":["TracingManager","generateTraceId"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"TracingManager generateTraceId should generate unique IDs","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate unique IDs"}],"endTime":1749171770255,"message":"","name":"/Users/charlieirwin/Documents/GitHub/TheWell_Pipeline/tests/unit/tracing/TracingManager.test.js","startTime":1749171770113,"status":"passed","summary":""}],"wasInterrupted":false}
