# Production Docker Compose Configuration
# Complete TheWell Pipeline deployment with monitoring and scaling

version: '3.8'

services:
  # Application Services
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://thewell:${POSTGRES_PASSWORD}@postgres:5432/thewell_prod
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
      - PROMETHEUS_PORT=9090
      - GRAFANA_URL=http://grafana:3001
    depends_on:
      - postgres
      - redis
      - prometheus
    restart: unless-stopped
    networks:
      - thewell-network
    volumes:
      - ./logs:/app/logs
      - ./exports:/app/exports
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1GB
        reservations:
          cpus: '0.5'
          memory: 512MB

  # Database Services
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=thewell_prod
      - POSTGRES_USER=thewell
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./src/database/permissions-schema.sql:/docker-entrypoint-initdb.d/02-permissions.sql
      - ./src/ingestion/schemas/visibility.sql:/docker-entrypoint-initdb.d/03-visibility.sql
    restart: unless-stopped
    networks:
      - thewell-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2GB
        reservations:
          cpus: '1.0'
          memory: 1GB

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - thewell-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512MB
        reservations:
          cpus: '0.25'
          memory: 256MB

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infrastructure/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - thewell-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1GB
        reservations:
          cpus: '0.5'
          memory: 512MB

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - thewell-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512MB
        reservations:
          cpus: '0.25'
          memory: 256MB

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./infrastructure/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - thewell-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256MB
        reservations:
          cpus: '0.1'
          memory: 128MB

  # Vector Search (pgvector extension)
  vector-db:
    image: ankane/pgvector
    environment:
      - POSTGRES_DB=thewell_vectors
      - POSTGRES_USER=thewell
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - vector_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - thewell-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1GB
        reservations:
          cpus: '0.5'
          memory: 512MB

  # Log Management
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./infrastructure/loki/loki.yml:/etc/loki/loki.yml
      - loki_data:/loki
    command: -config.file=/etc/loki/loki.yml
    restart: unless-stopped
    networks:
      - thewell-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512MB
        reservations:
          cpus: '0.25'
          memory: 256MB

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./infrastructure/promtail/promtail.yml:/etc/promtail/promtail.yml
      - ./logs:/var/log/thewell
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - thewell-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256MB
        reservations:
          cpus: '0.1'
          memory: 128MB

  # Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
      - ./infrastructure/ssl:/etc/ssl/certs
    depends_on:
      - api
      - grafana
      - prometheus
    restart: unless-stopped
    networks:
      - thewell-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256MB
        reservations:
          cpus: '0.1'
          memory: 128MB

  # Background Workers
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://thewell:${POSTGRES_PASSWORD}@postgres:5432/thewell_prod
      - REDIS_URL=redis://redis:6379
      - WORKER_TYPE=background
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - thewell-network
    volumes:
      - ./logs:/app/logs
    command: ["node", "src/workers/background-worker.js"]
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512MB
        reservations:
          cpus: '0.25'
          memory: 256MB

  # Queue Workers
  queue-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://thewell:${POSTGRES_PASSWORD}@postgres:5432/thewell_prod
      - REDIS_URL=redis://redis:6379
      - WORKER_TYPE=queue
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - thewell-network
    volumes:
      - ./logs:/app/logs
    command: ["node", "src/workers/queue-worker.js"]
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1GB
        reservations:
          cpus: '0.5'
          memory: 512MB

# Networks
networks:
  thewell-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  vector_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local

# Production deployment considerations:
# 1. Replace ${POSTGRES_PASSWORD} and ${GRAFANA_ADMIN_PASSWORD} with secure passwords
# 2. Configure SSL certificates in ./infrastructure/ssl/
# 3. Set up external secrets management (AWS Secrets Manager, etc.)
# 4. Configure backup strategies for persistent volumes
# 5. Set up log rotation and monitoring
# 6. Configure firewall rules and security groups
# 7. Set up database replication for high availability
# 8. Configure horizontal autoscaling based on metrics