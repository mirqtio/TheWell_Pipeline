# Production Docker Compose Configuration
# Adapted for local Docker Desktop "production" run



services:
  # Application Services
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production # Assumes your Dockerfile has a 'production' stage
    ports:
      - "${WEB_PORT:-3000}:3000" # Using WEB_PORT from .env, default 3000 for api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
      - PROMETHEUS_PORT=9090 # For prometheus metrics endpoint in app
      - GRAFANA_URL=http://grafana:3001 # For app to know Grafana location if needed
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - WEB_PORT=${WEB_PORT:-3000}
      - DB_HOST=postgres
      - DB_PORT=${POSTGRES_PORT:-5432}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - TRACING_ENABLED=${TRACING_ENABLED:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started # Assuming redis starts fast, or add healthcheck
    restart: unless-stopped
    networks:
      - thewell-network
    volumes:
      - .:/app                # Mount the entire project directory to /app in the container
      # - /app/node_modules     # node_modules are now part of the image
      - ./logs:/app/logs
      - ./exports:/app/exports
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"] # Port should match internal app port
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Services
  postgres:
    image: pgvector/pgvector:pg15 # Changed to pgvector
    environment:
      POSTGRES_DB: ${POSTGRES_DB} # Using from .env
      POSTGRES_USER: ${POSTGRES_USER} # Using from .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Using from .env
    ports:
      - "${POSTGRES_PORT:-5432}:5432" # Using POSTGRES_PORT from .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-database.sql:/docker-entrypoint-initdb.d/01-init-database.sql
      - ./src/database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
      - ./src/database/permissions-schema.sql:/docker-entrypoint-initdb.d/03-permissions-schema.sql
      - ./src/ingestion/schemas/visibility.sql:/docker-entrypoint-initdb.d/04-visibility-schema.sql
      - ./00-create-user.sql:/docker-entrypoint-initdb.d/00-create-user.sql
    restart: unless-stopped
    networks:
      - thewell-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379" # Using REDIS_PORT from .env
    volumes:
      - redis_data:/data
      # - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf # Uncomment if you have custom redis.conf
    restart: unless-stopped
    networks:
      - thewell-network
    healthcheck: # Added basic Redis healthcheck
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  
  background-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production 
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - WORKER_TYPE=background
      - OPENAI_API_KEY=${OPENAI_API_KEY} # Workers might need API keys
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy # Depends on redis healthcheck
    restart: unless-stopped
    networks:
      - thewell-network
    volumes:
      - ./logs:/app/logs
    command: ["node", "src/workers/background-worker.js"] # Verify path

  queue-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - WORKER_TYPE=queue
      - OPENAI_API_KEY=${OPENAI_API_KEY} # Workers might need API keys
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - thewell-network
    volumes:
      - ./logs:/app/logs
    command: ["node", "src/workers/queue-worker.js"] # Verify path

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.43.0
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - thewell-network

  grafana:
    image: grafana/grafana:9.4.7
    ports:
      - "3001:3000" 
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-SuperSecureGrafanaPwd} 
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - ./infrastructure/grafana/provisioning/:/etc/grafana/provisioning/
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    networks:
      - thewell-network

  loki:
    image: grafana/loki:2.8.0
    ports:
      - "3100:3100" 
    volumes:
      - ./infrastructure/loki/loki-config.yml:/etc/loki/config.yml
      - loki_data:/loki
    command: -config.file=/etc/loki/config.yml
    restart: unless-stopped
    networks:
      - thewell-network
  
  promtail:
    image: grafana/promtail:2.8.0
    volumes:
      - ./infrastructure/promtail/promtail-config.yml:/etc/promtail/config.yml
      - ./logs:/app/logs # Mount app logs from api/workers
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - thewell-network

  alertmanager:
    image: prom/alertmanager:v0.25.0
    ports:
      - "9093:9093"
    volumes:
      - ./infrastructure/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    networks:
      - thewell-network
    depends_on:
      - prometheus

# Networks
networks:
  thewell-network:
    driver: bridge

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local
