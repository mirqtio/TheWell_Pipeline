{"version":3,"names":["EventEmitter","require","SourceHandlerFactory","SourceHandlerRegistry","constructor","factory","logger","console","handlers","Map","enabledHandlers","Set","stats","totalHandlers","activeHandlers","discoveredDocuments","processedDocuments","registerHandler","config","id","Error","has","validateConfig","handler","createHandler","initialize","set","enabled","add","emit","type","unregisterHandler","handlerId","get","cleanup","delete","getHandler","getAllHandlers","Array","from","values","getEnabledHandlers","map","filter","enableHandler","wasEnabled","info","disableHandler","isHandlerEnabled","registerHandlers","configs","isArray","results","push","success","error","message","discoverAll","documents","discover","length","clear","cleanupAll","getStats","getStatistics","handlersByType","size","disabledHandlers","getHandlerCount","getEnabledHandlerCount","getAllHandlerIds","keys","updateHandlerConfig","newConfig","getHandlersByType","getHandlersByVisibility","visibility","hasHandlers","module","exports"],"sources":["SourceHandlerRegistry.js"],"sourcesContent":["const { EventEmitter } = require('events');\nconst SourceHandlerFactory = require('./SourceHandlerFactory');\n\n/**\n * Registry for managing source handlers\n */\nclass SourceHandlerRegistry extends EventEmitter {\n  constructor(factory = null, logger = null) {\n    super();\n    this.factory = factory || new SourceHandlerFactory();\n    this.logger = logger || console;\n    this.handlers = new Map();\n    this.enabledHandlers = new Set();\n    this.stats = {\n      totalHandlers: 0,\n      activeHandlers: 0,\n      discoveredDocuments: 0,\n      processedDocuments: 0\n    };\n  }\n\n  /**\n   * Register a handler with the registry\n   */\n  async registerHandler(config) {\n    if (!config || !config.id) {\n      throw new Error('Handler configuration with id is required');\n    }\n\n    if (this.handlers.has(config.id)) {\n      throw new Error(`Handler with ID ${config.id} is already registered`);\n    }\n\n    // Validate configuration\n    await this.factory.validateConfig(config);\n\n    // Create handler instance\n    const handler = this.factory.createHandler(config);\n    \n    // Initialize handler\n    await handler.initialize();\n\n    // Store handler\n    this.handlers.set(config.id, handler);\n    \n    // Add to enabled handlers if enabled\n    if (config.enabled !== false) {\n      this.enabledHandlers.add(config.id);\n      this.stats.activeHandlers++;\n    }\n    \n    this.stats.totalHandlers++;\n\n    this.emit('handlerRegistered', { id: config.id, type: config.type });\n    \n    return handler;\n  }\n\n  /**\n   * Unregister a handler\n   */\n  async unregisterHandler(handlerId) {\n    const handler = this.handlers.get(handlerId);\n    if (!handler) {\n      throw new Error(`Handler with ID ${handlerId} not found`);\n    }\n\n    // Cleanup handler\n    if (typeof handler.cleanup === 'function') {\n      await handler.cleanup();\n    }\n\n    // Remove from registry\n    this.handlers.delete(handlerId);\n    this.enabledHandlers.delete(handlerId);\n    this.stats.totalHandlers--;\n    if (this.stats.activeHandlers > 0) {\n      this.stats.activeHandlers--;\n    }\n\n    this.emit('handlerUnregistered', { id: handlerId });\n    \n    return true;\n  }\n\n  /**\n   * Get a handler by id\n   */\n  getHandler(handlerId) {\n    return this.handlers.get(handlerId) || null;\n  }\n\n  /**\n   * Get all registered handlers\n   */\n  getAllHandlers() {\n    return Array.from(this.handlers.values());\n  }\n\n  /**\n   * Get enabled handlers\n   */\n  getEnabledHandlers() {\n    return Array.from(this.enabledHandlers)\n      .map(id => this.handlers.get(id))\n      .filter(handler => handler);\n  }\n\n  /**\n   * Enable a handler\n   */\n  enableHandler(handlerId) {\n    if (!this.handlers.has(handlerId)) {\n      throw new Error(`Handler ${handlerId} not found`);\n    }\n\n    const handler = this.handlers.get(handlerId);\n    const wasEnabled = this.enabledHandlers.has(handlerId);\n    \n    this.enabledHandlers.add(handlerId);\n    handler.config.enabled = true;\n    \n    if (!wasEnabled) {\n      this.stats.activeHandlers++;\n      this.logger.info('Handler enabled', { handlerId });\n      this.emit('handlerEnabled', { id: handlerId });\n    }\n\n    return true;\n  }\n\n  /**\n   * Disable a handler\n   */\n  disableHandler(handlerId) {\n    if (!this.handlers.has(handlerId)) {\n      throw new Error(`Handler ${handlerId} not found`);\n    }\n\n    const handler = this.handlers.get(handlerId);\n    const wasEnabled = this.enabledHandlers.has(handlerId);\n    \n    this.enabledHandlers.delete(handlerId);\n    handler.config.enabled = false;\n    \n    if (wasEnabled) {\n      this.stats.activeHandlers--;\n      this.logger.info('Handler disabled', { handlerId });\n      this.emit('handlerDisabled', { id: handlerId });\n    }\n\n    return true;\n  }\n\n  /**\n   * Check if handler is enabled\n   */\n  isHandlerEnabled(handlerId) {\n    return this.enabledHandlers.has(handlerId);\n  }\n\n  /**\n   * Register multiple handlers\n   */\n  async registerHandlers(configs) {\n    if (!Array.isArray(configs)) {\n      throw new Error('Configurations must be an array');\n    }\n\n    const results = [];\n    for (const config of configs) {\n      try {\n        const handler = await this.registerHandler(config);\n        results.push({ success: true, id: config.id, handler });\n      } catch (error) {\n        results.push({ success: false, id: config.id, error: error.message });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Discover documents from all enabled handlers\n   */\n  async discoverAll() {\n    const enabledHandlers = this.getEnabledHandlers();\n    const results = [];\n\n    for (const handler of enabledHandlers) {\n      try {\n        const documents = await handler.discover();\n        if (Array.isArray(documents)) {\n          results.push({\n            success: true,\n            handlerId: handler.config?.id,\n            documents: documents\n          });\n          this.stats.discoveredDocuments += documents.length;\n        } else {\n          results.push({\n            success: false,\n            handlerId: handler.config?.id,\n            documents: [],\n            error: 'Handler did not return array of documents'\n          });\n        }\n      } catch (error) {\n        // Log error but continue with other handlers\n        this.logger.error(`Handler discovery failed for ${handler.config?.id}:`, error.message);\n        results.push({\n          success: false,\n          handlerId: handler.config?.id,\n          documents: [],\n          error: error.message\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Cleanup all handlers\n   */\n  async cleanup() {\n    const handlers = Array.from(this.handlers.values());\n    \n    for (const handler of handlers) {\n      try {\n        if (typeof handler.cleanup === 'function') {\n          await handler.cleanup();\n        }\n      } catch (error) {\n        // Log error but continue cleanup\n        this.logger.error(`Error cleaning up handler: ${error.message}`);\n      }\n    }\n\n    this.handlers.clear();\n    this.enabledHandlers.clear();\n    this.stats = {\n      totalHandlers: 0,\n      activeHandlers: 0,\n      discoveredDocuments: 0,\n      processedDocuments: 0\n    };\n\n    this.emit('registryCleanup');\n  }\n\n  /**\n   * Cleanup all handlers (alias for cleanup)\n   */\n  async cleanupAll() {\n    return this.cleanup();\n  }\n\n  /**\n   * Get registry statistics\n   */\n  getStats() {\n    return { ...this.stats };\n  }\n\n  /**\n   * Get detailed statistics (alias for compatibility)\n   */\n  getStatistics() {\n    const handlersByType = {};\n    for (const handler of this.handlers.values()) {\n      const type = handler.config?.type || 'unknown';\n      handlersByType[type] = (handlersByType[type] || 0) + 1;\n    }\n\n    return {\n      totalHandlers: this.handlers.size,\n      enabledHandlers: this.enabledHandlers.size,\n      disabledHandlers: this.handlers.size - this.enabledHandlers.size,\n      handlersByType,\n      ...this.stats\n    };\n  }\n\n  /**\n   * Get handler count\n   */\n  getHandlerCount() {\n    return this.handlers.size;\n  }\n\n  /**\n   * Get enabled handler count\n   */\n  getEnabledHandlerCount() {\n    return this.enabledHandlers.size;\n  }\n\n  /**\n   * Get all handler IDs\n   */\n  getAllHandlerIds() {\n    return Array.from(this.handlers.keys());\n  }\n\n  /**\n   * Update handler configuration\n   */\n  async updateHandlerConfig(handlerId, newConfig) {\n    const handler = this.handlers.get(handlerId);\n    if (!handler) {\n      throw new Error(`Handler ${handlerId} not found`);\n    }\n\n    // Validate new configuration\n    await this.factory.validateConfig(newConfig);\n\n    // Update handler configuration\n    handler.config = { ...handler.config, ...newConfig };\n\n    this.emit('handlerConfigUpdated', { id: handlerId, config: newConfig });\n    \n    return handler;\n  }\n\n  /**\n   * Get handler by type\n   */\n  getHandlersByType(type) {\n    return Array.from(this.handlers.values())\n      .filter(handler => handler.config.type === type);\n  }\n\n  /**\n   * Get handlers by visibility\n   */\n  getHandlersByVisibility(visibility) {\n    return Array.from(this.handlers.values())\n      .filter(handler => handler.config.visibility === visibility);\n  }\n\n  /**\n   * Check if any handlers are registered\n   */\n  hasHandlers() {\n    return this.handlers.size > 0;\n  }\n}\n\nmodule.exports = SourceHandlerRegistry;\n"],"mappings":"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","ignoreList":[]}