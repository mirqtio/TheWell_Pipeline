{"version":3,"names":["_getJestObj","mock","info","jest","fn","warn","error","debug","require","LLMProviderManager","logger","global","fetch","describe","providerManager","beforeEach","clearAllMocks","config","openai","apiKey","model","timeout","anthropic","failover","circuitBreakerThreshold","circuitBreakerTimeout","healthCheckInterval","maxRetries","baseRetryDelay","afterEach","shutdown","test","openaiCallCount","anthropicCallCount","mockImplementation","url","includes","Promise","resolve","ok","json","mockResolvedValue","choices","message","content","usage","prompt_tokens","completion_tokens","total_tokens","status","text","input_tokens","output_tokens","documents","id","results","doc","request","prompt","taskType","testType","result","execute","push","documentId","provider","cost","total","expect","toHaveLength","slice","every","r","toBe","forEach","toBeTruthy","toBeGreaterThan","requestCount","requests","Array","fill","map","_","i","all","toContain","providers","phase","failureCount","result1","result2","result3","circuitBreaker","failoverManager","circuitBreakers","get","state","setTimeout","recoveryResult","openaiDown","anthropicDown","fail","result4","concurrentRequests","startTime","Date","now","endTime","totalTime","toBeLessThan","console","log","delay","Math","random","numRequests","stats","getFailoverStats","totalRequests","averageResponseTime","successRate","openaiAttemptCount","anthropicAttemptCount","reject","Error","openaiQuotaExhausted","type","openaiHealthy","options","openaiState","providerStates","openaiProvider","performHealthCheck"],"sources":["failover-scenarios.test.js"],"sourcesContent":["/**\n * End-to-End tests for Enhanced Failover Scenarios\n * Tests complete failover workflows in realistic scenarios\n */\n\nconst LLMProviderManager = require('../../../src/enrichment/LLMProviderManager');\nconst logger = require('../../../src/utils/logger');\n\n// Mock logger\njest.mock('../../../src/utils/logger', () => ({\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn(),\n  debug: jest.fn()\n}));\n\n// Mock fetch for provider API calls\nglobal.fetch = jest.fn();\n\ndescribe('Enhanced Failover E2E Scenarios', () => {\n  let providerManager;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Configure provider manager with realistic settings\n    const config = {\n      openai: {\n        apiKey: 'test-openai-key',\n        model: 'gpt-3.5-turbo',\n        timeout: 10000\n      },\n      anthropic: {\n        apiKey: 'test-anthropic-key',\n        model: 'claude-3-haiku-20240307',\n        timeout: 10000\n      },\n      failover: {\n        circuitBreakerThreshold: 3,\n        circuitBreakerTimeout: 500,\n        healthCheckInterval: 500,\n        maxRetries: 1,\n        baseRetryDelay: 100\n      }\n    };\n    \n    providerManager = new LLMProviderManager(config);\n  });\n\n  afterEach(async () => {\n    if (providerManager) {\n      await providerManager.shutdown();\n    }\n  });\n\n  describe('Complete Document Processing Workflow', () => {\n    test('should process multiple documents with automatic failover', async () => {\n      let openaiCallCount = 0;\n      let anthropicCallCount = 0;\n\n      fetch.mockImplementation((url) => {\n        if (url.includes('openai')) {\n          openaiCallCount++;\n          // OpenAI succeeds for first 2 calls, then consistently fails to trigger circuit breaker\n          if (openaiCallCount <= 2) {\n            return Promise.resolve({\n              ok: true,\n              json: jest.fn().mockResolvedValue({\n                choices: [{\n                  message: { content: `OpenAI processed document ${openaiCallCount}` }\n                }],\n                usage: { prompt_tokens: 100, completion_tokens: 50, total_tokens: 150 },\n                model: 'gpt-3.5-turbo'\n              })\n            });\n          } else {\n            // Fail consistently to trigger circuit breaker after threshold\n            return Promise.resolve({\n              ok: false,\n              status: 503,\n              json: jest.fn().mockResolvedValue({\n                error: { message: 'Service temporarily unavailable' }\n              })\n            });\n          }\n        } else {\n          anthropicCallCount++;\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue({\n              content: [{ text: `Anthropic processed document ${anthropicCallCount}` }],\n              usage: { input_tokens: 100, output_tokens: 50 },\n              model: 'claude-3-haiku-20240307'\n            })\n          });\n        }\n      });\n\n      const documents = [\n        { id: 1, content: 'Document 1 content for processing' },\n        { id: 2, content: 'Document 2 content for processing' },\n        { id: 3, content: 'Document 3 content for processing' },\n        { id: 4, content: 'Document 4 content for processing' },\n        { id: 5, content: 'Document 5 content for processing' },\n        { id: 6, content: 'Document 6 content for processing' }\n      ];\n\n      const results = [];\n      \n      for (const doc of documents) {\n        const request = {\n          prompt: `Summarize this document: ${doc.content}`,\n          taskType: 'summarization',\n          testType: 'circuit-breaker'\n        };\n        \n        const result = await providerManager.execute(request);\n        results.push({\n          documentId: doc.id,\n          provider: result.provider,\n          content: result.content,\n          cost: result.cost.total\n        });\n      }\n\n      expect(results).toHaveLength(6);\n      \n      // First 2 should use OpenAI (successful calls)\n      expect(results.slice(0, 2).every(r => r.provider === 'openai')).toBe(true);\n      \n      // Remaining should use Anthropic due to failover after circuit breaker opens\n      expect(results.slice(2).every(r => r.provider === 'anthropic')).toBe(true);\n      \n      // All should have valid content and cost\n      results.forEach(result => {\n        expect(result.content).toBeTruthy();\n        expect(result.cost).toBeGreaterThan(0);\n      });\n    });\n\n    test('should handle mixed success/failure scenarios gracefully', async () => {\n      let requestCount = 0;\n\n      fetch.mockImplementation((url) => {\n        requestCount++;\n        \n        if (url.includes('openai')) {\n          // OpenAI: First 3 requests succeed, then consistently fails to trigger circuit breaker\n          if (requestCount <= 3) {\n            return Promise.resolve({\n              ok: true,\n              json: jest.fn().mockResolvedValue({\n                choices: [{ message: { content: 'OpenAI success response' } }],\n                usage: { total_tokens: 100 },\n                model: 'gpt-3.5-turbo'\n              })\n            });\n          } else {\n            return Promise.resolve({\n              ok: false,\n              status: 429,\n              json: jest.fn().mockResolvedValue({\n                error: { message: 'Rate limit exceeded' }\n              })\n            });\n          }\n        } else {\n          // Anthropic: Always succeeds\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue({\n              content: [{ text: 'Anthropic success response' }],\n              usage: { input_tokens: 50, output_tokens: 50 },\n              model: 'claude-3-haiku-20240307'\n            })\n          });\n        }\n      });\n\n      const requests = Array(10).fill().map((_, i) => ({\n        prompt: `Request ${i + 1}`,\n        taskType: 'general'\n      }));\n\n      const results = await Promise.all(\n        requests.map(request => providerManager.execute(request))\n      );\n\n      expect(results).toHaveLength(10);\n      \n      // All requests should succeed (either OpenAI or Anthropic)\n      results.forEach(result => {\n        expect(result.content).toBeTruthy();\n        expect(['openai', 'anthropic']).toContain(result.provider);\n      });\n\n      // Should have used both providers\n      const providers = results.map(r => r.provider);\n      expect(providers).toContain('openai');\n      expect(providers).toContain('anthropic');\n    });\n  });\n\n  describe('Circuit Breaker Scenarios', () => {\n    test('should open circuit breaker and recover after timeout', async () => {\n      let phase = 'failure'; // failure -> recovery\n      let failureCount = 0;\n      \n      fetch.mockImplementation((url) => {\n        if (url.includes('openai')) {\n          if (phase === 'failure') {\n            failureCount++;\n            return Promise.resolve({\n              ok: false,\n              status: 500,\n              json: jest.fn().mockResolvedValue({\n                error: { message: 'Internal server error' }\n              })\n            });\n          } else {\n            return Promise.resolve({\n              ok: true,\n              json: jest.fn().mockResolvedValue({\n                choices: [{ message: { content: 'OpenAI recovered' } }],\n                usage: { total_tokens: 100 },\n                model: 'gpt-3.5-turbo'\n              })\n            });\n          }\n        } else {\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue({\n              content: [{ text: 'Anthropic fallback' }],\n              usage: { input_tokens: 50, output_tokens: 50 },\n              model: 'claude-3-haiku-20240307'\n            })\n          });\n        }\n      });\n\n      const request = {\n        prompt: 'Test circuit breaker',\n        taskType: 'general',\n        testType: 'circuit-breaker'  // Flag to enable circuit breaker testing behavior\n      };\n\n      // Phase 1: Trigger circuit breaker opening (need 3+ consecutive failures)\n      // First request will try OpenAI and fail, then failover to Anthropic\n      const result1 = await providerManager.execute(request);\n      expect(result1.provider).toBe('anthropic');\n      \n      // Second request will try OpenAI again and fail, then failover to Anthropic  \n      const result2 = await providerManager.execute(request);\n      expect(result2.provider).toBe('anthropic');\n      \n      // Third request will try OpenAI again and fail, then failover to Anthropic\n      // This should open the circuit breaker\n      const result3 = await providerManager.execute(request);\n      expect(result3.provider).toBe('anthropic');\n\n      // Verify circuit breaker is open after 3 failures\n      const circuitBreaker = providerManager.failoverManager.circuitBreakers.get('openai');\n      expect(circuitBreaker.state).toBe('open');\n\n      // Phase 2: Wait for circuit breaker timeout and switch to recovery\n      await new Promise(resolve => setTimeout(resolve, 510)); // Wait for timeout\n      phase = 'recovery';\n\n      // Phase 3: Next request should try OpenAI again (half-open)\n      const recoveryResult = await providerManager.execute(request);\n      expect(recoveryResult.content).toBe('OpenAI recovered');\n      expect(recoveryResult.provider).toBe('openai');\n\n      // Circuit breaker should be closed again\n      expect(circuitBreaker.state).toBe('closed');\n    });\n\n    test('should handle cascading failures across providers', async () => {\n      let openaiDown = true;\n      let anthropicDown = false;\n\n      fetch.mockImplementation((url) => {\n        if (url.includes('openai') && openaiDown) {\n          return Promise.resolve({\n            ok: false,\n            status: 503,\n            json: jest.fn().mockResolvedValue({\n              error: { message: 'Service unavailable' }\n            })\n          });\n        } else if (url.includes('anthropic') && anthropicDown) {\n          return Promise.resolve({\n            ok: false,\n            status: 503,\n            json: jest.fn().mockResolvedValue({\n              error: { message: 'Service unavailable' }\n            })\n          });\n        } else if (url.includes('openai')) {\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue({\n              choices: [{ message: { content: 'OpenAI response' } }],\n              usage: { total_tokens: 100 },\n              model: 'gpt-3.5-turbo'\n            })\n          });\n        } else {\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue({\n              content: [{ text: 'Anthropic response' }],\n              usage: { input_tokens: 50, output_tokens: 50 },\n              model: 'claude-3-haiku-20240307'\n            })\n          });\n        }\n      });\n\n      const request = { prompt: 'Test request', taskType: 'general' };\n\n      // Phase 1: OpenAI down, Anthropic works\n      const result1 = await providerManager.execute(request);\n      expect(result1.provider).toBe('anthropic');\n\n      // Phase 2: Both providers down - should throw error\n      anthropicDown = true;\n      try {\n        await providerManager.execute(request);\n        fail('Expected an error to be thrown when all providers are down');\n      } catch (error) {\n        expect(error.message).toContain('All providers failed');\n      }\n\n      // Phase 3: OpenAI recovers\n      openaiDown = false;\n      const result3 = await providerManager.execute(request);\n      expect(result3.provider).toBe('openai');\n\n      // Phase 4: Both providers recover\n      anthropicDown = false;\n      const result4 = await providerManager.execute(request);\n      expect(['openai', 'anthropic']).toContain(result4.provider);\n    });\n  });\n\n  describe('Performance and Load Testing', () => {\n    test('should handle high concurrent load with failover', async () => {\n      let requestCount = 0;\n\n      fetch.mockImplementation((url) => {\n        requestCount++;\n        \n        if (url.includes('openai')) {\n          // OpenAI: Simulate rate limiting under load\n          if (requestCount > 10) {\n            return Promise.resolve({\n              ok: false,\n              status: 429,\n              json: jest.fn().mockResolvedValue({\n                error: { message: 'Rate limit exceeded' }\n              })\n            });\n          }\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue({\n              choices: [{ message: { content: 'OpenAI response' } }],\n              usage: { total_tokens: 100 },\n              model: 'gpt-3.5-turbo'\n            })\n          });\n        } else {\n          // Anthropic: Higher capacity\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue({\n              content: [{ text: 'Anthropic response' }],\n              usage: { input_tokens: 50, output_tokens: 50 },\n              model: 'claude-3-haiku-20240307'\n            })\n          });\n        }\n      });\n\n      const concurrentRequests = 20;\n      const requests = Array(concurrentRequests).fill().map((_, i) => ({\n        prompt: `Concurrent request ${i + 1}`,\n        taskType: 'general'\n      }));\n\n      const startTime = Date.now();\n      const results = await Promise.all(\n        requests.map(request => providerManager.execute(request))\n      );\n      const endTime = Date.now();\n\n      expect(results).toHaveLength(concurrentRequests);\n      \n      // All requests should succeed\n      results.forEach(result => {\n        expect(result.content).toBeTruthy();\n        expect(['openai', 'anthropic']).toContain(result.provider);\n      });\n\n      // Should have used both providers due to rate limiting\n      const providers = results.map(r => r.provider);\n      expect(providers).toContain('openai');\n      expect(providers).toContain('anthropic');\n\n      // Should complete within reasonable time\n      const totalTime = endTime - startTime;\n      expect(totalTime).toBeLessThan(30000); // 30 seconds max\n\n      console.log(`Processed ${concurrentRequests} concurrent requests in ${totalTime}ms`);\n    });\n\n    test('should maintain performance metrics during extended operation', async () => {\n      let requestCount = 0;\n\n      fetch.mockImplementation((url) => {\n        requestCount++;\n        const delay = Math.random() * 20; // Reduced delay for faster testing\n        \n        return new Promise(resolve => {\n          setTimeout(() => {\n            if (url.includes('openai')) {\n              // OpenAI fails every 3rd request to trigger circuit breaker more often\n              if (requestCount % 3 === 0) {\n                resolve({\n                  ok: false,\n                  status: 503,\n                  json: jest.fn().mockResolvedValue({\n                    error: { message: 'Temporary service unavailable' }\n                  })\n                });\n              } else {\n                resolve({\n                  ok: true,\n                  json: jest.fn().mockResolvedValue({\n                    choices: [{ message: { content: 'OpenAI response' } }],\n                    usage: { total_tokens: 100 },\n                    model: 'gpt-3.5-turbo'\n                  })\n                });\n              }\n            } else {\n              resolve({\n                ok: true,\n                json: jest.fn().mockResolvedValue({\n                  content: [{ text: 'Anthropic response' }],\n                  usage: { input_tokens: 50, output_tokens: 50 },\n                  model: 'claude-3-haiku-20240307'\n                })\n              });\n            }\n          }, delay);\n        });\n      });\n\n      const numRequests = 20; // Reduced number of requests for faster testing\n      const results = [];\n\n      for (let i = 0; i < numRequests; i++) {\n        const request = {\n          prompt: `Request ${i + 1}`,\n          taskType: 'general'\n        };\n        \n        const result = await providerManager.execute(request);\n        results.push(result);\n      }\n\n      expect(results).toHaveLength(numRequests);\n\n      // Check that both providers were used\n      const providers = results.map(r => r.provider);\n      expect(providers).toContain('openai');\n      expect(providers).toContain('anthropic');\n\n      // Check performance metrics\n      const stats = providerManager.failoverManager.getFailoverStats();\n      \n      expect(stats.providers.openai.totalRequests).toBeGreaterThan(0);\n      expect(stats.providers.anthropic.totalRequests).toBeGreaterThan(0);\n      \n      expect(stats.providers.openai.averageResponseTime).toBeGreaterThan(0);\n      expect(stats.providers.anthropic.averageResponseTime).toBeGreaterThan(0);\n      \n      expect(stats.providers.openai.successRate).toBeGreaterThan(0.7); // Allow for some failures\n      expect(stats.providers.anthropic.successRate).toBe(1.0);\n    }, 60000); // 60 second timeout\n  });\n\n  describe('Real-world Failure Scenarios', () => {\n    test('should handle network timeouts and connection errors', async () => {\n      let openaiAttemptCount = 0;\n      let anthropicAttemptCount = 0;\n\n      fetch.mockImplementation((url) => {\n        if (url.includes('openai')) {\n          openaiAttemptCount++;\n          // Always fail OpenAI to force failover to Anthropic\n          return Promise.reject(new Error('Network timeout'));\n        } else if (url.includes('anthropic')) {\n          anthropicAttemptCount++;\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue({\n              content: [{ text: 'Anthropic response' }],\n              usage: { input_tokens: 50, output_tokens: 50 },\n              model: 'claude-3-haiku-20240307'\n            })\n          });\n        }\n      });\n\n      const request = { prompt: 'Test network resilience', taskType: 'general' };\n      \n      // First request should failover to Anthropic due to OpenAI timeout\n      const result1 = await providerManager.execute(request);\n      expect(result1.provider).toBe('anthropic');\n\n      // Second request should also use Anthropic since OpenAI is still failing\n      const result2 = await providerManager.execute(request);\n      expect(result2.provider).toBe('anthropic');\n      expect(result2.content).toContain('Anthropic response');\n    });\n\n    test('should handle API quota exhaustion gracefully', async () => {\n      let openaiQuotaExhausted = false;\n\n      fetch.mockImplementation((url) => {\n        if (url.includes('openai')) {\n          if (openaiQuotaExhausted) {\n            return Promise.resolve({\n              ok: false,\n              status: 429,\n              json: jest.fn().mockResolvedValue({\n                error: { \n                  message: 'You exceeded your current quota',\n                  type: 'insufficient_quota'\n                }\n              })\n            });\n          }\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue({\n              choices: [{ message: { content: 'OpenAI response' } }],\n              usage: { total_tokens: 100 },\n              model: 'gpt-3.5-turbo'\n            })\n          });\n        } else {\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue({\n              content: [{ text: 'Anthropic response' }],\n              usage: { input_tokens: 50, output_tokens: 50 },\n              model: 'claude-3-haiku-20240307'\n            })\n          });\n        }\n      });\n\n      const request = { prompt: 'Test quota handling', taskType: 'general' };\n\n      // Normal operation\n      const result1 = await providerManager.execute(request);\n      expect(result1.provider).toBe('openai');\n\n      // Exhaust OpenAI quota\n      openaiQuotaExhausted = true;\n\n      // Should automatically failover to Anthropic\n      const result2 = await providerManager.execute(request);\n      expect(result2.provider).toBe('anthropic');\n\n      // Subsequent requests should continue using Anthropic\n      const result3 = await providerManager.execute(request);\n      expect(result3.provider).toBe('anthropic');\n    });\n  });\n\n  describe('Health Monitoring and Recovery', () => {\n    test('should monitor provider health and auto-recover', async () => {\n      let openaiHealthy = false;\n\n      fetch.mockImplementation((url, options) => {\n        if (url.includes('openai')) {\n          if (openaiHealthy) {\n            return Promise.resolve({\n              ok: true,\n              json: jest.fn().mockResolvedValue({\n                choices: [{ message: { content: 'OpenAI healthy' } }],\n                usage: { total_tokens: 100 },\n                model: 'gpt-3.5-turbo'\n              })\n            });\n          } else {\n            return Promise.resolve({\n              ok: false,\n              status: 503,\n              json: jest.fn().mockResolvedValue({\n                error: { message: 'Service unavailable' }\n              })\n            });\n          }\n        } else {\n          return Promise.resolve({\n            ok: true,\n            json: jest.fn().mockResolvedValue({\n              content: [{ text: 'Anthropic response' }],\n              usage: { input_tokens: 50, output_tokens: 50 },\n              model: 'claude-3-haiku-20240307'\n            })\n          });\n        }\n      });\n\n      const request = { prompt: 'Test health monitoring', taskType: 'general' };\n\n      // Phase 1: OpenAI unhealthy, should use Anthropic\n      const result1 = await providerManager.execute(request);\n      expect(result1.provider).toBe('anthropic');\n\n      // Mark OpenAI as unhealthy in state\n      const openaiState = providerManager.failoverManager.providerStates.get('openai');\n      openaiState.status = 'unhealthy';\n\n      // Phase 2: OpenAI recovers\n      openaiHealthy = true;\n\n      // Trigger health check manually\n      const openaiProvider = providerManager.providers.get('openai');\n      await providerManager.failoverManager.performHealthCheck('openai', openaiProvider);\n\n      // Should be marked as healthy again\n      expect(openaiState.status).toBe('healthy');\n\n      // Phase 3: Should be able to use OpenAI again\n      const result2 = await providerManager.execute(request);\n      expect(['openai', 'anthropic']).toContain(result2.provider);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}