{"version":3,"names":["EventEmitter","require","SourceHandlerFactory","SourceHandlerRegistry","VisibilityManager","VisibilityDatabase","SOURCE_TYPES","logger","IngestionEngine","constructor","options","maxConcurrentSources","maxConcurrentDocuments","retryAttempts","retryDelay","enableVisibilityManagement","batchSize","maxRetries","settings","factory","registry","sources","Map","isInitialized","isShuttingDown","visibilityDatabase","database","visibilityManager","visibility","on","data","emit","error","type","handlerId","initialize","_registerBuiltInHandlers","shutdown","cleanup","clear","addSource","sourceConfig","_validateSourceConfig","has","id","Error","handler","registerHandler","set","config","addedAt","Date","removeSource","sourceId","unregisterHandler","delete","updateSource","newConfig","getSource","get","getSources","Array","from","values","map","source","discoverDocuments","documents","discover","length","processDocument","document","extractedContent","extract","transformedDocument","transform","metadata","processedAt","processAllDocuments","results","processed","failed","startTime","processedDoc","push","message","endTime","duration","processAllSources","sourceIds","keys","allResults","getStatistics","stats","totalSources","size","sourceTypes","registryStats","updateSources","newSources","info","sourceCount","newSourceIds","Set","s","currentSourceIds","updatedSources","updateSettings","newSettings","previousSettings","getActiveSources","filter","enabled","setDocumentVisibility","documentId","userId","reason","getDocumentVisibility","checkDocumentAccess","accessLevel","hasAccess","checkAccess","logDocumentAccess","timestamp","toISOString","bulkUpdateVisibility","updates","getPendingApprovals","filters","approveVisibilityChange","approvalId","approvedBy","notes","rejectVisibilityChange","rejectedBy","applyVisibilityRules","documentMetadata","suggestedVisibility","requiresApproval","_requiresApproval","ruleApplied","addVisibilityRule","ruleId","rule","removeVisibilityRule","getVisibilityAuditLog","limit","Object","includes","STATIC","basePath","StaticSourceHandler","SemiStaticSourceHandler","DynamicConsistentSourceHandler","DynamicUnstructuredSourceHandler","SEMI_STATIC","DYNAMIC_CONSISTENT","DYNAMIC_UNSTRUCTURED","module","exports"],"sources":["IngestionEngine.js"],"sourcesContent":["const EventEmitter = require('events');\nconst SourceHandlerFactory = require('./handlers/SourceHandlerFactory');\nconst SourceHandlerRegistry = require('./handlers/SourceHandlerRegistry');\nconst VisibilityManager = require('./VisibilityManager');\nconst VisibilityDatabase = require('./VisibilityDatabase');\nconst { SOURCE_TYPES } = require('./types');\nconst logger = require('../utils/logger');\n\n/**\n * Main ingestion engine that orchestrates document discovery and processing\n * across multiple source types and handlers\n */\nclass IngestionEngine extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    \n    this.options = {\n      maxConcurrentSources: 5,\n      maxConcurrentDocuments: 10,\n      retryAttempts: 3,\n      retryDelay: 1000,\n      enableVisibilityManagement: true,\n      batchSize: 50,\n      maxRetries: 3,\n      ...options\n    };\n\n    // Initialize settings for easy access\n    this.settings = this.options;\n\n    this.factory = new SourceHandlerFactory();\n    this.registry = new SourceHandlerRegistry(this.factory);\n    this.sources = new Map();\n    this.isInitialized = false;\n    this.isShuttingDown = false;\n\n    // Initialize visibility management if enabled\n    if (this.options.enableVisibilityManagement) {\n      this.visibilityDatabase = new VisibilityDatabase(this.options.database);\n      this.visibilityManager = new VisibilityManager(this.options.visibility);\n      \n      // Connect visibility manager events\n      this.visibilityManager.on('visibilityChanged', (data) => {\n        this.emit('documentVisibilityChanged', data);\n      });\n      \n      this.visibilityManager.on('approvalRequested', (data) => {\n        this.emit('visibilityApprovalRequested', data);\n      });\n      \n      this.visibilityManager.on('error', (error) => {\n        this.emit('error', { type: 'visibility_error', error });\n      });\n    }\n\n    // Register event handlers\n    this.registry.on('handlerRegistered', (handlerId) => {\n      this.emit('sourceAdded', handlerId);\n    });\n\n    this.registry.on('handlerUnregistered', (handlerId) => {\n      this.emit('sourceRemoved', handlerId);\n    });\n\n    this.registry.on('error', (error) => {\n      this.emit('error', error);\n    });\n  }\n\n  /**\n   * Initialize the ingestion engine\n   */\n  async initialize() {\n    if (this.isInitialized) {\n      return;\n    }\n\n    try {\n      // Initialize visibility database if enabled\n      if (this.options.enableVisibilityManagement && this.visibilityDatabase) {\n        await this.visibilityDatabase.initialize();\n      }\n      \n      // Register built-in source handlers\n      await this._registerBuiltInHandlers();\n      \n      this.isInitialized = true;\n      this.emit('initialized');\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Shutdown the ingestion engine\n   */\n  async shutdown() {\n    if (this.isShuttingDown) {\n      return;\n    }\n\n    this.isShuttingDown = true;\n\n    try {\n      // Cleanup all registered handlers\n      await this.registry.cleanup();\n      \n      // Clear sources\n      this.sources.clear();\n      \n      this.isInitialized = false;\n      this.emit('shutdown');\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    } finally {\n      this.isShuttingDown = false;\n    }\n  }\n\n  /**\n   * Add a new source configuration\n   */\n  async addSource(sourceConfig) {\n    this._validateSourceConfig(sourceConfig);\n\n    if (this.sources.has(sourceConfig.id)) {\n      throw new Error(`Source with id '${sourceConfig.id}' already exists`);\n    }\n\n    try {\n      // Register handler with registry\n      const handler = await this.registry.registerHandler(sourceConfig);\n      \n      // Store source configuration\n      this.sources.set(sourceConfig.id, {\n        config: sourceConfig,\n        handler: handler,\n        addedAt: new Date()\n      });\n\n      this.emit('sourceAdded', sourceConfig.id);\n      return handler;\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Remove a source\n   */\n  async removeSource(sourceId) {\n    if (!this.sources.has(sourceId)) {\n      throw new Error(`Source with id '${sourceId}' not found`);\n    }\n\n    try {\n      await this.registry.unregisterHandler(sourceId);\n      this.sources.delete(sourceId);\n      \n      this.emit('sourceRemoved', sourceId);\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update source configuration\n   */\n  async updateSource(sourceId, newConfig) {\n    this._validateSourceConfig(newConfig);\n\n    if (!this.sources.has(sourceId)) {\n      throw new Error(`Source with id '${sourceId}' not found`);\n    }\n\n    try {\n      // Remove old source\n      await this.removeSource(sourceId);\n      \n      // Add updated source\n      await this.addSource(newConfig);\n      \n      this.emit('sourceUpdated', sourceId);\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get source by ID\n   */\n  getSource(sourceId) {\n    return this.sources.get(sourceId);\n  }\n\n  /**\n   * Get all sources\n   */\n  getSources() {\n    return Array.from(this.sources.values()).map(source => source.config);\n  }\n\n  /**\n   * Discover documents from a specific source\n   */\n  async discoverDocuments(sourceId) {\n    const source = this.sources.get(sourceId);\n    if (!source) {\n      throw new Error(`Source with id '${sourceId}' not found`);\n    }\n\n    try {\n      this.emit('discoveryStarted', sourceId);\n      const documents = await source.handler.discover();\n      this.emit('discoveryCompleted', sourceId, documents.length);\n      return documents;\n    } catch (error) {\n      this.emit('discoveryFailed', sourceId, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process a single document from a source\n   */\n  async processDocument(sourceId, document) {\n    const source = this.sources.get(sourceId);\n    if (!source) {\n      throw new Error(`Source with id '${sourceId}' not found`);\n    }\n\n    try {\n      this.emit('documentProcessingStarted', sourceId, document.id);\n      \n      // Extract content\n      const extractedContent = await source.handler.extract(document);\n      \n      // Transform content\n      const transformedDocument = await source.handler.transform(extractedContent);\n      \n      // Add source metadata\n      transformedDocument.metadata = {\n        ...transformedDocument.metadata,\n        sourceId: sourceId,\n        processedAt: new Date()\n      };\n\n      this.emit('documentProcessingCompleted', sourceId, document.id);\n      return transformedDocument;\n    } catch (error) {\n      this.emit('documentProcessingFailed', sourceId, document.id, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process all documents from a specific source\n   */\n  async processAllDocuments(sourceId) {\n    const documents = await this.discoverDocuments(sourceId);\n    \n    const results = {\n      sourceId: sourceId,\n      processed: [],\n      failed: [],\n      startTime: new Date()\n    };\n\n    this.emit('batchProcessingStarted', sourceId, documents.length);\n\n    for (const document of documents) {\n      try {\n        const processedDoc = await this.processDocument(sourceId, document);\n        results.processed.push(processedDoc);\n      } catch (error) {\n        results.failed.push({\n          document: document,\n          error: error.message\n        });\n      }\n    }\n\n    results.endTime = new Date();\n    results.duration = results.endTime - results.startTime;\n\n    this.emit('batchProcessingCompleted', sourceId, results);\n    return results;\n  }\n\n  /**\n   * Process all documents from all sources\n   */\n  async processAllSources() {\n    const sourceIds = Array.from(this.sources.keys());\n    const allResults = [];\n\n    this.emit('fullProcessingStarted', sourceIds.length);\n\n    for (const sourceId of sourceIds) {\n      try {\n        const results = await this.processAllDocuments(sourceId);\n        allResults.push(results);\n      } catch (error) {\n        allResults.push({\n          sourceId: sourceId,\n          processed: [],\n          failed: [{ error: error.message }],\n          startTime: new Date(),\n          endTime: new Date()\n        });\n      }\n    }\n\n    this.emit('fullProcessingCompleted', allResults);\n    return allResults;\n  }\n\n  /**\n   * Get engine statistics\n   */\n  getStatistics() {\n    const stats = {\n      totalSources: this.sources.size,\n      sourceTypes: {},\n      isInitialized: this.isInitialized,\n      registryStats: this.registry.getStatistics()\n    };\n\n    // Count sources by type\n    for (const source of this.sources.values()) {\n      const type = source.config.type;\n      stats.sourceTypes[type] = (stats.sourceTypes[type] || 0) + 1;\n    }\n\n    return stats;\n  }\n\n  /**\n   * Update sources configuration dynamically\n   */\n  async updateSources(newSources) {\n    logger.info('Updating sources configuration', { sourceCount: newSources.length });\n    \n    try {\n      // Remove sources that are no longer in the configuration\n      const newSourceIds = new Set(newSources.map(s => s.id));\n      const currentSourceIds = Array.from(this.sources.keys());\n      \n      for (const sourceId of currentSourceIds) {\n        if (!newSourceIds.has(sourceId)) {\n          await this.removeSource(sourceId);\n          logger.info('Removed source from configuration', { sourceId });\n        }\n      }\n      \n      // Add or update sources\n      for (const sourceConfig of newSources) {\n        if (this.sources.has(sourceConfig.id)) {\n          // Update existing source\n          await this.updateSource(sourceConfig.id, sourceConfig);\n          logger.info('Updated existing source', { sourceId: sourceConfig.id });\n        } else {\n          // Add new source\n          await this.addSource(sourceConfig);\n          logger.info('Added new source', { sourceId: sourceConfig.id });\n        }\n      }\n      \n      this.emit('sourcesUpdated', { \n        totalSources: this.sources.size,\n        updatedSources: newSources.map(s => s.id)\n      });\n      \n    } catch (error) {\n      logger.error('Failed to update sources configuration', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Update ingestion settings dynamically\n   */\n  updateSettings(newSettings) {\n    logger.info('Updating ingestion settings', { newSettings });\n    \n    const previousSettings = { ...this.options };\n    \n    // Update options with new settings\n    this.options = {\n      ...this.options,\n      ...newSettings\n    };\n    \n    // Store settings for easy access\n    this.settings = this.options;\n    \n    this.emit('settingsUpdated', {\n      previousSettings,\n      newSettings: this.options\n    });\n    \n    logger.info('Ingestion settings updated successfully');\n  }\n\n  /**\n   * Get current active sources\n   */\n  getActiveSources() {\n    return Array.from(this.sources.values()).filter(source => source.enabled !== false);\n  }\n\n  /**\n   * Document Visibility Management Methods\n   */\n\n  /**\n   * Set document visibility\n   */\n  async setDocumentVisibility(documentId, visibility, userId, reason = null, metadata = {}) {\n    if (!this.options.enableVisibilityManagement) {\n      throw new Error('Visibility management is not enabled');\n    }\n\n    try {\n      return await this.visibilityManager.setDocumentVisibility(\n        documentId, \n        visibility, \n        { userId, reason, ...metadata }\n      );\n    } catch (error) {\n      this.emit('error', { type: 'visibility_set_failed', documentId, error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Get document visibility\n   */\n  async getDocumentVisibility(documentId) {\n    if (!this.options.enableVisibilityManagement) {\n      return { visibility: 'internal', documentId }; // Default fallback\n    }\n\n    try {\n      return await this.visibilityManager.getDocumentVisibility(documentId);\n    } catch (error) {\n      this.emit('error', { type: 'visibility_get_failed', documentId, error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Check if user has access to document\n   */\n  async checkDocumentAccess(documentId, userId, accessLevel = 'read') {\n    if (!this.options.enableVisibilityManagement) {\n      return true; // Default allow if visibility management disabled\n    }\n\n    try {\n      const hasAccess = await this.visibilityManager.checkAccess(documentId, userId, accessLevel);\n      \n      // Log access attempt\n      if (this.visibilityDatabase) {\n        await this.visibilityDatabase.logDocumentAccess(\n          documentId, \n          userId, \n          accessLevel, \n          hasAccess,\n          { timestamp: new Date().toISOString() }\n        );\n      }\n      \n      return hasAccess;\n    } catch (error) {\n      this.emit('error', { type: 'access_check_failed', documentId, userId, error: error.message });\n      return false; // Deny access on error\n    }\n  }\n\n  /**\n   * Bulk update document visibilities\n   */\n  async bulkUpdateVisibility(updates, userId, reason = 'Bulk update') {\n    if (!this.options.enableVisibilityManagement) {\n      throw new Error('Visibility management is not enabled');\n    }\n\n    try {\n      return await this.visibilityManager.bulkUpdateVisibility(\n        updates, \n        { userId, reason }\n      );\n    } catch (error) {\n      this.emit('error', { type: 'bulk_visibility_update_failed', error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Get pending visibility approvals\n   */\n  async getPendingApprovals(filters = {}) {\n    if (!this.options.enableVisibilityManagement) {\n      return [];\n    }\n\n    try {\n      return await this.visibilityManager.getPendingApprovals(filters);\n    } catch (error) {\n      this.emit('error', { type: 'get_pending_approvals_failed', error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Approve visibility change\n   */\n  async approveVisibilityChange(approvalId, approvedBy, notes = '') {\n    if (!this.options.enableVisibilityManagement) {\n      throw new Error('Visibility management is not enabled');\n    }\n\n    try {\n      return await this.visibilityManager.approveVisibilityChange(approvalId, approvedBy, notes);\n    } catch (error) {\n      this.emit('error', { type: 'approval_failed', approvalId, error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Reject visibility change\n   */\n  async rejectVisibilityChange(approvalId, rejectedBy, reason = '') {\n    if (!this.options.enableVisibilityManagement) {\n      throw new Error('Visibility management is not enabled');\n    }\n\n    try {\n      return await this.visibilityManager.rejectVisibilityChange(approvalId, rejectedBy, reason);\n    } catch (error) {\n      this.emit('error', { type: 'rejection_failed', approvalId, error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Apply visibility rules to document\n   */\n  async applyVisibilityRules(documentId, documentMetadata) {\n    if (!this.options.enableVisibilityManagement) {\n      return 'internal'; // Default visibility\n    }\n\n    try {\n      const suggestedVisibility = await this.visibilityManager.applyVisibilityRules(\n        documentId, \n        documentMetadata\n      );\n      \n      // Auto-apply if no approval required\n      const requiresApproval = this.visibilityManager._requiresApproval(suggestedVisibility);\n      if (!requiresApproval) {\n        await this.setDocumentVisibility(\n          documentId, \n          suggestedVisibility, \n          'system', \n          'Auto-applied via visibility rules',\n          { ruleApplied: true, documentMetadata }\n        );\n      }\n      \n      return suggestedVisibility;\n    } catch (error) {\n      this.emit('error', { type: 'rule_application_failed', documentId, error: error.message });\n      return 'internal'; // Fallback to default\n    }\n  }\n\n  /**\n   * Add visibility rule\n   */\n  addVisibilityRule(ruleId, rule) {\n    if (!this.options.enableVisibilityManagement) {\n      throw new Error('Visibility management is not enabled');\n    }\n\n    try {\n      return this.visibilityManager.addVisibilityRule(ruleId, rule);\n    } catch (error) {\n      this.emit('error', { type: 'add_rule_failed', ruleId, error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Remove visibility rule\n   */\n  removeVisibilityRule(ruleId) {\n    if (!this.options.enableVisibilityManagement) {\n      throw new Error('Visibility management is not enabled');\n    }\n\n    try {\n      return this.visibilityManager.removeVisibilityRule(ruleId);\n    } catch (error) {\n      this.emit('error', { type: 'remove_rule_failed', ruleId, error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Get visibility audit log for document\n   */\n  async getVisibilityAuditLog(documentId, limit = 50) {\n    if (!this.options.enableVisibilityManagement || !this.visibilityDatabase) {\n      return [];\n    }\n\n    try {\n      return await this.visibilityDatabase.getVisibilityAuditLog(documentId, limit);\n    } catch (error) {\n      this.emit('error', { type: 'audit_log_failed', documentId, error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Validate source configuration\n   */\n  _validateSourceConfig(config) {\n    if (!config) {\n      throw new Error('Source configuration is required');\n    }\n\n    if (!config.id) {\n      throw new Error('Source configuration must have an id');\n    }\n\n    if (!config.type) {\n      throw new Error('Source configuration must have a type');\n    }\n\n    if (!Object.values(SOURCE_TYPES).includes(config.type)) {\n      throw new Error(`Unsupported source type: ${config.type}`);\n    }\n\n    if (!config.config) {\n      throw new Error('Source configuration must have a config object');\n    }\n\n    // Type-specific validation\n    if (config.type === SOURCE_TYPES.STATIC) {\n      if (!config.config.basePath) {\n        throw new Error('Static source requires basePath in config');\n      }\n      if (typeof config.config.basePath !== 'string') {\n        throw new Error('Static source basePath must be a string');\n      }\n    }\n  }\n\n  /**\n   * Register built-in source handlers\n   */\n  async _registerBuiltInHandlers() {\n    const StaticSourceHandler = require('./handlers/StaticSourceHandler');\n    const SemiStaticSourceHandler = require('./handlers/SemiStaticSourceHandler');\n    const DynamicConsistentSourceHandler = require('./handlers/DynamicConsistentSourceHandler');\n    const DynamicUnstructuredSourceHandler = require('./handlers/DynamicUnstructuredSourceHandler');\n\n    // Register handlers with factory\n    this.factory.registerHandler(SOURCE_TYPES.STATIC, StaticSourceHandler, true);\n    this.factory.registerHandler(SOURCE_TYPES.SEMI_STATIC, SemiStaticSourceHandler, true);\n    this.factory.registerHandler(SOURCE_TYPES.DYNAMIC_CONSISTENT, DynamicConsistentSourceHandler, true);\n    this.factory.registerHandler(SOURCE_TYPES.DYNAMIC_UNSTRUCTURED, DynamicUnstructuredSourceHandler, true);\n  }\n}\n\nmodule.exports = IngestionEngine;\n"],"mappings":"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","ignoreList":[]}