ddf2079626a31299578dc15a6810656f
/**
 * Logger utility for TheWell Pipeline
 * Provides structured logging with different levels
 */

const LOG_LEVELS = {
  ERROR: 0,
  WARN: 1,
  INFO: 2,
  DEBUG: 3
};
class Logger {
  constructor(options = {}) {
    this.level = options.level || process.env.LOG_LEVEL || 'INFO';
    this.service = options.service || 'thewell-pipeline';
    this.enableConsole = options.enableConsole !== false;
  }
  _shouldLog(level) {
    return LOG_LEVELS[level.toUpperCase()] <= LOG_LEVELS[this.level.toUpperCase()];
  }
  _formatMessage(level, message, meta = {}) {
    const timestamp = new Date().toISOString();
    const logEntry = {
      timestamp,
      level: level.toUpperCase(),
      service: this.service,
      message,
      ...meta
    };
    if (this.enableConsole) {
      const colorMap = {
        ERROR: '\x1b[31m',
        // Red
        WARN: '\x1b[33m',
        // Yellow
        INFO: '\x1b[36m',
        // Cyan
        DEBUG: '\x1b[37m' // White
      };
      const resetColor = '\x1b[0m';
      const color = colorMap[level.toUpperCase()] || '';
      console.log(`${color}[${timestamp}] ${level.toUpperCase()}: ${message}${resetColor}`, meta);
    }
    return logEntry;
  }
  error(message, meta = {}) {
    if (this._shouldLog('ERROR')) {
      return this._formatMessage('ERROR', message, meta);
    }
  }
  warn(message, meta = {}) {
    if (this._shouldLog('WARN')) {
      return this._formatMessage('WARN', message, meta);
    }
  }
  info(message, meta = {}) {
    if (this._shouldLog('INFO')) {
      return this._formatMessage('INFO', message, meta);
    }
  }
  debug(message, meta = {}) {
    if (this._shouldLog('DEBUG')) {
      return this._formatMessage('DEBUG', message, meta);
    }
  }
}

// Create default logger instance
const logger = new Logger();
module.exports = logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMT0dfTEVWRUxTIiwiRVJST1IiLCJXQVJOIiwiSU5GTyIsIkRFQlVHIiwiTG9nZ2VyIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibGV2ZWwiLCJwcm9jZXNzIiwiZW52IiwiTE9HX0xFVkVMIiwic2VydmljZSIsImVuYWJsZUNvbnNvbGUiLCJfc2hvdWxkTG9nIiwidG9VcHBlckNhc2UiLCJfZm9ybWF0TWVzc2FnZSIsIm1lc3NhZ2UiLCJtZXRhIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwibG9nRW50cnkiLCJjb2xvck1hcCIsInJlc2V0Q29sb3IiLCJjb2xvciIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsIndhcm4iLCJpbmZvIiwiZGVidWciLCJsb2dnZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsibG9nZ2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTG9nZ2VyIHV0aWxpdHkgZm9yIFRoZVdlbGwgUGlwZWxpbmVcbiAqIFByb3ZpZGVzIHN0cnVjdHVyZWQgbG9nZ2luZyB3aXRoIGRpZmZlcmVudCBsZXZlbHNcbiAqL1xuXG5jb25zdCBMT0dfTEVWRUxTID0ge1xuICBFUlJPUjogMCxcbiAgV0FSTjogMSxcbiAgSU5GTzogMixcbiAgREVCVUc6IDNcbn07XG5cbmNsYXNzIExvZ2dlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMubGV2ZWwgPSBvcHRpb25zLmxldmVsIHx8IHByb2Nlc3MuZW52LkxPR19MRVZFTCB8fCAnSU5GTyc7XG4gICAgdGhpcy5zZXJ2aWNlID0gb3B0aW9ucy5zZXJ2aWNlIHx8ICd0aGV3ZWxsLXBpcGVsaW5lJztcbiAgICB0aGlzLmVuYWJsZUNvbnNvbGUgPSBvcHRpb25zLmVuYWJsZUNvbnNvbGUgIT09IGZhbHNlO1xuICB9XG5cbiAgX3Nob3VsZExvZyhsZXZlbCkge1xuICAgIHJldHVybiBMT0dfTEVWRUxTW2xldmVsLnRvVXBwZXJDYXNlKCldIDw9IExPR19MRVZFTFNbdGhpcy5sZXZlbC50b1VwcGVyQ2FzZSgpXTtcbiAgfVxuXG4gIF9mb3JtYXRNZXNzYWdlKGxldmVsLCBtZXNzYWdlLCBtZXRhID0ge30pIHtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgY29uc3QgbG9nRW50cnkgPSB7XG4gICAgICB0aW1lc3RhbXAsXG4gICAgICBsZXZlbDogbGV2ZWwudG9VcHBlckNhc2UoKSxcbiAgICAgIHNlcnZpY2U6IHRoaXMuc2VydmljZSxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICAuLi5tZXRhXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmVuYWJsZUNvbnNvbGUpIHtcbiAgICAgIGNvbnN0IGNvbG9yTWFwID0ge1xuICAgICAgICBFUlJPUjogJ1xceDFiWzMxbScsIC8vIFJlZFxuICAgICAgICBXQVJOOiAnXFx4MWJbMzNtJywgIC8vIFllbGxvd1xuICAgICAgICBJTkZPOiAnXFx4MWJbMzZtJywgIC8vIEN5YW5cbiAgICAgICAgREVCVUc6ICdcXHgxYlszN20nICAvLyBXaGl0ZVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlc2V0Q29sb3IgPSAnXFx4MWJbMG0nO1xuICAgICAgY29uc3QgY29sb3IgPSBjb2xvck1hcFtsZXZlbC50b1VwcGVyQ2FzZSgpXSB8fCAnJztcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYCR7Y29sb3J9WyR7dGltZXN0YW1wfV0gJHtsZXZlbC50b1VwcGVyQ2FzZSgpfTogJHttZXNzYWdlfSR7cmVzZXRDb2xvcn1gLCBtZXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9nRW50cnk7XG4gIH1cblxuICBlcnJvcihtZXNzYWdlLCBtZXRhID0ge30pIHtcbiAgICBpZiAodGhpcy5fc2hvdWxkTG9nKCdFUlJPUicpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZm9ybWF0TWVzc2FnZSgnRVJST1InLCBtZXNzYWdlLCBtZXRhKTtcbiAgICB9XG4gIH1cblxuICB3YXJuKG1lc3NhZ2UsIG1ldGEgPSB7fSkge1xuICAgIGlmICh0aGlzLl9zaG91bGRMb2coJ1dBUk4nKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdE1lc3NhZ2UoJ1dBUk4nLCBtZXNzYWdlLCBtZXRhKTtcbiAgICB9XG4gIH1cblxuICBpbmZvKG1lc3NhZ2UsIG1ldGEgPSB7fSkge1xuICAgIGlmICh0aGlzLl9zaG91bGRMb2coJ0lORk8nKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdE1lc3NhZ2UoJ0lORk8nLCBtZXNzYWdlLCBtZXRhKTtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZyhtZXNzYWdlLCBtZXRhID0ge30pIHtcbiAgICBpZiAodGhpcy5fc2hvdWxkTG9nKCdERUJVRycpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZm9ybWF0TWVzc2FnZSgnREVCVUcnLCBtZXNzYWdlLCBtZXRhKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gQ3JlYXRlIGRlZmF1bHQgbG9nZ2VyIGluc3RhbmNlXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9nZ2VyOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsVUFBVSxHQUFHO0VBQ2pCQyxLQUFLLEVBQUUsQ0FBQztFQUNSQyxJQUFJLEVBQUUsQ0FBQztFQUNQQyxJQUFJLEVBQUUsQ0FBQztFQUNQQyxLQUFLLEVBQUU7QUFDVCxDQUFDO0FBRUQsTUFBTUMsTUFBTSxDQUFDO0VBQ1hDLFdBQVdBLENBQUNDLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRTtJQUN4QixJQUFJLENBQUNDLEtBQUssR0FBR0QsT0FBTyxDQUFDQyxLQUFLLElBQUlDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxTQUFTLElBQUksTUFBTTtJQUM3RCxJQUFJLENBQUNDLE9BQU8sR0FBR0wsT0FBTyxDQUFDSyxPQUFPLElBQUksa0JBQWtCO0lBQ3BELElBQUksQ0FBQ0MsYUFBYSxHQUFHTixPQUFPLENBQUNN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