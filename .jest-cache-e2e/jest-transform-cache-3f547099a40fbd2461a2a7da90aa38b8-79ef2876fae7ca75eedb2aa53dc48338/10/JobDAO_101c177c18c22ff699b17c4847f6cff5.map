{"version":3,"names":["logger","require","JobDAO","constructor","databaseManager","db","create","jobData","type","status","priority","source_id","document_id","config","progress","query","values","JSON","stringify","result","info","job_id","rows","id","error","message","findById","updateStatus","options","error_message","fields","paramCount","undefined","push","started_at","includes","join","updateResult","length","Error","findByStatus","limit","offset","getNextPending","addDependency","jobId","dependsOnJobId","depends_on","addLog","level","metadata","getLogs","cancel","reason","retry","job","getStats","queries","key","stats","parseInt","count","parseFloat","avg_seconds","cleanup","retentionDays","deleted_count","rowCount","getQueueStatus","module","exports"],"sources":["JobDAO.js"],"sourcesContent":["const logger = require('../utils/logger');\n\n/**\n * JobDAO - Data Access Object for jobs\n */\nclass JobDAO {\n  constructor(databaseManager) {\n    this.db = databaseManager;\n  }\n\n  /**\n     * Create a new job\n     */\n  async create(jobData) {\n    const {\n      type,\n      status = 'pending',\n      priority = 0,\n      source_id,\n      document_id,\n      config = {},\n      progress = 0\n    } = jobData;\n\n    try {\n      const query = `\n                INSERT INTO jobs (\n                    type, status, priority, source_id, document_id, config, progress\n                ) VALUES ($1, $2, $3, $4, $5, $6, $7)\n                RETURNING *\n            `;\n            \n      const values = [type, status, priority, source_id, document_id, JSON.stringify(config), progress];\n      const result = await this.db.query(query, values);\n            \n      logger.info('Job created', { job_id: result.rows[0].id, type });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Failed to create job', { error: error.message, jobData });\n      throw error;\n    }\n  }\n\n  /**\n     * Find job by ID\n     */\n  async findById(id) {\n    try {\n      const query = 'SELECT * FROM jobs WHERE id = $1';\n      const result = await this.db.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Failed to find job by ID', { error: error.message, id });\n      throw error;\n    }\n  }\n\n  /**\n     * Update job status and progress\n     */\n  async updateStatus(id, status, options = {}) {\n    const { progress, result, error_message } = options;\n\n    try {\n      const fields = ['status = $2'];\n      const values = [id, status];\n      let paramCount = 2;\n\n      if (progress !== undefined) {\n        fields.push(`progress = $${++paramCount}`);\n        values.push(progress);\n      }\n\n      if (result !== undefined) {\n        fields.push(`result = $${++paramCount}`);\n        values.push(JSON.stringify(result));\n      }\n\n      if (error_message !== undefined) {\n        fields.push(`error_message = $${++paramCount}`);\n        values.push(error_message);\n      }\n\n      if (status === 'running' && !options.started_at) {\n        fields.push('started_at = NOW()');\n      }\n\n      if (['completed', 'failed', 'cancelled'].includes(status)) {\n        fields.push('completed_at = NOW()');\n      }\n\n      const query = `\n                UPDATE jobs \n                SET ${fields.join(', ')}, updated_at = NOW()\n                WHERE id = $1\n                RETURNING *\n            `;\n\n      const updateResult = await this.db.query(query, values);\n            \n      if (updateResult.rows.length === 0) {\n        throw new Error('Job not found');\n      }\n\n      logger.info('Job status updated', { job_id: id, status, progress });\n      return updateResult.rows[0];\n    } catch (error) {\n      logger.error('Failed to update job status', { error: error.message, id, status });\n      throw error;\n    }\n  }\n\n  /**\n     * Get jobs by status\n     */\n  async findByStatus(status, options = {}) {\n    const { limit = 100, offset = 0, type } = options;\n\n    try {\n      let query = 'SELECT * FROM jobs WHERE status = $1';\n      const values = [status];\n      let paramCount = 1;\n\n      if (type) {\n        query += ` AND type = $${++paramCount}`;\n        values.push(type);\n      }\n\n      query += ` ORDER BY priority DESC, created_at ASC LIMIT $${++paramCount} OFFSET $${++paramCount}`;\n      values.push(limit, offset);\n\n      const result = await this.db.query(query, values);\n      return result.rows;\n    } catch (error) {\n      logger.error('Failed to find jobs by status', { error: error.message, status });\n      throw error;\n    }\n  }\n\n  /**\n     * Get next pending job\n     */\n  async getNextPending(type = null) {\n    try {\n      let query = `\n                SELECT j.* FROM jobs j\n                LEFT JOIN job_dependencies jd ON j.id = jd.job_id\n                LEFT JOIN jobs dep ON jd.depends_on_job_id = dep.id\n                WHERE j.status = 'pending'\n                AND (jd.id IS NULL OR dep.status = 'completed')\n            `;\n            \n      const values = [];\n      let paramCount = 0;\n\n      if (type) {\n        query += ` AND j.type = $${++paramCount}`;\n        values.push(type);\n      }\n\n      query += ' ORDER BY j.priority DESC, j.created_at ASC LIMIT 1';\n\n      const result = await this.db.query(query, values);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Failed to get next pending job', { error: error.message, type });\n      throw error;\n    }\n  }\n\n  /**\n     * Add job dependency\n     */\n  async addDependency(jobId, dependsOnJobId) {\n    try {\n      const query = `\n                INSERT INTO job_dependencies (job_id, depends_on_job_id)\n                VALUES ($1, $2)\n                ON CONFLICT (job_id, depends_on_job_id) DO NOTHING\n                RETURNING *\n            `;\n            \n      const result = await this.db.query(query, [jobId, dependsOnJobId]);\n      logger.info('Job dependency added', { job_id: jobId, depends_on: dependsOnJobId });\n            \n      return result.rows[0];\n    } catch (error) {\n      logger.error('Failed to add job dependency', { error: error.message, jobId, dependsOnJobId });\n      throw error;\n    }\n  }\n\n  /**\n     * Add job log entry\n     */\n  async addLog(jobId, level, message, metadata = {}) {\n    try {\n      const query = `\n                INSERT INTO job_logs (job_id, level, message, metadata)\n                VALUES ($1, $2, $3, $4)\n                RETURNING *\n            `;\n            \n      const values = [jobId, level, message, JSON.stringify(metadata)];\n      const result = await this.db.query(query, values);\n            \n      return result.rows[0];\n    } catch (error) {\n      logger.error('Failed to add job log', { error: error.message, jobId, level, message });\n      throw error;\n    }\n  }\n\n  /**\n     * Get job logs\n     */\n  async getLogs(jobId, options = {}) {\n    const { level, limit = 100, offset = 0 } = options;\n\n    try {\n      let query = 'SELECT * FROM job_logs WHERE job_id = $1';\n      const values = [jobId];\n      let paramCount = 1;\n\n      if (level) {\n        query += ` AND level = $${++paramCount}`;\n        values.push(level);\n      }\n\n      query += ` ORDER BY created_at DESC LIMIT $${++paramCount} OFFSET $${++paramCount}`;\n      values.push(limit, offset);\n\n      const result = await this.db.query(query, values);\n      return result.rows;\n    } catch (error) {\n      logger.error('Failed to get job logs', { error: error.message, jobId });\n      throw error;\n    }\n  }\n\n  /**\n     * Cancel job\n     */\n  async cancel(id, reason = 'Cancelled by user') {\n    try {\n      const result = await this.updateStatus(id, 'cancelled', { \n        error_message: reason \n      });\n            \n      // Add log entry\n      await this.addLog(id, 'info', 'Job cancelled', { reason });\n            \n      return result;\n    } catch (error) {\n      logger.error('Failed to cancel job', { error: error.message, id });\n      throw error;\n    }\n  }\n\n  /**\n     * Retry failed job\n     */\n  async retry(id) {\n    try {\n      const job = await this.findById(id);\n      if (!job) {\n        throw new Error('Job not found');\n      }\n\n      if (job.status !== 'failed') {\n        throw new Error('Only failed jobs can be retried');\n      }\n\n      const result = await this.updateStatus(id, 'pending', {\n        progress: 0,\n        error_message: null,\n        result: null\n      });\n\n      await this.addLog(id, 'info', 'Job retried');\n            \n      return result;\n    } catch (error) {\n      logger.error('Failed to retry job', { error: error.message, id });\n      throw error;\n    }\n  }\n\n  /**\n     * Get job statistics\n     */\n  async getStats() {\n    try {\n      const queries = [\n        { key: 'total', query: 'SELECT COUNT(*) as count FROM jobs' },\n        { key: 'by_status', query: `\n                    SELECT status, COUNT(*) as count\n                    FROM jobs\n                    GROUP BY status\n                ` },\n        { key: 'by_type', query: `\n                    SELECT type, COUNT(*) as count\n                    FROM jobs\n                    GROUP BY type\n                    ORDER BY count DESC\n                ` },\n        { key: 'recent_completed', query: `\n                    SELECT COUNT(*) as count\n                    FROM jobs\n                    WHERE status = 'completed' AND completed_at > NOW() - INTERVAL '24 hours'\n                ` },\n        { key: 'recent_failed', query: `\n                    SELECT COUNT(*) as count\n                    FROM jobs\n                    WHERE status = 'failed' AND completed_at > NOW() - INTERVAL '24 hours'\n                ` },\n        { key: 'avg_duration', query: `\n                    SELECT AVG(EXTRACT(EPOCH FROM (completed_at - started_at))) as avg_seconds\n                    FROM jobs\n                    WHERE status = 'completed' AND started_at IS NOT NULL AND completed_at IS NOT NULL\n                ` }\n      ];\n\n      const stats = {};\n            \n      for (const { key, query } of queries) {\n        const result = await this.db.query(query);\n        if (key === 'total' || key === 'recent_completed' || key === 'recent_failed') {\n          stats[key] = parseInt(result.rows[0].count);\n        } else if (key === 'avg_duration') {\n          stats[key] = parseFloat(result.rows[0].avg_seconds) || 0;\n        } else {\n          stats[key] = result.rows;\n        }\n      }\n\n      return stats;\n    } catch (error) {\n      logger.error('Failed to get job stats', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n     * Clean up old completed jobs\n     */\n  async cleanup(retentionDays = 7) {\n    try {\n      const query = `\n                DELETE FROM jobs \n                WHERE status IN ('completed', 'failed', 'cancelled') \n                AND completed_at < NOW() - INTERVAL '${retentionDays} days'\n            `;\n            \n      const result = await this.db.query(query);\n      logger.info('Job cleanup completed', { deleted_count: result.rowCount });\n            \n      return result.rowCount;\n    } catch (error) {\n      logger.error('Failed to cleanup jobs', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n     * Get job queue status\n     */\n  async getQueueStatus() {\n    try {\n      const result = await this.db.query(`\n                SELECT \n                    status,\n                    type,\n                    COUNT(*) as count,\n                    AVG(priority) as avg_priority\n                FROM jobs \n                WHERE status IN ('pending', 'running')\n                GROUP BY status, type\n                ORDER BY status, type\n            `);\n\n      return result.rows;\n    } catch (error) {\n      logger.error('Failed to get queue status', { error: error.message });\n      throw error;\n    }\n  }\n}\n\nmodule.exports = JobDAO;\n"],"mappings":"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","ignoreList":[]}