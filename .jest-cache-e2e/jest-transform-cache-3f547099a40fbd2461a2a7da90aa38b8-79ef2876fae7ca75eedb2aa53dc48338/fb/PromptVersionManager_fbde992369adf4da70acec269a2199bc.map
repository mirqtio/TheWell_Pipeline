{"version":3,"names":["fs","require","fsPromises","promises","path","execSync","exec","promisify","execAsync","EventEmitter","PromptVersionManager","constructor","config","promptsDirectory","join","process","cwd","gitEnabled","autoCommit","maxVersionHistory","promptCache","Map","versionHistory","versionCounters","isInitialized","ensurePromptsDirectory","initialize","initializeGitRepo","loadExistingPrompts","emit","error","Error","message","access","mkdir","recursive","stdio","gitignorePath","writeFile","files","readdir","promptFiles","filter","file","endsWith","promptPath","promptData","JSON","parse","readFile","promptId","basename","set","version","patch","split","map","Number","loadVersionHistory","code","promptFile","stdout","commits","trim","line","length","history","commit","hash","messageParts","timestamp","slice","savePrompt","options","generateNextVersion","commitMessage","author","tags","promptWithMetadata","id","content","metadata","createdAt","Date","toISOString","updatedAt","Set","description","schema","type","variables","extractVariables","stringify","commitPrompt","getPrompt","get","getPromptVersion","find","h","includes","existingPrompt","major","minor","currentCounter","undefined","nextCounter","variableRegex","match","push","getVersionHistory","listPrompts","Array","from","keys","getPromptMetadata","prompt","rollbackPrompt","targetVersion","previousVersion","rollbackOptions","getStatistics","totalPrompts","size","totalVersions","values","reduce","sum","averageVersionsPerPrompt","shutdown","clear","module","exports"],"sources":["PromptVersionManager.js"],"sourcesContent":["const fs = require('fs');\nconst fsPromises = fs.promises;\nconst path = require('path');\nconst { execSync, exec } = require('child_process');\nconst { promisify } = require('util');\nconst execAsync = promisify(exec);\nconst EventEmitter = require('events');\n\n/**\n * PromptVersionManager - Git-based prompt versioning system\n * \n * Manages prompt versions using Git for version control, enabling:\n * - Semantic versioning of prompts\n * - Rollback capabilities\n * - Audit trails\n * - Reproducibility linking\n */\nclass PromptVersionManager extends EventEmitter {\n  constructor(config = {}) {\n    super();\n    \n    this.config = {\n      promptsDirectory: config.promptsDirectory || path.join(process.cwd(), 'src/enrichment/prompts'),\n      gitEnabled: config.gitEnabled !== false,\n      autoCommit: config.autoCommit !== false,\n      maxVersionHistory: config.maxVersionHistory || 100,\n      ...config\n    };\n    \n    this.promptCache = new Map();\n    this.versionHistory = new Map();\n    this.versionCounters = new Map(); // Track version counters for atomic increments\n    this.isInitialized = false;\n    \n    // Ensure prompts directory exists\n    this.ensurePromptsDirectory();\n  }\n\n  /**\n   * Initialize the prompt versioning system\n   */\n  async initialize() {\n    try {\n      await this.ensurePromptsDirectory();\n      \n      if (this.config.gitEnabled) {\n        await this.initializeGitRepo();\n      }\n      \n      await this.loadExistingPrompts();\n      this.isInitialized = true;\n      \n      this.emit('initialized');\n      return true;\n    } catch (error) {\n      this.emit('error', error);\n      throw new Error(`Failed to initialize PromptVersionManager: ${error.message}`);\n    }\n  }\n\n  /**\n   * Ensure prompts directory exists\n   */\n  async ensurePromptsDirectory() {\n    try {\n      await fsPromises.access(this.config.promptsDirectory);\n    } catch (error) {\n      await fsPromises.mkdir(this.config.promptsDirectory, { recursive: true });\n    }\n  }\n\n  /**\n   * Initialize Git repository for prompt versioning\n   */\n  async initializeGitRepo() {\n    try {\n      // Check if already a git repo\n      try {\n        execSync('git rev-parse --git-dir', { \n          cwd: this.config.promptsDirectory,\n          stdio: 'ignore'\n        });\n        return; // Already initialized\n      } catch (error) {\n        // Not a git repo, initialize it\n      }\n      \n      execSync('git init', { cwd: this.config.promptsDirectory });\n      \n      // Create .gitignore if it doesn't exist\n      const gitignorePath = path.join(this.config.promptsDirectory, '.gitignore');\n      try {\n        await fsPromises.access(gitignorePath);\n      } catch (error) {\n        await fsPromises.writeFile(gitignorePath, '# Prompt versioning\\n*.tmp\\n*.log\\n');\n      }\n      \n      // Initial commit if no commits exist\n      try {\n        execSync('git rev-parse HEAD', { \n          cwd: this.config.promptsDirectory,\n          stdio: 'ignore'\n        });\n      } catch (error) {\n        // No commits yet, create initial commit\n        execSync('git add .gitignore', { cwd: this.config.promptsDirectory });\n        execSync('git commit -m \"Initial prompt repository setup\"', { \n          cwd: this.config.promptsDirectory \n        });\n      }\n    } catch (error) {\n      throw new Error(`Failed to initialize Git repository: ${error.message}`);\n    }\n  }\n\n  /**\n   * Load existing prompts from the directory\n   */\n  async loadExistingPrompts() {\n    try {\n      const files = await fsPromises.readdir(this.config.promptsDirectory);\n      const promptFiles = files.filter(file => file.endsWith('.json'));\n      \n      for (const file of promptFiles) {\n        const promptPath = path.join(this.config.promptsDirectory, file);\n        const promptData = JSON.parse(await fsPromises.readFile(promptPath, 'utf8'));\n        \n        const promptId = path.basename(file, '.json');\n        this.promptCache.set(promptId, promptData);\n        \n        // Initialize version counter based on current version\n        if (promptData.version) {\n          const [, , patch] = promptData.version.split('.').map(Number);\n          this.versionCounters.set(promptId, patch || 0);\n        }\n        \n        if (this.config.gitEnabled) {\n          await this.loadVersionHistory(promptId);\n        }\n      }\n    } catch (error) {\n      // Directory might be empty, which is fine\n      if (error.code !== 'ENOENT') {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Load version history for a prompt from Git\n   */\n  async loadVersionHistory(promptId) {\n    try {\n      const promptFile = `${promptId}.json`;\n      const { stdout } = await execAsync(\n        `git log --oneline --follow -- ${promptFile}`,\n        { cwd: this.config.promptsDirectory }\n      );\n      \n      const commits = stdout.trim().split('\\n').filter(line => line.length > 0);\n      const history = commits.map(commit => {\n        const [hash, ...messageParts] = commit.split(' ');\n        return {\n          hash,\n          message: messageParts.join(' '),\n          timestamp: null // Will be populated when needed\n        };\n      });\n      \n      this.versionHistory.set(promptId, history.slice(0, this.config.maxVersionHistory));\n    } catch (error) {\n      // File might not exist in Git yet\n      this.versionHistory.set(promptId, []);\n    }\n  }\n\n  /**\n   * Create or update a prompt with versioning\n   */\n  async savePrompt(promptId, promptData, options = {}) {\n    if (!this.isInitialized) {\n      throw new Error('PromptVersionManager not initialized');\n    }\n\n    try {\n      const {\n        version = this.generateNextVersion(promptId),\n        commitMessage = `Update prompt ${promptId} to version ${version}`,\n        author = 'PromptVersionManager',\n        tags = []\n      } = options;\n\n      // Prepare prompt metadata\n      const promptWithMetadata = {\n        id: promptId,\n        version,\n        content: promptData.content || promptData,\n        metadata: {\n          author,\n          createdAt: promptData.metadata?.createdAt || new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          tags: [...new Set([...tags, ...(promptData.metadata?.tags || [])])],\n          description: promptData.metadata?.description || '',\n          ...promptData.metadata\n        },\n        schema: promptData.schema || {\n          version: '1.0.0',\n          type: 'prompt',\n          variables: this.extractVariables(promptData.content || promptData)\n        }\n      };\n\n      // Save to file\n      const promptPath = path.join(this.config.promptsDirectory, `${promptId}.json`);\n      await fsPromises.writeFile(promptPath, JSON.stringify(promptWithMetadata, null, 2));\n      \n      // Update cache\n      this.promptCache.set(promptId, promptWithMetadata);\n\n      // Update version counter to match the saved version\n      const [, , patch] = version.split('.').map(Number);\n      this.versionCounters.set(promptId, patch);\n\n      // Git operations\n      if (this.config.gitEnabled && this.config.autoCommit) {\n        await this.commitPrompt(promptId, commitMessage);\n        await this.loadVersionHistory(promptId);\n      }\n\n      this.emit('promptSaved', {\n        promptId,\n        version,\n        metadata: promptWithMetadata.metadata\n      });\n\n      return promptWithMetadata;\n    } catch (error) {\n      this.emit('error', error);\n      throw new Error(`Failed to save prompt ${promptId}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get a prompt by ID and optional version\n   */\n  async getPrompt(promptId, version = 'latest') {\n    if (!this.isInitialized) {\n      throw new Error('PromptVersionManager not initialized');\n    }\n\n    try {\n      if (version === 'latest') {\n        return this.promptCache.get(promptId) || null;\n      }\n\n      // Get specific version from Git\n      if (this.config.gitEnabled) {\n        return await this.getPromptVersion(promptId, version);\n      }\n\n      // Fallback to latest if Git not enabled\n      return this.promptCache.get(promptId) || null;\n    } catch (error) {\n      this.emit('error', error);\n      throw new Error(`Failed to get prompt ${promptId}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get specific version of prompt from Git\n   */\n  async getPromptVersion(promptId, version) {\n    try {\n      const history = this.versionHistory.get(promptId) || [];\n      const commit = history.find(h => h.message.includes(version));\n      \n      if (!commit) {\n        throw new Error(`Version ${version} not found for prompt ${promptId}`);\n      }\n\n      const { stdout } = await execAsync(\n        `git show ${commit.hash}:${promptId}.json`,\n        { cwd: this.config.promptsDirectory }\n      );\n\n      return JSON.parse(stdout);\n    } catch (error) {\n      throw new Error(`Failed to get prompt version: ${error.message}`);\n    }\n  }\n\n  /**\n   * Generate next semantic version for a prompt\n   */\n  generateNextVersion(promptId) {\n    const existingPrompt = this.promptCache.get(promptId);\n    \n    if (!existingPrompt || !existingPrompt.version) {\n      // Initialize version counter for new prompts\n      this.versionCounters.set(promptId, 0);\n      return '1.0.0';\n    }\n\n    const [major, minor, patch] = existingPrompt.version.split('.').map(Number);\n    \n    // Get or initialize the version counter for this prompt\n    let currentCounter = this.versionCounters.get(promptId);\n    if (currentCounter === undefined) {\n      // Initialize counter to current patch version for existing prompts\n      currentCounter = patch;\n    }\n    \n    // Atomically increment the version counter\n    const nextCounter = currentCounter + 1;\n    this.versionCounters.set(promptId, nextCounter);\n    \n    return `${major}.${minor}.${nextCounter}`;\n  }\n\n  /**\n   * Extract variables from prompt content\n   */\n  extractVariables(content) {\n    if (typeof content !== 'string') {\n      return [];\n    }\n\n    const variableRegex = /\\{\\{(\\w+)\\}\\}/g;\n    const variables = [];\n    let match;\n\n    while ((match = variableRegex.exec(content)) !== null) {\n      if (!variables.includes(match[1])) {\n        variables.push(match[1]);\n      }\n    }\n\n    return variables;\n  }\n\n  /**\n   * Commit prompt changes to Git\n   */\n  async commitPrompt(promptId, message) {\n    try {\n      const promptFile = `${promptId}.json`;\n      execSync(`git add ${promptFile}`, { cwd: this.config.promptsDirectory });\n      execSync(`git commit -m \"${message}\"`, { cwd: this.config.promptsDirectory });\n    } catch (error) {\n      throw new Error(`Failed to commit prompt: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get version history for a prompt\n   */\n  getVersionHistory(promptId) {\n    return this.versionHistory.get(promptId) || [];\n  }\n\n  /**\n   * List all available prompts\n   */\n  listPrompts() {\n    return Array.from(this.promptCache.keys());\n  }\n\n  /**\n   * Get prompt metadata\n   */\n  getPromptMetadata(promptId) {\n    const prompt = this.promptCache.get(promptId);\n    return prompt ? prompt.metadata : null;\n  }\n\n  /**\n   * Rollback prompt to a previous version\n   */\n  async rollbackPrompt(promptId, targetVersion) {\n    if (!this.config.gitEnabled) {\n      throw new Error('Rollback requires Git to be enabled');\n    }\n\n    try {\n      const previousVersion = await this.getPromptVersion(promptId, targetVersion);\n      \n      // Create new version with rollback content\n      const rollbackOptions = {\n        version: this.generateNextVersion(promptId),\n        commitMessage: `Rollback prompt ${promptId} to version ${targetVersion}`,\n        author: 'PromptVersionManager (Rollback)'\n      };\n\n      return await this.savePrompt(promptId, previousVersion, rollbackOptions);\n    } catch (error) {\n      this.emit('error', error);\n      throw new Error(`Failed to rollback prompt ${promptId}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get system statistics\n   */\n  getStatistics() {\n    const totalPrompts = this.promptCache.size;\n    const totalVersions = Array.from(this.versionHistory.values())\n      .reduce((sum, history) => sum + history.length, 0);\n\n    return {\n      totalPrompts,\n      totalVersions,\n      averageVersionsPerPrompt: totalPrompts > 0 ? totalVersions / totalPrompts : 0,\n      gitEnabled: this.config.gitEnabled,\n      isInitialized: this.isInitialized\n    };\n  }\n\n  /**\n   * Graceful shutdown\n   */\n  async shutdown() {\n    try {\n      this.promptCache.clear();\n      this.versionHistory.clear();\n      this.isInitialized = false;\n      \n      this.emit('shutdown');\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = PromptVersionManager;\n"],"mappings":"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","ignoreList":[]}