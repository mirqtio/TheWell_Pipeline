{"version":3,"names":["_getJestObj","mock","mockClient","connect","jest","fn","mockResolvedValue","undefined","query","rows","rowCount","release","end","mockPool","totalCount","idleCount","waitingCount","Pool","Client","createClient","disconnect","get","set","del","exists","expire","flushall","isOpen","isReady","mockImplementation","name","redisConfig","add","id","data","process","on","close","clean","getJobs","getJobCounts","waiting","active","completed","failed","delayed","pause","resume","empty","watch","eventHandlers","Map","mockWatcher","event","callback","has","push","setTimeout","unwatch","removeAllListeners","clear","emit","args","forEach","create","post","put","delete","head","headers","require","env","NODE_ENV","DB_HOST","DB_PORT","DB_NAME","DB_USER","DB_PASSWORD","REDIS_URL","JEST_TIMEOUT","parseInt","beforeAll","afterAll","clearAllTimers","clearAllMocks","global","gc","Promise","resolve","beforeEach"],"sources":["jest.setup.js"],"sourcesContent":["/**\n * Jest Setup File for TheWell Pipeline\n * Configures test environment and mocks for database and external services\n */\n\n// Mock PostgreSQL connections for integration tests\njest.mock('pg', () => {\n  const mockClient = {\n    connect: jest.fn().mockResolvedValue(undefined),\n    query: jest.fn().mockResolvedValue({ rows: [], rowCount: 0 }),\n    release: jest.fn().mockResolvedValue(undefined),\n    end: jest.fn().mockResolvedValue(undefined)\n  };\n\n  const mockPool = {\n    connect: jest.fn().mockResolvedValue(mockClient),\n    query: jest.fn().mockResolvedValue({ rows: [], rowCount: 0 }),\n    end: jest.fn().mockResolvedValue(undefined),\n    totalCount: 0,\n    idleCount: 0,\n    waitingCount: 0\n  };\n\n  return {\n    Pool: jest.fn(() => mockPool),\n    Client: jest.fn(() => mockClient)\n  };\n});\n\n// Mock Redis connections\njest.mock('redis', () => ({\n  createClient: jest.fn(() => ({\n    connect: jest.fn().mockResolvedValue(undefined),\n    disconnect: jest.fn().mockResolvedValue(undefined),\n    get: jest.fn().mockResolvedValue(null),\n    set: jest.fn().mockResolvedValue('OK'),\n    del: jest.fn().mockResolvedValue(1),\n    exists: jest.fn().mockResolvedValue(0),\n    expire: jest.fn().mockResolvedValue(1),\n    flushall: jest.fn().mockResolvedValue('OK'),\n    isOpen: true,\n    isReady: true\n  }))\n}));\n\n// Mock Bull queues\njest.mock('bull', () => {\n  return jest.fn().mockImplementation((name, redisConfig) => ({\n    add: jest.fn().mockResolvedValue({ id: '1', data: {} }),\n    process: jest.fn(),\n    on: jest.fn(),\n    close: jest.fn().mockResolvedValue(undefined),\n    clean: jest.fn().mockResolvedValue([]),\n    getJobs: jest.fn().mockResolvedValue([]),\n    getJobCounts: jest.fn().mockResolvedValue({\n      waiting: 0,\n      active: 0,\n      completed: 0,\n      failed: 0,\n      delayed: 0\n    }),\n    pause: jest.fn().mockResolvedValue(undefined),\n    resume: jest.fn().mockResolvedValue(undefined),\n    empty: jest.fn().mockResolvedValue(undefined),\n    name,\n    redisConfig\n  }));\n});\n\n// Mock file system operations for configuration hot-reload tests\njest.mock('chokidar', () => ({\n  watch: jest.fn(() => {\n    const eventHandlers = new Map();\n    \n    const mockWatcher = {\n      on: jest.fn((event, callback) => {\n        if (!eventHandlers.has(event)) {\n          eventHandlers.set(event, []);\n        }\n        eventHandlers.get(event).push(callback);\n        \n        // Emit ready event immediately for tests\n        if (event === 'ready') {\n          setTimeout(() => callback(), 10);\n        }\n        \n        return mockWatcher;\n      }),\n      close: jest.fn().mockResolvedValue(undefined),\n      add: jest.fn(),\n      unwatch: jest.fn(),\n      removeAllListeners: jest.fn(() => {\n        eventHandlers.clear();\n      }),\n      emit: jest.fn((event, ...args) => {\n        if (eventHandlers.has(event)) {\n          eventHandlers.get(event).forEach(callback => callback(...args));\n        }\n      })\n    };\n    \n    return mockWatcher;\n  })\n}));\n\n// Mock external API calls\njest.mock('axios', () => ({\n  create: jest.fn(() => ({\n    get: jest.fn().mockResolvedValue({ data: {} }),\n    post: jest.fn().mockResolvedValue({ data: {} }),\n    put: jest.fn().mockResolvedValue({ data: {} }),\n    delete: jest.fn().mockResolvedValue({ data: {} }),\n    head: jest.fn().mockResolvedValue({ headers: {} })\n  })),\n  get: jest.fn().mockResolvedValue({ data: {} }),\n  post: jest.fn().mockResolvedValue({ data: {} }),\n  put: jest.fn().mockResolvedValue({ data: {} }),\n  delete: jest.fn().mockResolvedValue({ data: {} }),\n  head: jest.fn().mockResolvedValue({ headers: {} })\n}));\n\n// Set test environment variables\nprocess.env.NODE_ENV = 'test';\nprocess.env.DB_HOST = 'localhost';\nprocess.env.DB_PORT = '5432';\nprocess.env.DB_NAME = 'thewell_pipeline_test';\nprocess.env.DB_USER = 'test_user';\nprocess.env.DB_PASSWORD = 'test_password';\nprocess.env.REDIS_URL = 'redis://localhost:6379';\n\n// Increase test timeout for CI environment\njest.setTimeout(process.env.JEST_TIMEOUT ? parseInt(process.env.JEST_TIMEOUT) : 30000);\n\n// Global test setup\nbeforeAll(async () => {\n  // Any global setup needed\n});\n\n// Global cleanup to prevent Jest hanging\nafterAll(async () => {\n  // Close any remaining timers\n  jest.clearAllTimers();\n  \n  // Clear all mocks\n  jest.clearAllMocks();\n  \n  // Force garbage collection if available\n  if (global.gc) {\n    global.gc();\n  }\n  \n  // Give a small delay for cleanup\n  await new Promise(resolve => setTimeout(resolve, 100));\n});\n\n// Reset mocks between tests\nbeforeEach(() => {\n  jest.clearAllMocks();\n  jest.clearAllTimers();\n});\n"],"mappings":"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","ignoreList":[]}