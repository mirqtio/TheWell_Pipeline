{"version":3,"names":["path","require","fs","promises","IngestionEngine","SOURCE_TYPES","describe","testDataDir","engine","processedDocuments","beforeAll","join","__dirname","mkdir","recursive","writeFile","JSON","stringify","title","version","description","endpoints","method","docsDir","archiveDir","afterAll","rm","error","beforeEach","initialize","on","sourceId","docId","push","afterEach","shutdown","test","sourceConfig","id","type","STATIC","config","basePath","fileTypes","addSource","sources","getSources","expect","toHaveLength","toBe","discoveredDocs","discoverDocuments","length","toBeGreaterThanOrEqual","forEach","doc","toHaveProperty","metadata","results","processAllDocuments","processed","failed","techDoc","find","toBeDefined","content","toContain","userManual","apiSpec","event","docTitles","map","d","source1Config","source2Config","allResults","processAllSources","docsResults","r","rootResults","toBeGreaterThan","source","getSource","originalExtract","handler","extract","bind","jest","fn","mockImplementation","Error","failedDoc","f","document","invalidConfig","rejects","toThrow","perfTestDir","docCount","i","discoveryStart","Date","now","discoveryTime","toBeLessThan","processStart","processTime","initialConfig","initialDocs","txtDocsCount","updatedConfig","updateSource","updatedDocs","extensions","extension","removeSource","isInitialized","stats","getStatistics","totalSources","updatedStats","sourceTypes"],"sources":["complete-workflow.e2e.test.js"],"sourcesContent":["const path = require('path');\nconst fs = require('fs').promises;\nconst IngestionEngine = require('../../../src/ingestion/IngestionEngine');\nconst { SOURCE_TYPES } = require('../../../src/ingestion/types');\n\ndescribe('Complete Ingestion Workflow E2E Tests', () => {\n  let testDataDir;\n  let engine;\n  let processedDocuments = [];\n\n  beforeAll(async () => {\n    // Create comprehensive test data directory structure\n    testDataDir = path.join(__dirname, 'e2e-test-data');\n    await fs.mkdir(testDataDir, { recursive: true });\n\n    // Create various document types\n    await fs.writeFile(\n      path.join(testDataDir, 'technical-doc.md'),\n      '# Technical Documentation\\n\\nThis document contains **important** technical information.\\n\\n## Overview\\n\\nSystem architecture details...'\n    );\n\n    await fs.writeFile(\n      path.join(testDataDir, 'user-manual.txt'),\n      'User Manual\\n\\nThis is a comprehensive user manual with step-by-step instructions for using the system.'\n    );\n\n    await fs.writeFile(\n      path.join(testDataDir, 'api-spec.json'),\n      JSON.stringify({\n        title: 'API Specification',\n        version: '1.0.0',\n        description: 'RESTful API specification for the system',\n        endpoints: [\n          { path: '/api/users', method: 'GET', description: 'Get all users' },\n          { path: '/api/users/:id', method: 'GET', description: 'Get user by ID' }\n        ]\n      }, null, 2)\n    );\n\n    await fs.writeFile(\n      path.join(testDataDir, 'changelog.md'),\n      '# Changelog\\n\\n## Version 1.0.0\\n- Initial release\\n- Added user management\\n- Implemented API endpoints'\n    );\n\n    // Create subdirectories with nested content\n    const docsDir = path.join(testDataDir, 'docs');\n    await fs.mkdir(docsDir, { recursive: true });\n    \n    await fs.writeFile(\n      path.join(docsDir, 'installation.md'),\n      '# Installation Guide\\n\\n## Prerequisites\\n\\n- Node.js 18+\\n- PostgreSQL 13+\\n\\n## Steps\\n\\n1. Clone repository\\n2. Install dependencies\\n3. Configure database'\n    );\n\n    await fs.writeFile(\n      path.join(docsDir, 'troubleshooting.txt'),\n      'Troubleshooting Guide\\n\\nCommon issues and solutions:\\n\\n1. Database connection errors\\n2. Authentication failures\\n3. Performance issues'\n    );\n\n    // Create archived content\n    const archiveDir = path.join(testDataDir, 'archive');\n    await fs.mkdir(archiveDir, { recursive: true });\n    \n    await fs.writeFile(\n      path.join(archiveDir, 'legacy-system.md'),\n      '# Legacy System Documentation\\n\\nThis document describes the old system that was replaced.'\n    );\n  });\n\n  afterAll(async () => {\n    // Cleanup test data\n    try {\n      await fs.rm(testDataDir, { recursive: true });\n    } catch (error) {\n      // Ignore cleanup errors\n    }\n  });\n\n  beforeEach(async () => {\n    engine = new IngestionEngine();\n    await engine.initialize();\n    processedDocuments = [];\n\n    // Set up event listeners to track processing\n    engine.on('documentProcessingCompleted', (sourceId, docId) => {\n      processedDocuments.push({ sourceId, docId });\n    });\n  });\n\n  afterEach(async () => {\n    if (engine) {\n      await engine.shutdown();\n    }\n  });\n\n  describe('Single Source Complete Workflow', () => {\n    test('should complete full workflow for static source', async () => {\n      // Step 1: Configure and add source\n      const sourceConfig = {\n        id: 'e2e-static-source',\n        type: SOURCE_TYPES.STATIC,\n        config: {\n          basePath: testDataDir,\n          fileTypes: ['md', 'txt', 'json'],\n          recursive: false\n        }\n      };\n\n      await engine.addSource(sourceConfig);\n      \n      // Verify source was added\n      const sources = engine.getSources();\n      expect(sources).toHaveLength(1);\n      expect(sources[0].id).toBe('e2e-static-source');\n\n      // Step 2: Discover documents\n      const discoveredDocs = await engine.discoverDocuments('e2e-static-source');\n      expect(discoveredDocs.length).toBeGreaterThanOrEqual(4);\n      \n      // Verify document properties\n      discoveredDocs.forEach(doc => {\n        expect(doc).toHaveProperty('id');\n        expect(doc).toHaveProperty('title');\n        expect(doc).toHaveProperty('url');\n        expect(doc).toHaveProperty('metadata');\n        expect(doc.metadata.sourceId).toBe('e2e-static-source');\n      });\n\n      // Step 3: Process all documents\n      const results = await engine.processAllDocuments('e2e-static-source');\n      \n      expect(results.processed.length).toBe(discoveredDocs.length);\n      expect(results.failed).toHaveLength(0);\n      \n      // Verify processed documents have required properties\n      results.processed.forEach(doc => {\n        expect(doc).toHaveProperty('id');\n        expect(doc).toHaveProperty('title');\n        expect(doc).toHaveProperty('content');\n        expect(doc).toHaveProperty('metadata');\n        expect(doc.metadata).toHaveProperty('wordCount');\n        expect(doc.metadata).toHaveProperty('characterCount');\n        expect(doc.metadata).toHaveProperty('sourceId');\n        expect(doc.metadata).toHaveProperty('processedAt');\n        expect(doc.metadata.sourceId).toBe('e2e-static-source');\n      });\n\n      // Step 4: Verify content extraction\n      const techDoc = results.processed.find(doc => doc.title === 'Technical Documentation');\n      expect(techDoc).toBeDefined();\n      expect(techDoc.content).toContain('System architecture details');\n\n      const userManual = results.processed.find(doc => doc.title === 'user-manual');\n      expect(userManual).toBeDefined();\n      expect(userManual.content).toContain('step-by-step instructions');\n\n      const apiSpec = results.processed.find(doc => doc.title === 'api-spec');\n      expect(apiSpec).toBeDefined();\n      expect(apiSpec.content).toContain('API Specification');\n\n      // Step 5: Verify event tracking\n      expect(processedDocuments.length).toBe(discoveredDocs.length);\n      processedDocuments.forEach(event => {\n        expect(event.sourceId).toBe('e2e-static-source');\n      });\n    });\n\n    test('should handle recursive discovery workflow', async () => {\n      const sourceConfig = {\n        id: 'e2e-recursive-source',\n        type: SOURCE_TYPES.STATIC,\n        config: {\n          basePath: testDataDir,\n          fileTypes: ['md', 'txt'],\n          recursive: true\n        }\n      };\n\n      await engine.addSource(sourceConfig);\n      \n      const discoveredDocs = await engine.discoverDocuments('e2e-recursive-source');\n      \n      // Should find documents in subdirectories\n      expect(discoveredDocs.length).toBeGreaterThanOrEqual(6);\n      \n      const docTitles = discoveredDocs.map(d => d.title);\n      expect(docTitles).toContain('installation.md');\n      expect(docTitles).toContain('troubleshooting.txt');\n      expect(docTitles).toContain('legacy-system.md');\n\n      const results = await engine.processAllDocuments('e2e-recursive-source');\n      expect(results.processed.length).toBe(discoveredDocs.length);\n      expect(results.failed).toHaveLength(0);\n    });\n  });\n\n  describe('Multi-Source Workflow', () => {\n    test('should handle multiple sources simultaneously', async () => {\n      // Configure multiple sources\n      const source1Config = {\n        id: 'e2e-docs-source',\n        type: SOURCE_TYPES.STATIC,\n        config: {\n          basePath: path.join(testDataDir, 'docs'),\n          fileTypes: ['md', 'txt'],\n          recursive: false\n        }\n      };\n\n      const source2Config = {\n        id: 'e2e-root-source',\n        type: SOURCE_TYPES.STATIC,\n        config: {\n          basePath: testDataDir,\n          fileTypes: ['json'],\n          recursive: false\n        }\n      };\n\n      await engine.addSource(source1Config);\n      await engine.addSource(source2Config);\n\n      // Verify both sources are registered\n      const sources = engine.getSources();\n      expect(sources).toHaveLength(2);\n\n      // Process all sources\n      const allResults = await engine.processAllSources();\n      expect(allResults).toHaveLength(2);\n\n      const docsResults = allResults.find(r => r.sourceId === 'e2e-docs-source');\n      const rootResults = allResults.find(r => r.sourceId === 'e2e-root-source');\n\n      expect(docsResults.processed.length).toBeGreaterThan(0);\n      expect(rootResults.processed.length).toBeGreaterThan(0);\n      expect(docsResults.failed).toHaveLength(0);\n      expect(rootResults.failed).toHaveLength(0);\n\n      // Verify source isolation\n      docsResults.processed.forEach(doc => {\n        expect(doc.metadata.sourceId).toBe('e2e-docs-source');\n      });\n\n      rootResults.processed.forEach(doc => {\n        expect(doc.metadata.sourceId).toBe('e2e-root-source');\n      });\n    });\n  });\n\n  describe('Error Handling and Recovery Workflow', () => {\n    test('should handle partial failures gracefully', async () => {\n      const sourceConfig = {\n        id: 'e2e-error-source',\n        type: SOURCE_TYPES.STATIC,\n        config: {\n          basePath: testDataDir,\n          fileTypes: ['md', 'txt'],\n          recursive: false\n        }\n      };\n\n      await engine.addSource(sourceConfig);\n      \n      // Mock extraction failure for specific document\n      const source = engine.getSource('e2e-error-source');\n      const originalExtract = source.handler.extract.bind(source.handler);\n      \n      source.handler.extract = jest.fn().mockImplementation((doc) => {\n        if (doc.title === 'technical-doc.md') {\n          throw new Error('Simulated extraction failure');\n        }\n        return originalExtract(doc);\n      });\n\n      const results = await engine.processAllDocuments('e2e-error-source');\n      \n      expect(results.failed.length).toBeGreaterThan(0);\n      expect(results.processed.length).toBeGreaterThan(0);\n      \n      // Verify failed document information\n      const failedDoc = results.failed.find(f => f.document.title === 'technical-doc.md');\n      expect(failedDoc).toBeDefined();\n      expect(failedDoc.error).toContain('Simulated extraction failure');\n    });\n\n    test('should handle source configuration errors', async () => {\n      const invalidConfig = {\n        id: 'e2e-invalid-source',\n        type: SOURCE_TYPES.STATIC,\n        config: {\n          basePath: '/non-existent-directory',\n          fileTypes: ['txt']\n        }\n      };\n\n      await expect(engine.addSource(invalidConfig)).rejects.toThrow();\n      \n      // Verify engine state is not corrupted\n      const sources = engine.getSources();\n      expect(sources).toHaveLength(0);\n    });\n  });\n\n  describe('Performance and Scalability Workflow', () => {\n    test('should handle large document sets efficiently', async () => {\n      // Create many test documents\n      const perfTestDir = path.join(testDataDir, 'performance');\n      await fs.mkdir(perfTestDir, { recursive: true });\n\n      const docCount = 25;\n      for (let i = 0; i < docCount; i++) {\n        await fs.writeFile(\n          path.join(perfTestDir, `doc-${i}.txt`),\n          `Performance test document ${i}\\n\\nThis is document number ${i} with some content for testing performance and scalability.`\n        );\n      }\n\n      const sourceConfig = {\n        id: 'e2e-performance-source',\n        type: SOURCE_TYPES.STATIC,\n        config: {\n          basePath: perfTestDir,\n          fileTypes: ['txt'],\n          recursive: false\n        }\n      };\n\n      await engine.addSource(sourceConfig);\n\n      // Measure discovery performance\n      const discoveryStart = Date.now();\n      const discoveredDocs = await engine.discoverDocuments('e2e-performance-source');\n      const discoveryTime = Date.now() - discoveryStart;\n\n      expect(discoveredDocs).toHaveLength(docCount);\n      expect(discoveryTime).toBeLessThan(1000); // Should complete within 1 second\n\n      // Measure processing performance\n      const processStart = Date.now();\n      const results = await engine.processAllDocuments('e2e-performance-source');\n      const processTime = Date.now() - processStart;\n\n      expect(results.processed).toHaveLength(docCount);\n      expect(results.failed).toHaveLength(0);\n      expect(processTime).toBeLessThan(3000); // Should complete within 3 seconds\n\n      // Cleanup performance test files\n      await fs.rm(perfTestDir, { recursive: true });\n    });\n  });\n\n  describe('Configuration Management Workflow', () => {\n    test('should handle source updates and reconfigurations', async () => {\n      // Initial configuration\n      const initialConfig = {\n        id: 'e2e-config-source',\n        type: SOURCE_TYPES.STATIC,\n        config: {\n          basePath: testDataDir,\n          fileTypes: ['txt'],\n          recursive: false\n        }\n      };\n\n      await engine.addSource(initialConfig);\n      \n      const initialDocs = await engine.discoverDocuments('e2e-config-source');\n      const txtDocsCount = initialDocs.length;\n\n      // Update configuration to include more file types\n      const updatedConfig = {\n        ...initialConfig,\n        config: {\n          ...initialConfig.config,\n          fileTypes: ['txt', 'md', 'json']\n        }\n      };\n\n      await engine.updateSource('e2e-config-source', updatedConfig);\n      \n      const updatedDocs = await engine.discoverDocuments('e2e-config-source');\n      expect(updatedDocs.length).toBeGreaterThan(txtDocsCount);\n\n      // Verify new file types are included\n      const extensions = updatedDocs.map(d => d.extension);\n      expect(extensions).toContain('.md');\n      expect(extensions).toContain('.json');\n    });\n\n    test('should handle source removal workflow', async () => {\n      const sourceConfig = {\n        id: 'e2e-removable-source',\n        type: SOURCE_TYPES.STATIC,\n        config: {\n          basePath: testDataDir,\n          fileTypes: ['txt']\n        }\n      };\n\n      await engine.addSource(sourceConfig);\n      expect(engine.getSources()).toHaveLength(1);\n\n      await engine.removeSource('e2e-removable-source');\n      expect(engine.getSources()).toHaveLength(0);\n\n      // Verify operations on removed source fail appropriately\n      await expect(engine.discoverDocuments('e2e-removable-source')).rejects.toThrow();\n    });\n  });\n\n  describe('Engine Lifecycle Workflow', () => {\n    test('should handle complete engine lifecycle', async () => {\n      // Test initialization\n      expect(engine.isInitialized).toBe(true);\n      \n      const stats = engine.getStatistics();\n      expect(stats.isInitialized).toBe(true);\n      expect(stats.totalSources).toBe(0);\n\n      // Add sources and verify statistics\n      const sourceConfig = {\n        id: 'e2e-lifecycle-source',\n        type: SOURCE_TYPES.STATIC,\n        config: {\n          basePath: testDataDir,\n          fileTypes: ['txt']\n        }\n      };\n\n      await engine.addSource(sourceConfig);\n      \n      const updatedStats = engine.getStatistics();\n      expect(updatedStats.totalSources).toBe(1);\n      expect(updatedStats.sourceTypes[SOURCE_TYPES.STATIC]).toBe(1);\n\n      // Test shutdown\n      await engine.shutdown();\n      expect(engine.isInitialized).toBe(false);\n      expect(engine.getSources()).toHaveLength(0);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}