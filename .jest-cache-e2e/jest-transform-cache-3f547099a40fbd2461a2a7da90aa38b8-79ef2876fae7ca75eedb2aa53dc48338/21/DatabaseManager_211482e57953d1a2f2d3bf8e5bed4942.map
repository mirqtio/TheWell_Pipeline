{"version":3,"names":["Pool","require","fs","promises","path","logger","DatabaseManager","constructor","config","host","process","env","DB_HOST","port","parseInt","DB_PORT","database","DB_NAME","user","DB_USER","password","DB_PASSWORD","max","idleTimeoutMillis","connectionTimeoutMillis","pool","isConnected","initialize","client","connect","query","release","info","error","message","text","params","Error","start","Date","now","result","duration","debug","substring","length","rows","rowCount","transaction","callback","applySchema","schemaPath","join","__dirname","schemaSQL","readFile","includes","runMigrations","migrationsDir","files","readdir","migrationFiles","filter","file","endsWith","sort","migrationPath","migrationSQL","dirError","code","healthCheck","status","timestamp","current_time","version","connected","getStats","tables","stats","table","count","activeJobsResult","active_jobs","recentDocsResult","recent_documents","cleanup","options","jobLogRetentionDays","completedJobRetentionDays","auditLogRetentionDays","cleanupQueries","description","results","close","end","getClient","module","exports"],"sources":["DatabaseManager.js"],"sourcesContent":["const { Pool } = require('pg');\nconst fs = require('fs').promises;\nconst path = require('path');\nconst logger = require('../utils/logger');\n\n/**\n * DatabaseManager - Handles database connections, migrations, and operations\n */\nclass DatabaseManager {\n  constructor(config = {}) {\n    this.config = {\n      host: config.host || process.env.DB_HOST || 'localhost',\n      port: parseInt(config.port || process.env.DB_PORT || 5432),\n      database: config.database || process.env.DB_NAME || 'thewell_pipeline',\n      user: config.user || process.env.DB_USER || 'postgres',\n      password: config.password || process.env.DB_PASSWORD || '',\n      max: config.max || 20,\n      idleTimeoutMillis: config.idleTimeoutMillis || 30000,\n      connectionTimeoutMillis: config.connectionTimeoutMillis || 2000,\n      ...config\n    };\n        \n    this.pool = null;\n    this.isConnected = false;\n  }\n\n  /**\n     * Initialize database connection\n     */\n  async initialize() {\n    try {\n      this.pool = new Pool(this.config);\n            \n      // Test connection\n      const client = await this.pool.connect();\n      await client.query('SELECT NOW()');\n      client.release();\n            \n      this.isConnected = true;\n      logger.info('Database connection established successfully', {\n        host: this.config.host,\n        port: this.config.port,\n        database: this.config.database\n      });\n            \n      return this;\n    } catch (error) {\n      logger.error('Failed to initialize database connection', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n     * Execute a query with parameters\n     */\n  async query(text, params = []) {\n    if (!this.isConnected) {\n      throw new Error('Database not connected. Call initialize() first.');\n    }\n\n    const start = Date.now();\n    try {\n      const result = await this.pool.query(text, params);\n      const duration = Date.now() - start;\n            \n      logger.debug('Database query executed', {\n        query: text.substring(0, 100) + (text.length > 100 ? '...' : ''),\n        duration,\n        rows: result.rowCount\n      });\n            \n      return result;\n    } catch (error) {\n      const duration = Date.now() - start;\n      logger.error('Database query failed', {\n        query: text.substring(0, 100) + (text.length > 100 ? '...' : ''),\n        duration,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  /**\n     * Execute a transaction\n     */\n  async transaction(callback) {\n    const client = await this.pool.connect();\n        \n    try {\n      await client.query('BEGIN');\n      const result = await callback(client);\n      await client.query('COMMIT');\n      return result;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n     * Apply database schema\n     */\n  async applySchema() {\n    try {\n      const schemaPath = path.join(__dirname, 'schema.sql');\n      const schemaSQL = await fs.readFile(schemaPath, 'utf8');\n            \n      logger.info('Applying database schema...');\n      await this.query(schemaSQL);\n      logger.info('Database schema applied successfully');\n            \n      return true;\n    } catch (error) {\n      // Ignore \"already exists\" errors for idempotent schema application\n      if (error.message.includes('already exists')) {\n        logger.info('Database schema already exists, skipping application');\n        return true;\n      }\n      logger.error('Failed to apply database schema', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n     * Run database migrations\n     */\n  async runMigrations() {\n    try {\n      // Create migrations table if it doesn't exist\n      await this.query(`\n                CREATE TABLE IF NOT EXISTS schema_migrations (\n                    id SERIAL PRIMARY KEY,\n                    filename VARCHAR(255) NOT NULL UNIQUE,\n                    applied_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n                )\n            `);\n\n      const migrationsDir = path.join(__dirname, 'migrations');\n            \n      try {\n        const files = await fs.readdir(migrationsDir);\n        const migrationFiles = files\n          .filter(file => file.endsWith('.sql'))\n          .sort();\n\n        for (const file of migrationFiles) {\n          const { rows } = await this.query(\n            'SELECT id FROM schema_migrations WHERE filename = $1',\n            [file]\n          );\n\n          if (rows.length === 0) {\n            logger.info(`Running migration: ${file}`);\n                        \n            const migrationPath = path.join(migrationsDir, file);\n            const migrationSQL = await fs.readFile(migrationPath, 'utf8');\n                        \n            await this.transaction(async (client) => {\n              await client.query(migrationSQL);\n              await client.query(\n                'INSERT INTO schema_migrations (filename) VALUES ($1)',\n                [file]\n              );\n            });\n                        \n            logger.info(`Migration completed: ${file}`);\n          }\n        }\n                \n        logger.info('All migrations completed successfully');\n      } catch (dirError) {\n        if (dirError.code === 'ENOENT') {\n          logger.info('No migrations directory found, skipping migrations');\n        } else {\n          throw dirError;\n        }\n      }\n            \n      return true;\n    } catch (error) {\n      logger.error('Failed to run migrations', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n     * Check database health\n     */\n  async healthCheck() {\n    try {\n      const result = await this.query('SELECT NOW() as current_time, version() as version');\n      return {\n        status: 'healthy',\n        timestamp: result.rows[0].current_time,\n        version: result.rows[0].version,\n        connected: this.isConnected\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        error: error.message,\n        connected: false\n      };\n    }\n  }\n\n  /**\n     * Get database statistics\n     */\n  async getStats() {\n    try {\n      const tables = [\n        'sources', 'documents', 'jobs', 'document_visibility',\n        'review_sessions', 'document_reviews', 'document_enrichments'\n      ];\n            \n      const stats = {};\n            \n      for (const table of tables) {\n        const result = await this.query(`SELECT COUNT(*) as count FROM ${table}`);\n        stats[table] = parseInt(result.rows[0].count);\n      }\n            \n      // Get active jobs\n      const activeJobsResult = await this.query(\n        'SELECT COUNT(*) as count FROM jobs WHERE status IN (\\'pending\\', \\'running\\')'\n      );\n      stats.active_jobs = parseInt(activeJobsResult.rows[0].count);\n            \n      // Get recent documents (last 24 hours)\n      const recentDocsResult = await this.query(\n        'SELECT COUNT(*) as count FROM documents WHERE created_at > NOW() - INTERVAL \\'24 hours\\''\n      );\n      stats.recent_documents = parseInt(recentDocsResult.rows[0].count);\n            \n      return stats;\n    } catch (error) {\n      logger.error('Failed to get database stats', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n     * Clean up old data\n     */\n  async cleanup(options = {}) {\n    const {\n      jobLogRetentionDays = 30,\n      completedJobRetentionDays = 7,\n      auditLogRetentionDays = 90\n    } = options;\n\n    try {\n      const cleanupQueries = [\n        // Clean old job logs\n        {\n          query: 'DELETE FROM job_logs WHERE created_at < NOW() - INTERVAL $1',\n          params: [`${jobLogRetentionDays} days`],\n          description: 'job logs'\n        },\n        // Clean completed jobs\n        {\n          query: 'DELETE FROM jobs WHERE status = \\'completed\\' AND completed_at < NOW() - INTERVAL $1',\n          params: [`${completedJobRetentionDays} days`],\n          description: 'completed jobs'\n        },\n        // Clean old audit logs\n        {\n          query: 'DELETE FROM visibility_audit_log WHERE created_at < NOW() - INTERVAL $1',\n          params: [`${auditLogRetentionDays} days`],\n          description: 'audit logs'\n        }\n      ];\n\n      const results = {};\n            \n      for (const { query, params, description } of cleanupQueries) {\n        const result = await this.query(query, params);\n        results[description] = result.rowCount;\n        logger.info(`Cleaned up ${result.rowCount} old ${description}`);\n      }\n            \n      return results;\n    } catch (error) {\n      logger.error('Failed to cleanup database', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n     * Close database connection\n     */\n  async close() {\n    if (this.pool) {\n      await this.pool.end();\n      this.isConnected = false;\n      logger.info('Database connection closed');\n    }\n  }\n\n  /**\n     * Get a client for manual transaction management\n     */\n  async getClient() {\n    return await this.pool.connect();\n  }\n}\n\nmodule.exports = DatabaseManager;\n"],"mappings":"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","ignoreList":[]}