{"version":3,"names":["chokidar","require","path","fs","promises","EventEmitter","Joi","logger","ConfigManager","constructor","options","configDir","join","process","cwd","watchOptions","watcher","isWatching","validators","Map","loadedConfigs","registerValidator","getSourceConfigSchema","getIngestionConfigSchema","getQueueConfigSchema","configs","startWatching","warn","ensureConfigDirectory","watch","ignored","persistent","debug","Error","on","filePath","handleFileChange","error","handleWatcherError","eventType","Promise","resolve","reject","timeout","setTimeout","clearTimeout","info","emit","message","close","stopWatching","removeAllListeners","configType","schema","set","getConfig","get","getAllConfigs","Object","fromEntries","loadConfig","getConfigTypeFromPath","config","readConfigFile","validatedConfig","validateConfig","applyConfigChange","handleConfigUpdate","handleConfigRemoval","type","configWithEnvVars","substituteEnvironmentVariables","previousConfig","delete","newConfig","hasChanges","JSON","stringify","validator","value","validate","abortEarly","allowUnknown","validationError","details","content","readFile","endsWith","parse","cache","code","basename","extname","validTypes","find","includes","access","mkdir","recursive","object","sources","array","items","id","string","required","valid","name","enabled","boolean","default","schedule","when","is","then","otherwise","optional","batchSize","number","integer","min","max","maxRetries","retryDelay","concurrency","enableValidation","outputFormat","redis","host","port","password","db","queues","defaultJobOptions","removeOnComplete","removeOnFail","attempts","backoff","delay","getStats","configCount","size","validatorCount","configTypes","Array","from","keys","envRegex","replace","match","varName","env","module","exports"],"sources":["ConfigManager.js"],"sourcesContent":["const chokidar = require('chokidar');\nconst path = require('path');\nconst fs = require('fs').promises;\nconst EventEmitter = require('events');\nconst Joi = require('joi');\nconst logger = require('../utils/logger');\n\n/**\n * ConfigManager handles hot-reloading of configuration files\n * Monitors configuration directory and applies changes at runtime\n */\nclass ConfigManager extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    \n    this.configDir = options.configDir || path.join(process.cwd(), 'config');\n    this.watchOptions = options.watchOptions || {};\n    this.watcher = null;\n    this.isWatching = false;\n    this.validators = new Map();\n    this.loadedConfigs = new Map();\n    \n    // Default configuration schema\n    this.registerValidator('sources', this.getSourceConfigSchema());\n    this.registerValidator('ingestion', this.getIngestionConfigSchema());\n    this.registerValidator('queue', this.getQueueConfigSchema());\n  }\n\n  /**\n   * Backward compatibility getter for configs\n   */\n  get configs() {\n    return this.loadedConfigs;\n  }\n\n  /**\n   * Start watching configuration files for changes\n   */\n  async startWatching() {\n    if (this.isWatching) {\n      logger.warn('ConfigManager is already watching');\n      return;\n    }\n\n    try {\n      await this.ensureConfigDirectory();\n      \n      // Create watcher for configuration directory\n      this.watcher = chokidar.watch(this.configDir, {\n        ignored: /(^|[\\\\])\\../, // ignore dotfiles\n        persistent: true,\n        ...this.watchOptions\n      });\n\n      // Debug: log what we're watching\n      logger.debug('Creating watcher for directory', { \n        configDir: this.configDir,\n        watchOptions: { persistent: true, ...this.watchOptions }\n      });\n\n      // Ensure watcher was created successfully\n      if (!this.watcher) {\n        throw new Error('Failed to create file watcher');\n      }\n\n      // Set up event handlers\n      this.watcher\n        .on('add', (filePath) => {\n          logger.debug('Watcher detected file add', { filePath });\n          this.handleFileChange('add', filePath);\n        })\n        .on('change', (filePath) => {\n          logger.debug('Watcher detected file change', { filePath });\n          this.handleFileChange('change', filePath);\n        })\n        .on('unlink', (filePath) => {\n          logger.debug('Watcher detected file unlink', { filePath });\n          this.handleFileChange('unlink', filePath);\n        })\n        .on('error', (error) => this.handleWatcherError(error))\n        .on('all', (eventType, filePath) => {\n          logger.debug('Watcher detected any event', { eventType, filePath });\n        });\n\n      // Wait for watcher to be ready\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          reject(new Error('Watcher ready timeout'));\n        }, 5000);\n\n        this.watcher.on('ready', () => {\n          clearTimeout(timeout);\n          this.isWatching = true;\n          logger.info('ConfigManager: Started watching configuration files', {\n            configDir: this.configDir\n          });\n          this.emit('ready');\n          resolve();\n        });\n      });\n\n    } catch (error) {\n      logger.error('Failed to start ConfigManager watcher', { error: error.message });\n      if (this.watcher) {\n        await this.watcher.close();\n        this.watcher = null;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Stop watching configuration files\n   */\n  async stopWatching() {\n    if (!this.isWatching && !this.watcher) {\n      return;\n    }\n\n    try {\n      this.isWatching = false;\n      \n      if (this.watcher) {\n        // Remove all listeners to prevent memory leaks\n        this.watcher.removeAllListeners();\n        await this.watcher.close();\n        this.watcher = null;\n      }\n      \n      logger.info('ConfigManager: Stopped watching configuration files');\n      this.emit('stopped');\n      \n    } catch (error) {\n      logger.error('Error stopping ConfigManager watcher', { error: error.message });\n      // Force cleanup even if close() fails\n      if (this.watcher) {\n        this.watcher.removeAllListeners();\n        this.watcher = null;\n      }\n      this.isWatching = false;\n      throw error;\n    }\n  }\n\n  /**\n   * Register a configuration validator\n   */\n  registerValidator(configType, schema) {\n    if (!configType || !schema) {\n      throw new Error('Config type and schema are required');\n    }\n    \n    this.validators.set(configType, schema);\n    logger.debug('Registered validator for config type', { configType });\n  }\n\n  /**\n   * Get current configuration for a specific type\n   */\n  getConfig(configType) {\n    return this.loadedConfigs.get(configType);\n  }\n\n  /**\n   * Get all current configurations\n   */\n  getAllConfigs() {\n    return Object.fromEntries(this.loadedConfigs);\n  }\n\n  /**\n   * Manually load a configuration file\n   */\n  async loadConfig(filePath) {\n    try {\n      const configType = this.getConfigTypeFromPath(filePath);\n      const config = await this.readConfigFile(filePath);\n      \n      if (config) {\n        const validatedConfig = await this.validateConfig(configType, config);\n        await this.applyConfigChange(configType, validatedConfig, filePath);\n      }\n      \n    } catch (error) {\n      logger.error('Failed to load configuration', { \n        filePath, \n        error: error.message \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Handle file system changes\n   */\n  async handleFileChange(eventType, filePath) {\n    try {\n      const configType = this.getConfigTypeFromPath(filePath);\n      \n      if (!configType) {\n        logger.debug('Ignoring non-config file', { filePath, eventType });\n        return;\n      }\n\n      logger.info('Configuration file changed', { \n        eventType, \n        filePath, \n        configType \n      });\n\n      switch (eventType) {\n      case 'add':\n      case 'change':\n        await this.handleConfigUpdate(configType, filePath);\n        break;\n          \n      case 'unlink':\n        await this.handleConfigRemoval(configType, filePath);\n        break;\n      }\n      \n    } catch (error) {\n      logger.error('Error handling configuration file change', {\n        eventType,\n        filePath,\n        error: error.message\n      });\n      \n      this.emit('error', {\n        type: 'config-change-error',\n        eventType,\n        filePath,\n        error\n      });\n    }\n  }\n\n  /**\n   * Handle configuration file updates\n   */\n  async handleConfigUpdate(configType, filePath) {\n    try {\n      const config = await this.readConfigFile(filePath);\n      \n      if (!config) {\n        logger.warn('Empty or invalid configuration file', { filePath });\n        return;\n      }\n\n      // Substitute environment variables\n      const configWithEnvVars = this.substituteEnvironmentVariables(config);\n\n      // Validate configuration\n      const validatedConfig = await this.validateConfig(configType, configWithEnvVars);\n      \n      // Apply changes\n      await this.applyConfigChange(configType, validatedConfig, filePath);\n      \n    } catch (error) {\n      logger.error('Failed to update configuration', {\n        configType,\n        filePath,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Handle configuration file removal\n   */\n  async handleConfigRemoval(configType, filePath) {\n    try {\n      const previousConfig = this.loadedConfigs.get(configType);\n      \n      if (previousConfig) {\n        this.loadedConfigs.delete(configType);\n        \n        logger.info('Configuration removed', { configType, filePath });\n        \n        this.emit('config-removed', {\n          configType,\n          filePath,\n          previousConfig\n        });\n      }\n      \n    } catch (error) {\n      logger.error('Error handling configuration removal', {\n        configType,\n        filePath,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Apply validated configuration changes\n   */\n  async applyConfigChange(configType, newConfig, filePath) {\n    try {\n      const previousConfig = this.loadedConfigs.get(configType);\n      \n      // Store new configuration\n      this.loadedConfigs.set(configType, newConfig);\n      \n      logger.info('Configuration updated successfully', {\n        configType,\n        filePath,\n        hasChanges: JSON.stringify(previousConfig) !== JSON.stringify(newConfig)\n      });\n\n      // Emit configuration change event\n      this.emit('config-changed', {\n        configType,\n        filePath,\n        newConfig,\n        previousConfig\n      });\n      \n    } catch (error) {\n      logger.error('Failed to apply configuration change', {\n        configType,\n        filePath,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Validate configuration against registered schema\n   */\n  async validateConfig(configType, config) {\n    const validator = this.validators.get(configType);\n    \n    if (!validator) {\n      logger.warn('No validator found for config type', { configType });\n      return config;\n    }\n\n    try {\n      const { error, value } = validator.validate(config, { \n        abortEarly: false,\n        allowUnknown: true \n      });\n      \n      if (error) {\n        const validationError = new Error(`Configuration validation failed: ${error.message}`);\n        validationError.details = error.details;\n        throw validationError;\n      }\n      \n      return value;\n      \n    } catch (error) {\n      logger.error('Configuration validation failed', {\n        configType,\n        error: error.message,\n        details: error.details\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Read and parse configuration file\n   */\n  async readConfigFile(filePath) {\n    try {\n      const content = await fs.readFile(filePath, 'utf8');\n      \n      if (filePath.endsWith('.json')) {\n        return JSON.parse(content);\n      } else if (filePath.endsWith('.js')) {\n        // Clear require cache for hot reloading\n        delete require.cache[require.resolve(filePath)];\n        return require(filePath);\n      }\n      \n      return null;\n      \n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        logger.debug('Configuration file not found', { filePath });\n        return null;\n      }\n      \n      logger.error('Error reading configuration file', {\n        filePath,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Determine configuration type from file path\n   */\n  getConfigTypeFromPath(filePath) {\n    const basename = path.basename(filePath, path.extname(filePath));\n    const validTypes = ['sources', 'ingestion', 'queue', 'enrichment'];\n    \n    return validTypes.find(type => basename.includes(type)) || null;\n  }\n\n  /**\n   * Ensure configuration directory exists\n   */\n  async ensureConfigDirectory() {\n    try {\n      await fs.access(this.configDir);\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        await fs.mkdir(this.configDir, { recursive: true });\n        logger.info('Created configuration directory', { configDir: this.configDir });\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Handle watcher errors\n   */\n  handleWatcherError(error) {\n    logger.error('ConfigManager watcher error', { error: error.message });\n    this.emit('error', {\n      type: 'watcher-error',\n      error\n    });\n  }\n\n  /**\n   * Get source configuration schema\n   */\n  getSourceConfigSchema() {\n    return Joi.object({\n      sources: Joi.array().items(\n        Joi.object({\n          id: Joi.string().required(),\n          type: Joi.string().valid('static', 'semi-static', 'dynamic-consistent', 'dynamic-unstructured').required(),\n          name: Joi.string().required(),\n          enabled: Joi.boolean().default(true),\n          config: Joi.object().required(),\n          schedule: Joi.string().when('type', {\n            is: Joi.string().valid('semi-static', 'dynamic-consistent', 'dynamic-unstructured'),\n            then: Joi.required(),\n            otherwise: Joi.optional()\n          })\n        })\n      ).required()\n    });\n  }\n\n  /**\n   * Get ingestion configuration schema\n   */\n  getIngestionConfigSchema() {\n    return Joi.object({\n      batchSize: Joi.number().integer().min(1).max(1000).default(100),\n      maxRetries: Joi.number().integer().min(0).max(10).default(3),\n      retryDelay: Joi.number().integer().min(1000).default(5000),\n      timeout: Joi.number().integer().min(5000).default(30000),\n      concurrency: Joi.number().integer().min(1).max(10).default(3),\n      enableValidation: Joi.boolean().default(true),\n      outputFormat: Joi.string().valid('json', 'jsonl').default('json')\n    });\n  }\n\n  /**\n   * Get queue configuration schema\n   */\n  getQueueConfigSchema() {\n    return Joi.object({\n      redis: Joi.object({\n        host: Joi.string().default('localhost'),\n        port: Joi.number().integer().min(1).max(65535).default(6379),\n        password: Joi.string().optional(),\n        db: Joi.number().integer().min(0).default(0)\n      }).default(),\n      queues: Joi.object({\n        defaultJobOptions: Joi.object({\n          removeOnComplete: Joi.number().integer().min(0).default(100),\n          removeOnFail: Joi.number().integer().min(0).default(50),\n          attempts: Joi.number().integer().min(1).default(3),\n          backoff: Joi.object({\n            type: Joi.string().valid('fixed', 'exponential').default('exponential'),\n            delay: Joi.number().integer().min(1000).default(2000)\n          }).default()\n        }).default(),\n        concurrency: Joi.number().integer().min(1).max(50).default(5)\n      }).default()\n    });\n  }\n\n  /**\n   * Get configuration statistics\n   */\n  getStats() {\n    return {\n      isWatching: this.isWatching,\n      configDir: this.configDir,\n      configCount: this.loadedConfigs.size,\n      validatorCount: this.validators.size,\n      configTypes: Array.from(this.loadedConfigs.keys())\n    };\n  }\n\n  /**\n   * Substitute environment variables in configuration\n   */\n  substituteEnvironmentVariables(config) {\n    const envRegex = /\\${([^}]+)}/g;\n    return JSON.parse(JSON.stringify(config).replace(envRegex, (match, varName) => process.env[varName] || match));\n  }\n}\n\nmodule.exports = ConfigManager;"],"mappings":"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","ignoreList":[]}