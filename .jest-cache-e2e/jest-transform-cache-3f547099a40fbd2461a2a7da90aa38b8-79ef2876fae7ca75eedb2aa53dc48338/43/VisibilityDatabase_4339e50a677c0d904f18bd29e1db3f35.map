{"version":3,"names":["Pool","require","EventEmitter","VisibilityDatabase","constructor","options","host","process","env","DB_HOST","port","parseInt","DB_PORT","database","DB_NAME","user","DB_USER","password","DB_PASSWORD","max","idleTimeoutMillis","connectionTimeoutMillis","pool","isConnected","initialize","client","connect","release","emit","initializeSchema","error","Error","message","fs","path","schemaPath","join","__dirname","schema","readFileSync","query","setDocumentVisibility","documentId","visibility","setBy","reason","metadata","currentResult","previousVisibility","rows","visibilityResult","JSON","stringify","result","oldVisibility","newVisibility","changedBy","getDocumentVisibility","getDocumentVisibilities","documentIds","createApprovalRequest","approvalData","approvalResult","approvalId","getPendingApprovals","filters","params","paramIndex","push","requestedBy","since","approveVisibilityChange","approvedBy","notes","length","approval","document_id","requested_visibility","current_visibility","originalRequestedBy","requested_by","success","approvedAt","Date","toISOString","rejectVisibilityChange","rejectedBy","requestedVisibility","status","rejectedAt","getUserPermissions","userId","permissions","Set","visibilityLevels","roles","row","role","forEach","perm","add","visibility_levels","level","Array","from","logDocumentAccess","accessType","accessGranted","documentVisibility","userPermissions","ipAddress","userAgent","getVisibilityAuditLog","limit","close","end","module","exports"],"sources":["VisibilityDatabase.js"],"sourcesContent":["const { Pool } = require('pg');\nconst EventEmitter = require('events');\n\n/**\n * Database adapter for Document Visibility Management\n * Handles all database operations for visibility states, approvals, and access control\n */\nclass VisibilityDatabase extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    \n    this.options = {\n      host: process.env.DB_HOST || 'localhost',\n      port: parseInt(process.env.DB_PORT || 5432),\n      database: process.env.DB_NAME || 'thewell_pipeline',\n      user: process.env.DB_USER || 'postgres',\n      password: process.env.DB_PASSWORD || '',\n      max: 20,\n      idleTimeoutMillis: 30000,\n      connectionTimeoutMillis: 2000,\n      ...options\n    };\n\n    this.pool = new Pool(this.options);\n    this.isConnected = false;\n  }\n\n  /**\n   * Initialize database connection and create tables\n   */\n  async initialize() {\n    try {\n      // Test connection\n      const client = await this.pool.connect();\n      client.release();\n      \n      this.isConnected = true;\n      this.emit('connected');\n      \n      // Initialize schema if needed\n      await this.initializeSchema();\n      \n    } catch (error) {\n      this.emit('error', error);\n      throw new Error(`Failed to initialize visibility database: ${error.message}`);\n    }\n  }\n\n  /**\n   * Initialize database schema\n   */\n  async initializeSchema() {\n    const fs = require('fs');\n    const path = require('path');\n    \n    try {\n      const schemaPath = path.join(__dirname, 'schemas', 'visibility.sql');\n      const schema = fs.readFileSync(schemaPath, 'utf8');\n      \n      await this.pool.query(schema);\n      this.emit('schemaInitialized');\n      \n    } catch (error) {\n      this.emit('error', error);\n      throw new Error(`Failed to initialize schema: ${error.message}`);\n    }\n  }\n\n  /**\n   * Set document visibility\n   */\n  async setDocumentVisibility(documentId, visibility, setBy, reason = null, metadata = {}) {\n    const client = await this.pool.connect();\n    \n    try {\n      await client.query('BEGIN');\n      \n      // Get current visibility\n      const currentResult = await client.query(\n        'SELECT visibility FROM document_visibility WHERE document_id = $1',\n        [documentId]\n      );\n      \n      const previousVisibility = currentResult.rows[0]?.visibility || null;\n      \n      // Insert or update visibility\n      const visibilityResult = await client.query(`\n        INSERT INTO document_visibility (document_id, visibility, previous_visibility, set_by, reason, metadata)\n        VALUES ($1, $2, $3, $4, $5, $6)\n        ON CONFLICT (document_id) \n        UPDATE SET \n          visibility = $2,\n          previous_visibility = document_visibility.visibility,\n          set_by = $4,\n          set_at = CURRENT_TIMESTAMP,\n          reason = $5,\n          metadata = $6,\n          updated_at = CURRENT_TIMESTAMP\n        RETURNING *\n      `, [documentId, visibility, previousVisibility, setBy, reason, JSON.stringify(metadata)]);\n      \n      // Log the change\n      await client.query(`\n        INSERT INTO visibility_audit_log (document_id, action, old_visibility, new_visibility, changed_by, reason, metadata)\n        VALUES ($1, 'visibility_changed', $2, $3, $4, $5, $6)\n      `, [documentId, previousVisibility, visibility, setBy, reason, JSON.stringify(metadata)]);\n      \n      await client.query('COMMIT');\n      \n      const result = visibilityResult.rows[0];\n      this.emit('visibilityChanged', {\n        documentId,\n        oldVisibility: previousVisibility,\n        newVisibility: visibility,\n        changedBy: setBy,\n        reason\n      });\n      \n      return result;\n      \n    } catch (error) {\n      await client.query('ROLLBACK');\n      this.emit('error', error);\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get document visibility\n   */\n  async getDocumentVisibility(documentId) {\n    try {\n      const result = await this.pool.query(\n        'SELECT * FROM document_visibility WHERE document_id = $1',\n        [documentId]\n      );\n      \n      return result.rows[0] || null;\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get multiple document visibilities\n   */\n  async getDocumentVisibilities(documentIds) {\n    try {\n      const result = await this.pool.query(\n        'SELECT * FROM document_visibility WHERE document_id = ANY($1)',\n        [documentIds]\n      );\n      \n      return result.rows;\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create approval request\n   */\n  async createApprovalRequest(approvalData) {\n    const client = await this.pool.connect();\n    \n    try {\n      await client.query('BEGIN');\n      \n      // Insert approval request\n      const approvalResult = await client.query(`\n        INSERT INTO visibility_approvals (\n          approval_id, document_id, requested_visibility, current_visibility,\n          requested_by, reason, metadata\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *\n      `, [\n        approvalData.approvalId,\n        approvalData.documentId,\n        approvalData.visibility,\n        approvalData.previousVisibility?.visibility,\n        approvalData.setBy,\n        approvalData.reason,\n        JSON.stringify(approvalData.metadata)\n      ]);\n      \n      // Log the approval request\n      await client.query(`\n        INSERT INTO visibility_audit_log (\n          document_id, action, old_visibility, new_visibility, changed_by, reason, approval_id, metadata\n        ) VALUES ($1, 'approval_requested', $2, $3, $4, $5, $6, $7)\n      `, [\n        approvalData.documentId,\n        approvalData.previousVisibility?.visibility,\n        approvalData.visibility,\n        approvalData.setBy,\n        approvalData.reason,\n        approvalData.approvalId,\n        JSON.stringify(approvalData.metadata)\n      ]);\n      \n      await client.query('COMMIT');\n      \n      const result = approvalResult.rows[0];\n      this.emit('approvalRequested', result);\n      \n      return result;\n      \n    } catch (error) {\n      await client.query('ROLLBACK');\n      this.emit('error', error);\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get pending approvals\n   */\n  async getPendingApprovals(filters = {}) {\n    try {\n      let query = 'SELECT * FROM visibility_approvals WHERE status = $1';\n      const params = ['pending'];\n      let paramIndex = 2;\n      \n      if (filters.visibility) {\n        query += ` AND requested_visibility = $${paramIndex}`;\n        params.push(filters.visibility);\n        paramIndex++;\n      }\n      \n      if (filters.requestedBy) {\n        query += ` AND requested_by = $${paramIndex}`;\n        params.push(filters.requestedBy);\n        paramIndex++;\n      }\n      \n      if (filters.since) {\n        query += ` AND requested_at >= $${paramIndex}`;\n        params.push(filters.since);\n        paramIndex++;\n      }\n      \n      query += ' ORDER BY requested_at DESC';\n      \n      const result = await this.pool.query(query, params);\n      return result.rows;\n      \n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Approve visibility change\n   */\n  async approveVisibilityChange(approvalId, approvedBy, notes = '') {\n    const client = await this.pool.connect();\n    \n    try {\n      await client.query('BEGIN');\n      \n      // Get approval request\n      const approvalResult = await client.query(\n        'SELECT * FROM visibility_approvals WHERE approval_id = $1 AND status = $2',\n        [approvalId, 'pending']\n      );\n      \n      if (approvalResult.rows.length === 0) {\n        throw new Error(`Approval request ${approvalId} not found or already processed`);\n      }\n      \n      const approval = approvalResult.rows[0];\n      \n      // Update approval status\n      await client.query(`\n        UPDATE visibility_approvals \n        SET status = 'approved', reviewed_by = $1, reviewed_at = CURRENT_TIMESTAMP, review_notes = $2, updated_at = CURRENT_TIMESTAMP\n        WHERE approval_id = $3\n      `, [approvedBy, notes, approvalId]);\n      \n      // Apply the visibility change\n      await client.query(`\n        INSERT INTO document_visibility (document_id, visibility, previous_visibility, set_by, reason, metadata)\n        VALUES ($1, $2, $3, $4, $5, $6)\n        ON CONFLICT (document_id) \n        UPDATE SET \n          visibility = $2,\n          previous_visibility = document_visibility.visibility,\n          set_by = $4,\n          set_at = CURRENT_TIMESTAMP,\n          reason = $5,\n          metadata = $6,\n          updated_at = CURRENT_TIMESTAMP\n      `, [\n        approval.document_id,\n        approval.requested_visibility,\n        approval.current_visibility,\n        approvedBy,\n        `Approved visibility change: ${notes}`,\n        JSON.stringify({ approvalId, approvedBy, originalRequestedBy: approval.requested_by })\n      ]);\n      \n      // Log the approval\n      await client.query(`\n        INSERT INTO visibility_audit_log (\n          document_id, action, old_visibility, new_visibility, changed_by, reason, approval_id, metadata\n        ) VALUES ($1, 'approval_granted', $2, $3, $4, $5, $6, $7)\n      `, [\n        approval.document_id,\n        approval.current_visibility,\n        approval.requested_visibility,\n        approvedBy,\n        notes,\n        approvalId,\n        JSON.stringify({ originalRequestedBy: approval.requested_by })\n      ]);\n      \n      await client.query('COMMIT');\n      \n      this.emit('visibilityApproved', {\n        approvalId,\n        documentId: approval.document_id,\n        oldVisibility: approval.current_visibility,\n        newVisibility: approval.requested_visibility,\n        approvedBy,\n        notes\n      });\n      \n      return {\n        success: true,\n        documentId: approval.document_id,\n        visibility: approval.requested_visibility,\n        approvedBy,\n        approvedAt: new Date().toISOString()\n      };\n      \n    } catch (error) {\n      await client.query('ROLLBACK');\n      this.emit('error', error);\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Reject visibility change\n   */\n  async rejectVisibilityChange(approvalId, rejectedBy, reason = '') {\n    const client = await this.pool.connect();\n    \n    try {\n      await client.query('BEGIN');\n      \n      // Get approval request\n      const approvalResult = await client.query(\n        'SELECT * FROM visibility_approvals WHERE approval_id = $1 AND status = $2',\n        [approvalId, 'pending']\n      );\n      \n      if (approvalResult.rows.length === 0) {\n        throw new Error(`Approval request ${approvalId} not found or already processed`);\n      }\n      \n      const approval = approvalResult.rows[0];\n      \n      // Update approval status\n      await client.query(`\n        UPDATE visibility_approvals \n        SET status = 'rejected', reviewed_by = $1, reviewed_at = CURRENT_TIMESTAMP, review_notes = $2, updated_at = CURRENT_TIMESTAMP\n        WHERE approval_id = $3\n      `, [rejectedBy, reason, approvalId]);\n      \n      // Log the rejection\n      await client.query(`\n        INSERT INTO visibility_audit_log (\n          document_id, action, old_visibility, new_visibility, changed_by, reason, approval_id, metadata\n        ) VALUES ($1, 'approval_rejected', $2, $3, $4, $5, $6, $7)\n      `, [\n        approval.document_id,\n        approval.current_visibility,\n        approval.requested_visibility,\n        rejectedBy,\n        reason,\n        approvalId,\n        JSON.stringify({ originalRequestedBy: approval.requested_by })\n      ]);\n      \n      await client.query('COMMIT');\n      \n      this.emit('visibilityRejected', {\n        approvalId,\n        documentId: approval.document_id,\n        requestedVisibility: approval.requested_visibility,\n        rejectedBy,\n        reason\n      });\n      \n      return {\n        success: true,\n        approvalId,\n        status: 'rejected',\n        rejectedBy,\n        rejectedAt: new Date().toISOString(),\n        reason\n      };\n      \n    } catch (error) {\n      await client.query('ROLLBACK');\n      this.emit('error', error);\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  /**\n   * Get user permissions\n   */\n  async getUserPermissions(userId) {\n    try {\n      const result = await this.pool.query(\n        'SELECT * FROM user_permissions WHERE user_id = $1 AND active = true AND (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP)',\n        [userId]\n      );\n      \n      if (result.rows.length === 0) {\n        return null;\n      }\n      \n      // Combine permissions from all roles\n      const permissions = new Set();\n      const visibilityLevels = new Set();\n      const roles = [];\n      \n      for (const row of result.rows) {\n        roles.push(row.role);\n        \n        if (row.permissions) {\n          row.permissions.forEach(perm => permissions.add(perm));\n        }\n        \n        if (row.visibility_levels) {\n          row.visibility_levels.forEach(level => visibilityLevels.add(level));\n        }\n      }\n      \n      return {\n        userId,\n        roles,\n        permissions: Array.from(permissions),\n        visibilityLevels: Array.from(visibilityLevels)\n      };\n      \n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Log document access\n   */\n  async logDocumentAccess(documentId, userId, accessType, accessGranted, metadata = {}) {\n    try {\n      await this.pool.query(`\n        INSERT INTO document_access_log (\n          document_id, user_id, access_type, access_granted, \n          document_visibility, user_permissions, ip_address, user_agent, metadata\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n      `, [\n        documentId,\n        userId,\n        accessType,\n        accessGranted,\n        metadata.documentVisibility || null,\n        JSON.stringify(metadata.userPermissions || {}),\n        metadata.ipAddress || null,\n        metadata.userAgent || null,\n        JSON.stringify(metadata)\n      ]);\n      \n    } catch (error) {\n      this.emit('error', error);\n      // Don't throw here as access logging shouldn't break the main flow\n    }\n  }\n\n  /**\n   * Get visibility audit log\n   */\n  async getVisibilityAuditLog(documentId, limit = 50) {\n    try {\n      const result = await this.pool.query(\n        'SELECT * FROM visibility_audit_log WHERE document_id = $1 ORDER BY changed_at DESC LIMIT $2',\n        [documentId, limit]\n      );\n      \n      return result.rows;\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Close database connection\n   */\n  async close() {\n    try {\n      await this.pool.end();\n      this.isConnected = false;\n      this.emit('disconnected');\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = VisibilityDatabase;\n"],"mappings":"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","ignoreList":[]}