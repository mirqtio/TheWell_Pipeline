{"version":3,"names":["PromptVersionManager","require","LLMProviderManager","fs","promises","path","describe","promptManager","llmManager","testDir","beforeAll","join","__dirname","mkdir","recursive","error","beforeEach","files","readdir","Promise","all","map","file","unlink","catch","global","fetch","jest","fn","mockImplementation","url","options","body","JSON","parse","prompt","messages","content","response","includes","resolve","ok","json","choices","message","finish_reason","usage","prompt_tokens","length","completion_tokens","total_tokens","model","promptsDirectory","gitEnabled","autoCommit","openai","apiKey","maxRetries","timeout","prompts","initialize","initializePromptVersioning","afterEach","shutdown","afterAll","rmdir","it","summaryPrompt","metadata","description","tags","author","savedPrompt","savePrompt","expect","version","toBe","documentData","title","documentType","result","executeWithPrompt","taskType","promptMetadata","promptId","promptVersion","variables","toEqual","toContain","provider","toBeDefined","improvedPrompt","updatedPrompt","improvedResult","sentimentPrompt","testTexts","results","text","push","toHaveLength","forEach","enhancedSentimentPrompt","enhanced","enhancedResult","entityPrompt","complexText","getPrompt","hash1","generatePromptHash","result2","promptHash","id","promptData","Object","entries","originalDocument","extraction","document","summary","insights","step1_v1","input","step2_v1","step1_result","step1_v2","step2_v2","promptWithMissingVars","available_var","mockRejectedValue","Error","testPrompt","rejects","toThrow","largeContent","repeat","largePrompt","saved","toBeGreaterThan","largeDocument","i","data","index","updatePromises","updates","finalPrompt","toMatch","versions","u","uniqueVersions","Set","size"],"sources":["prompt-lifecycle.test.js"],"sourcesContent":["const PromptVersionManager = require('../../../src/enrichment/PromptVersionManager');\nconst LLMProviderManager = require('../../../src/enrichment/LLMProviderManager');\nconst fs = require('fs').promises;\nconst path = require('path');\n\ndescribe('Prompt Lifecycle E2E Tests', () => {\n  let promptManager;\n  let llmManager;\n  let testDir;\n\n  beforeAll(async () => {\n    // Create temporary test directory\n    testDir = path.join(__dirname, '../../../temp/test-prompts-e2e');\n    \n    try {\n      await fs.mkdir(testDir, { recursive: true });\n    } catch (error) {\n      // Directory might already exist\n    }\n  });\n\n  beforeEach(async () => {\n    // Clean test directory\n    try {\n      const files = await fs.readdir(testDir);\n      await Promise.all(files.map(file => \n        fs.unlink(path.join(testDir, file)).catch(() => {})\n      ));\n    } catch (error) {\n      // Directory might not exist\n    }\n\n    // Mock fetch for LLM calls\n    global.fetch = jest.fn().mockImplementation((url, options) => {\n      const body = JSON.parse(options.body);\n      const prompt = body.messages?.[0]?.content || body.prompt || '';\n      \n      // Simulate different responses based on prompt content\n      let response = 'Default LLM response';\n      \n      if (prompt.includes('Focus on') || prompt.includes('Main themes') || prompt.includes('summary')) {\n        response = 'This is a comprehensive summary of the document content with key insights and main points.';\n      } else if (prompt.includes('sentiment') || prompt.includes('analyze') || prompt.includes('emotional tone')) {\n        response = 'The sentiment analysis shows positive sentiment with a confidence score of 85%.';\n      } else if (prompt.includes('entities') || prompt.includes('Extract') || prompt.includes('Person') || prompt.includes('Location')) {\n        response = 'Extracted entities include: Person: John Doe, Location: New York, Date: 2024-01-01';\n      } else if (prompt.includes('content-extraction') || prompt.includes('Extract the main content')) {\n        response = 'Extracted content: This document contains important information about data processing.';\n      } else if (prompt.includes('quality-assessment') || prompt.includes('Assess the quality')) {\n        response = 'Quality assessment: High quality content with good structure and clarity.';\n      } else if (prompt.includes('metadata-enhancement') || prompt.includes('Enhance the metadata')) {\n        response = 'Enhanced metadata: Category: Technical, Complexity: Medium, Audience: Professional';\n      }\n\n      return Promise.resolve({\n        ok: true,\n        json: async () => ({\n          choices: [{\n            message: { content: response },\n            finish_reason: 'stop'\n          }],\n          usage: {\n            prompt_tokens: prompt.length / 4, // Rough estimate\n            completion_tokens: response.length / 4,\n            total_tokens: (prompt.length + response.length) / 4\n          },\n          model: 'gpt-3.5-turbo'\n        })\n      });\n    });\n\n    // Initialize managers\n    promptManager = new PromptVersionManager({\n      promptsDirectory: testDir,\n      gitEnabled: false, // Disable git for E2E tests\n      autoCommit: false\n    });\n\n    llmManager = new LLMProviderManager({\n      openai: {\n        apiKey: 'test-key-e2e',\n        model: 'gpt-3.5-turbo',\n        maxRetries: 1,\n        timeout: 5000\n      },\n      prompts: {\n        promptsDirectory: testDir,\n        gitEnabled: false\n      }\n    });\n\n    await promptManager.initialize();\n    await llmManager.initializePromptVersioning();\n  });\n\n  afterEach(async () => {\n    delete global.fetch;\n    \n    if (promptManager) {\n      await promptManager.shutdown();\n    }\n    if (llmManager) {\n      await llmManager.shutdown();\n    }\n  });\n\n  afterAll(async () => {\n    // Clean up test directory\n    try {\n      const files = await fs.readdir(testDir);\n      await Promise.all(files.map(file => \n        fs.unlink(path.join(testDir, file)).catch(() => {})\n      ));\n      await fs.rmdir(testDir);\n    } catch (error) {\n      // Ignore cleanup errors\n    }\n  });\n\n  describe('Complete Prompt Lifecycle', () => {\n    it('should handle complete document summarization workflow', async () => {\n      // Step 1: Create summarization prompt\n      const summaryPrompt = {\n        content: `Please provide a comprehensive summary of the following document.\n\nDocument Title: {{title}}\nDocument Type: {{documentType}}\nContent: {{content}}\n\nFocus on:\n1. Main themes and topics\n2. Key findings or arguments\n3. Important details and data\n4. Conclusions and implications`,\n        metadata: {\n          description: 'Comprehensive document summarization',\n          tags: ['summarization', 'analysis', 'document-processing'],\n          author: 'E2E Test Suite'\n        }\n      };\n\n      const savedPrompt = await llmManager.savePrompt('doc-summary-v1', summaryPrompt);\n      expect(savedPrompt.version).toBe('1.0.0');\n\n      // Step 2: Execute summarization with real document data\n      const documentData = {\n        title: 'Climate Change Impact Report',\n        documentType: 'Research Report',\n        content: `Climate change represents one of the most significant challenges facing humanity in the 21st century. \n        Recent studies indicate that global temperatures have risen by 1.1°C since pre-industrial times, with \n        accelerating impacts on weather patterns, sea levels, and ecosystems. The report analyzes data from \n        150 countries and projects that without immediate action, temperatures could rise by 3-4°C by 2100, \n        leading to catastrophic consequences for food security, water resources, and human settlements.`\n      };\n\n      const result = await llmManager.executeWithPrompt('doc-summary-v1', documentData, {\n        taskType: 'summarization'\n      });\n\n      // Verify execution results\n      expect(result.promptMetadata.promptId).toBe('doc-summary-v1');\n      expect(result.promptMetadata.promptVersion).toBe('1.0.0');\n      expect(result.promptMetadata.variables).toEqual(documentData);\n      expect(result.content).toContain('summary');\n      expect(result.provider).toBeDefined();\n\n      // Step 3: Update prompt based on results\n      const improvedPrompt = {\n        ...summaryPrompt,\n        content: summaryPrompt.content + '\\n\\nPlease also include a confidence score for your analysis.',\n        metadata: {\n          ...summaryPrompt.metadata,\n          description: 'Enhanced summarization with confidence scoring'\n        }\n      };\n\n      const updatedPrompt = await llmManager.savePrompt('doc-summary-v1', improvedPrompt);\n      expect(updatedPrompt.version).toBe('1.0.1');\n\n      // Step 4: Execute with updated prompt\n      const improvedResult = await llmManager.executeWithPrompt('doc-summary-v1', documentData);\n      expect(improvedResult.promptMetadata.promptVersion).toBe('1.0.1');\n    });\n\n    it('should handle sentiment analysis workflow with multiple iterations', async () => {\n      // Step 1: Create initial sentiment analysis prompt\n      const sentimentPrompt = {\n        content: 'Analyze the sentiment of the following text: {{text}}',\n        metadata: {\n          description: 'Basic sentiment analysis',\n          tags: ['sentiment', 'analysis']\n        }\n      };\n\n      await llmManager.savePrompt('sentiment-basic', sentimentPrompt);\n\n      // Step 2: Test with various text samples\n      const testTexts = [\n        'I absolutely love this new product! It exceeded all my expectations.',\n        'The service was terrible and I will never come back.',\n        'The weather today is partly cloudy with a chance of rain.'\n      ];\n\n      const results = [];\n      for (const text of testTexts) {\n        const result = await llmManager.executeWithPrompt('sentiment-basic', { text });\n        results.push(result);\n      }\n\n      expect(results).toHaveLength(3);\n      results.forEach(result => {\n        expect(result.promptMetadata.promptId).toBe('sentiment-basic');\n        expect(result.content).toContain('sentiment');\n      });\n\n      // Step 3: Create enhanced sentiment prompt\n      const enhancedSentimentPrompt = {\n        content: `Analyze the sentiment of the following text and provide:\n1. Overall sentiment (Positive/Negative/Neutral)\n2. Confidence score (0-100%)\n3. Key emotional indicators\n4. Tone assessment\n\nText: {{text}}`,\n        metadata: {\n          description: 'Enhanced sentiment analysis with detailed breakdown',\n          tags: ['sentiment', 'analysis', 'detailed']\n        }\n      };\n\n      const enhanced = await llmManager.savePrompt('sentiment-basic', enhancedSentimentPrompt);\n      expect(enhanced.version).toBe('1.0.1');\n\n      // Step 4: Test enhanced version\n      const enhancedResult = await llmManager.executeWithPrompt('sentiment-basic', {\n        text: testTexts[0]\n      });\n\n      expect(enhancedResult.promptMetadata.promptVersion).toBe('1.0.1');\n    });\n\n    it('should handle entity extraction workflow', async () => {\n      // Step 1: Create entity extraction prompt\n      const entityPrompt = {\n        content: `Extract entities from the following text and categorize them:\n\nText: {{text}}\n\nPlease identify:\n- People (names of individuals)\n- Organizations (companies, institutions)\n- Locations (cities, countries, addresses)\n- Dates and times\n- Other relevant entities\n\nFormat your response as a structured list.`,\n        metadata: {\n          description: 'Comprehensive entity extraction',\n          tags: ['entities', 'extraction', 'nlp']\n        }\n      };\n\n      await llmManager.savePrompt('entity-extraction', entityPrompt);\n\n      // Step 2: Test with complex text\n      const complexText = `John Smith, CEO of TechCorp Inc., announced yesterday that the company will open \n      a new headquarters in San Francisco, California by December 2024. The announcement was made during \n      a press conference at the Marriott Hotel on Market Street. Smith mentioned that the move will create \n      500 new jobs and strengthen TechCorp's presence on the West Coast.`;\n\n      const result = await llmManager.executeWithPrompt('entity-extraction', {\n        text: complexText\n      });\n\n      expect(result.promptMetadata.promptId).toBe('entity-extraction');\n      expect(result.content).toContain('entities');\n      expect(result.promptMetadata.variables.text).toBe(complexText);\n\n      // Step 3: Verify prompt hash for reproducibility\n      const prompt = await llmManager.getPrompt('entity-extraction');\n      const hash1 = llmManager.generatePromptHash(prompt);\n      \n      // Execute again with same prompt\n      const result2 = await llmManager.executeWithPrompt('entity-extraction', {\n        text: complexText\n      });\n\n      expect(result2.promptMetadata.promptHash).toBe(hash1);\n    });\n  });\n\n  describe('Multi-Prompt Workflows', () => {\n    it('should handle document processing pipeline with multiple prompts', async () => {\n      // Step 1: Create multiple specialized prompts\n      const prompts = {\n        'content-extraction': {\n          content: 'Extract the main content and key information from: {{document}}',\n          metadata: { description: 'Content extraction', tags: ['extraction'] }\n        },\n        'summary-generation': {\n          content: 'Summarize the following extracted content: {{content}}',\n          metadata: { description: 'Summary generation', tags: ['summary'] }\n        },\n        'key-insights': {\n          content: 'Identify key insights and recommendations from: {{summary}}',\n          metadata: { description: 'Insight extraction', tags: ['insights'] }\n        }\n      };\n\n      // Save all prompts\n      for (const [id, promptData] of Object.entries(prompts)) {\n        await llmManager.savePrompt(id, promptData);\n      }\n\n      // Step 2: Execute pipeline\n      const originalDocument = `This quarterly report shows significant growth in our software division, \n      with revenue increasing by 25% year-over-year. Customer satisfaction scores have improved to 4.2/5.0, \n      and our new AI features have been adopted by 78% of enterprise clients. However, we face challenges \n      in the mobile segment where competition has intensified.`;\n\n      // Extract content\n      const extraction = await llmManager.executeWithPrompt('content-extraction', {\n        document: originalDocument\n      });\n\n      // Generate summary\n      const summary = await llmManager.executeWithPrompt('summary-generation', {\n        content: extraction.content\n      });\n\n      // Extract insights\n      const insights = await llmManager.executeWithPrompt('key-insights', {\n        summary: summary.content\n      });\n\n      // Verify pipeline execution\n      expect(extraction.promptMetadata.promptId).toBe('content-extraction');\n      expect(summary.promptMetadata.promptId).toBe('summary-generation');\n      expect(insights.promptMetadata.promptId).toBe('key-insights');\n\n      // All should have version 1.0.0\n      expect(extraction.promptMetadata.promptVersion).toBe('1.0.0');\n      expect(summary.promptMetadata.promptVersion).toBe('1.0.0');\n      expect(insights.promptMetadata.promptVersion).toBe('1.0.0');\n    });\n\n    it('should handle prompt versioning across workflow iterations', async () => {\n      // Step 1: Create initial workflow prompts\n      await llmManager.savePrompt('analyze-step1', {\n        content: 'Step 1: Analyze {{input}}',\n        metadata: { description: 'Analysis step 1' }\n      });\n\n      await llmManager.savePrompt('analyze-step2', {\n        content: 'Step 2: Process {{step1_result}}',\n        metadata: { description: 'Analysis step 2' }\n      });\n\n      // Step 2: Execute initial workflow\n      const step1_v1 = await llmManager.executeWithPrompt('analyze-step1', {\n        input: 'Initial data'\n      });\n\n      const step2_v1 = await llmManager.executeWithPrompt('analyze-step2', {\n        step1_result: step1_v1.content\n      });\n\n      // Step 3: Update prompts\n      await llmManager.savePrompt('analyze-step1', {\n        content: 'Step 1 Enhanced: Thoroughly analyze {{input}} with detailed breakdown',\n        metadata: { description: 'Enhanced analysis step 1' }\n      });\n\n      await llmManager.savePrompt('analyze-step2', {\n        content: 'Step 2 Enhanced: Comprehensively process {{step1_result}} with recommendations',\n        metadata: { description: 'Enhanced analysis step 2' }\n      });\n\n      // Step 4: Execute updated workflow\n      const step1_v2 = await llmManager.executeWithPrompt('analyze-step1', {\n        input: 'Initial data'\n      });\n\n      const step2_v2 = await llmManager.executeWithPrompt('analyze-step2', {\n        step1_result: step1_v2.content\n      });\n\n      // Verify version progression\n      expect(step1_v1.promptMetadata.promptVersion).toBe('1.0.0');\n      expect(step2_v1.promptMetadata.promptVersion).toBe('1.0.0');\n      expect(step1_v2.promptMetadata.promptVersion).toBe('1.0.1');\n      expect(step2_v2.promptMetadata.promptVersion).toBe('1.0.1');\n    });\n  });\n\n  describe('Error Recovery and Edge Cases', () => {\n    it('should handle missing variable substitution gracefully', async () => {\n      const promptWithMissingVars = {\n        content: 'Process {{available_var}} and also {{missing_var}}',\n        metadata: { description: 'Test missing variables' }\n      };\n\n      await llmManager.savePrompt('missing-vars', promptWithMissingVars);\n\n      // Execute with only partial variables\n      const result = await llmManager.executeWithPrompt('missing-vars', {\n        available_var: 'provided value'\n      });\n\n      expect(result.promptMetadata.promptId).toBe('missing-vars');\n      expect(result.promptMetadata.variables.available_var).toBe('provided value');\n      // Should still execute despite missing variable\n      expect(result.content).toBeDefined();\n    });\n\n    it('should handle prompt execution failures gracefully', async () => {\n      // Mock fetch to fail\n      global.fetch = jest.fn().mockRejectedValue(new Error('Network error'));\n\n      const testPrompt = {\n        content: 'This will fail: {{input}}',\n        metadata: { description: 'Failure test' }\n      };\n\n      await llmManager.savePrompt('fail-test', testPrompt);\n\n      await expect(llmManager.executeWithPrompt('fail-test', { input: 'test' }))\n        .rejects.toThrow();\n    });\n\n    it('should handle large prompt content', async () => {\n      // Create a large prompt\n      const largeContent = 'Analyze the following large document: {{content}}\\n' + \n        'Additional instructions: '.repeat(100) + \n        'Please provide detailed analysis covering all aspects mentioned above.';\n\n      const largePrompt = {\n        content: largeContent,\n        metadata: { description: 'Large prompt test' }\n      };\n\n      const saved = await llmManager.savePrompt('large-prompt', largePrompt);\n      expect(saved.content.length).toBeGreaterThan(1000);\n\n      // Execute with large content\n      const largeDocument = 'Document content: '.repeat(200);\n      const result = await llmManager.executeWithPrompt('large-prompt', {\n        content: largeDocument\n      });\n\n      expect(result.promptMetadata.promptId).toBe('large-prompt');\n    });\n  });\n\n  describe('Performance and Concurrency', () => {\n    it('should handle concurrent prompt executions', async () => {\n      // Create test prompt\n      await llmManager.savePrompt('concurrent-test', {\n        content: 'Process: {{data}}',\n        metadata: { description: 'Concurrency test' }\n      });\n\n      // Execute multiple prompts concurrently\n      const promises = [];\n      for (let i = 0; i < 5; i++) {\n        promises.push(\n          llmManager.executeWithPrompt('concurrent-test', {\n            data: `Dataset ${i}`\n          })\n        );\n      }\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(5);\n      results.forEach((result, index) => {\n        expect(result.promptMetadata.promptId).toBe('concurrent-test');\n        expect(result.promptMetadata.variables.data).toBe(`Dataset ${index}`);\n      });\n    });\n\n    it('should maintain prompt integrity under concurrent updates', async () => {\n      // Create initial prompt\n      await llmManager.savePrompt('update-test', {\n        content: 'Version 0',\n        metadata: { description: 'Update test' }\n      });\n\n      // Concurrent updates\n      const updatePromises = [];\n      for (let i = 1; i <= 3; i++) {\n        updatePromises.push(\n          llmManager.savePrompt('update-test', {\n            content: `Version ${i}`,\n            metadata: { description: `Update test v${i}` }\n          })\n        );\n      }\n\n      const updates = await Promise.all(updatePromises);\n\n      // Verify final state\n      const finalPrompt = await llmManager.getPrompt('update-test');\n      expect(finalPrompt.version).toMatch(/^1\\.0\\.[1-3]$/); // Should be one of the versions\n      \n      // All updates should have different versions\n      const versions = updates.map(u => u.version);\n      const uniqueVersions = new Set(versions);\n      expect(uniqueVersions.size).toBe(3); // All versions should be unique\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}