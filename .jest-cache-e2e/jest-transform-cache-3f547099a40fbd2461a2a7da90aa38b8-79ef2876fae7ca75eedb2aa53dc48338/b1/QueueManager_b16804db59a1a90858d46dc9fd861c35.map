{"version":3,"names":["Queue","require","Redis","EventEmitter","logger","QueueManager","constructor","config","redis","host","process","env","REDIS_HOST","port","REDIS_PORT","password","REDIS_PASSWORD","db","queues","ingestion","name","concurrency","attempts","backoff","type","delay","Map","redisClient","isInitialized","stats","totalJobs","completedJobs","failedJobs","activeJobs","waitingJobs","initialize","finalConfig","undefined","redisConfig","socket","database","createClient","connect","ingestionQueue","defaultJobOptions","removeOnComplete","removeOnFail","_setupQueueEventListeners","set","emit","error","Error","message","addIngestionJob","jobData","options","queue","get","jobOptions","priority","job","add","jobId","id","data","startProcessing","processor","result","getStats","waiting","getWaiting","active","getActive","completed","getCompleted","failed","getFailed","length","getJob","removeJob","remove","retryJob","retry","pauseQueue","pause","resumeQueue","resume","cleanQueue","grace","clean","shutdown","close","quit","clear","updateConfig","newConfig","info","previousConfig","redisChanged","queueName","queueConfig","on","progress","module","exports"],"sources":["QueueManager.js"],"sourcesContent":["const Queue = require('bull');\nconst Redis = require('redis');\nconst { EventEmitter } = require('events');\nconst logger = require('../../utils/logger'); // Assuming logger is defined in a separate file\n\n/**\n * Queue Manager for TheWell Pipeline Ingestion System\n * Manages job queues, processing, retries, and monitoring\n */\nclass QueueManager extends EventEmitter {\n  constructor(config = {}) {\n    super();\n    \n    this.config = {\n      redis: {\n        host: config.redis?.host || process.env.REDIS_HOST || 'localhost',\n        port: config.redis?.port || process.env.REDIS_PORT || 6379,\n        password: config.redis?.password || process.env.REDIS_PASSWORD,\n        db: config.redis?.db || 0\n      },\n      queues: {\n        ingestion: {\n          name: 'ingestion-queue',\n          concurrency: config.concurrency || 5,\n          attempts: config.attempts || 3,\n          backoff: {\n            type: 'exponential',\n            delay: 2000\n          }\n        }\n      },\n      ...config\n    };\n\n    this.queues = new Map();\n    this.redisClient = null;\n    this.isInitialized = false;\n    this.stats = {\n      totalJobs: 0,\n      completedJobs: 0,\n      failedJobs: 0,\n      activeJobs: 0,\n      waitingJobs: 0\n    };\n  }\n\n  /**\n   * Initialize the queue manager and create queues\n   */\n  async initialize(config = {}) {\n    try {\n      // Merge provided config with defaults\n      const finalConfig = {\n        redis: {\n          host: config.redis?.host || this.config.redis.host,\n          port: config.redis?.port || this.config.redis.port,\n          password: config.redis?.password || this.config.redis.password,\n          db: config.redis?.db !== undefined ? config.redis.db : this.config.redis.db\n        },\n        queues: {\n          ingestion: {\n            name: config.queues?.ingestion?.name || this.config.queues.ingestion.name,\n            attempts: config.queues?.ingestion?.attempts || this.config.queues.ingestion.attempts,\n            backoff: config.queues?.ingestion?.backoff || this.config.queues.ingestion.backoff\n          }\n        }\n      };\n\n      // Create Redis client for monitoring\n      const redisConfig = {\n        socket: {\n          host: finalConfig.redis.host,\n          port: finalConfig.redis.port\n        }\n      };\n\n      if (finalConfig.redis.password) {\n        redisConfig.password = finalConfig.redis.password;\n      }\n\n      if (finalConfig.redis.db !== undefined) {\n        redisConfig.database = finalConfig.redis.db;\n      }\n\n      this.redisClient = Redis.createClient(redisConfig);\n      \n      // Connect to Redis\n      await this.redisClient.connect();\n\n      // Create ingestion queue\n      const ingestionQueue = new Queue(\n        finalConfig.queues.ingestion.name,\n        {\n          redis: redisConfig,\n          defaultJobOptions: {\n            attempts: finalConfig.queues.ingestion.attempts,\n            backoff: finalConfig.queues.ingestion.backoff,\n            removeOnComplete: 100, // Keep last 100 completed jobs\n            removeOnFail: 50 // Keep last 50 failed jobs\n          }\n        }\n      );\n\n      // Set up event listeners\n      this._setupQueueEventListeners(ingestionQueue);\n\n      this.queues.set('ingestion', ingestionQueue);\n      this.isInitialized = true;\n      this.emit('initialized');\n      return true;\n    } catch (error) {\n      throw new Error(`Failed to initialize QueueManager: ${error.message}`);\n    }\n  }\n\n  /**\n   * Add a job to the ingestion queue\n   */\n  async addIngestionJob(jobData, options = {}) {\n    if (!this.isInitialized) {\n      throw new Error('QueueManager not initialized');\n    }\n\n    const queue = this.queues.get('ingestion');\n    const jobOptions = {\n      priority: options.priority || 0,\n      delay: options.delay || 0,\n      ...options\n    };\n\n    try {\n      const job = await queue.add('process-ingestion', jobData, jobOptions);\n      this.stats.totalJobs++;\n      this.stats.waitingJobs++;\n      \n      this.emit('job-added', {\n        jobId: job.id,\n        type: 'ingestion',\n        data: jobData\n      });\n\n      return job;\n    } catch (error) {\n      this.emit('error', error);\n      throw new Error(`Failed to add ingestion job: ${error.message}`);\n    }\n  }\n\n  /**\n   * Process ingestion jobs\n   */\n  async startProcessing(processor) {\n    if (!this.isInitialized) {\n      throw new Error('QueueManager not initialized');\n    }\n\n    const queue = this.queues.get('ingestion');\n    const concurrency = this.config.queues.ingestion.concurrency;\n\n    queue.process('process-ingestion', concurrency, async (job) => {\n      try {\n        this.stats.activeJobs++;\n        this.stats.waitingJobs--;\n\n        this.emit('job-started', {\n          jobId: job.id,\n          data: job.data\n        });\n\n        const result = await processor(job.data, job);\n        \n        this.stats.activeJobs--;\n        this.stats.completedJobs++;\n\n        this.emit('job-completed', {\n          jobId: job.id,\n          result\n        });\n\n        return result;\n      } catch (error) {\n        this.stats.activeJobs--;\n        this.stats.failedJobs++;\n\n        this.emit('job-failed', {\n          jobId: job.id,\n          error: error.message\n        });\n\n        throw error;\n      }\n    });\n\n    this.emit('processing-started');\n  }\n\n  /**\n   * Get queue statistics\n   */\n  async getStats() {\n    if (!this.isInitialized) {\n      return this.stats;\n    }\n\n    try {\n      const queue = this.queues.get('ingestion');\n      const waiting = await queue.getWaiting();\n      const active = await queue.getActive();\n      const completed = await queue.getCompleted();\n      const failed = await queue.getFailed();\n\n      return {\n        ...this.stats,\n        waitingJobs: waiting.length,\n        activeJobs: active.length,\n        completedJobs: completed.length,\n        failedJobs: failed.length,\n        totalJobs: this.stats.totalJobs\n      };\n    } catch (error) {\n      this.emit('error', error);\n      return this.stats;\n    }\n  }\n\n  /**\n   * Get job by ID\n   */\n  async getJob(jobId) {\n    if (!this.isInitialized) {\n      throw new Error('QueueManager not initialized');\n    }\n\n    const queue = this.queues.get('ingestion');\n    return await queue.getJob(jobId);\n  }\n\n  /**\n   * Remove job by ID\n   */\n  async removeJob(jobId) {\n    if (!this.isInitialized) {\n      throw new Error('QueueManager not initialized');\n    }\n\n    const queue = this.queues.get('ingestion');\n    const job = await queue.getJob(jobId);\n    \n    if (job) {\n      await job.remove();\n      this.emit('job-removed', { jobId });\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Retry failed job\n   */\n  async retryJob(jobId) {\n    if (!this.isInitialized) {\n      throw new Error('QueueManager not initialized');\n    }\n\n    const queue = this.queues.get('ingestion');\n    const job = await queue.getJob(jobId);\n    \n    if (job) {\n      await job.retry();\n      this.emit('job-retried', { jobId });\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Pause queue processing\n   */\n  async pauseQueue() {\n    if (!this.isInitialized) {\n      throw new Error('QueueManager not initialized');\n    }\n\n    const queue = this.queues.get('ingestion');\n    await queue.pause();\n    this.emit('queue-paused');\n  }\n\n  /**\n   * Resume queue processing\n   */\n  async resumeQueue() {\n    if (!this.isInitialized) {\n      throw new Error('QueueManager not initialized');\n    }\n\n    const queue = this.queues.get('ingestion');\n    await queue.resume();\n    this.emit('queue-resumed');\n  }\n\n  /**\n   * Clean up completed and failed jobs\n   */\n  async cleanQueue(grace = 24 * 60 * 60 * 1000) { // 24 hours default\n    if (!this.isInitialized) {\n      throw new Error('QueueManager not initialized');\n    }\n\n    const queue = this.queues.get('ingestion');\n    \n    // Clean completed jobs older than grace period\n    await queue.clean(grace, 'completed');\n    \n    // Clean failed jobs older than grace period\n    await queue.clean(grace, 'failed');\n    \n    this.emit('queue-cleaned');\n  }\n\n  /**\n   * Shutdown the queue manager\n   */\n  async shutdown() {\n    if (!this.isInitialized) {\n      return;\n    }\n\n    try {\n      // Close all queues\n      for (const [name, queue] of this.queues) {\n        await queue.close();\n      }\n\n      // Close Redis client\n      if (this.redisClient) {\n        await this.redisClient.quit();\n      }\n\n      this.queues.clear();\n      this.isInitialized = false;\n      \n      this.emit('shutdown');\n    } catch (error) {\n      throw new Error(`Failed to shutdown QueueManager: ${error.message}`);\n    }\n  }\n\n  /**\n   * Update queue configuration dynamically\n   */\n  async updateConfig(newConfig) {\n    logger.info('Updating queue configuration', { newConfig });\n    \n    try {\n      const previousConfig = { ...this.config };\n      \n      // Merge new configuration with existing\n      this.config = {\n        ...this.config,\n        ...newConfig,\n        redis: {\n          ...this.config.redis,\n          ...newConfig.redis\n        },\n        queues: {\n          ...this.config.queues,\n          ...newConfig.queues\n        }\n      };\n      \n      // Check if Redis configuration changed\n      const redisChanged = \n        previousConfig.redis.host !== this.config.redis.host ||\n        previousConfig.redis.port !== this.config.redis.port ||\n        previousConfig.redis.db !== this.config.redis.db;\n      \n      if (redisChanged && this.isInitialized) {\n        logger.info('Redis configuration changed, reconnecting...');\n        await this.shutdown();\n        await this.initialize();\n      } else if (this.isInitialized) {\n        // Update existing queues with new configuration\n        for (const [queueName, queue] of this.queues) {\n          if (this.config.queues[queueName]) {\n            // Update queue settings that can be changed at runtime\n            const queueConfig = this.config.queues[queueName];\n            if (queueConfig.concurrency !== undefined) {\n              queue.concurrency = queueConfig.concurrency;\n            }\n          }\n        }\n      }\n      \n      this.emit('configUpdated', {\n        previousConfig,\n        newConfig: this.config\n      });\n      \n      logger.info('Queue configuration updated successfully');\n      \n    } catch (error) {\n      logger.error('Failed to update queue configuration', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Set up event listeners for queue monitoring\n   */\n  _setupQueueEventListeners(queue) {\n    queue.on('completed', (job, result) => {\n      this.emit('job-completed', {\n        jobId: job.id,\n        result\n      });\n    });\n\n    queue.on('failed', (job, error) => {\n      this.emit('job-failed', {\n        jobId: job.id,\n        error: error.message\n      });\n    });\n\n    queue.on('stalled', (job) => {\n      this.emit('job-stalled', {\n        jobId: job.id\n      });\n    });\n\n    queue.on('progress', (job, progress) => {\n      this.emit('job-progress', {\n        jobId: job.id,\n        progress\n      });\n    });\n\n    queue.on('error', (error) => {\n      this.emit('error', error);\n    });\n  }\n}\n\nmodule.exports = QueueManager;\n"],"mappings":"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","ignoreList":[]}