{"version":3,"names":["fs","require","promises","path","mime","crypto","BaseSourceHandler","SOURCE_TYPES","VISIBILITY_LEVELS","StaticSourceHandler","constructor","config","fileTypes","supportedExtensions","map","ext","startsWith","initialize","logger","info","sourceId","id","basePath","Error","access","error","validateConfig","required","missing","filter","field","length","join","discover","documents","includePatterns","excludePatterns","files","_walkDirectory","filePath","relativePath","relative","_matchesPatterns","extname","toLowerCase","includes","debug","stats","stat","document","_generateDocumentId","title","basename","url","name","extension","size","lastModified","mtime","contentType","lookup","metadata","sourceType","STATIC","originalPath","fileExtension","directory","dirname","visibility","INTERNAL","push","warn","message","documentsFound","extract","documentId","content","encoding","_isBinaryExtension","fileName","readFile","hash","createHash","update","digest","contentHash","extractedAt","Date","extractionMethod","originalSize","transform","extractedContent","transformed","_extractTitle","_cleanContent","transformedAt","wordCount","_countWords","characterCount","dir","entries","readdir","withFileTypes","recursive","entry","fullPath","isDirectory","subFiles","isFile","included","some","pattern","excluded","titleMatch","match","trim","replace","split","word","_isAllowedFileType","binaryExtensions","module","exports"],"sources":["StaticSourceHandler.js"],"sourcesContent":["const fs = require('fs').promises;\nconst path = require('path');\nconst mime = require('mime-types');\nconst crypto = require('crypto');\nconst { BaseSourceHandler, SOURCE_TYPES, VISIBILITY_LEVELS } = require('../types');\n\n/**\n * Static Source Handler\n * Handles one-time bulk loads from file systems, archives, or static datasets\n */\nclass StaticSourceHandler extends BaseSourceHandler {\n  constructor(config) {\n    super(config);\n    // Handle fileTypes configuration and ensure proper extension format\n    const fileTypes = config.config?.fileTypes || ['txt', 'md', 'pdf', 'docx', 'html', 'json', 'csv'];\n    this.supportedExtensions = fileTypes.map(ext => ext.startsWith('.') ? ext : `.${ext}`);\n  }\n\n  /**\n   * Initialize the static source handler\n   */\n  async initialize() {\n    this.logger?.info('Initializing StaticSourceHandler', { sourceId: this.config.id });\n    \n    // Validate required configuration\n    if (!this.config.config?.basePath) {\n      throw new Error('StaticSourceHandler requires config.basePath');\n    }\n\n    // Ensure base path exists and is accessible\n    try {\n      await fs.access(this.config.config.basePath);\n    } catch (error) {\n      throw new Error(`Base path not accessible: ${this.config.config.basePath}`);\n    }\n\n    this.logger?.info('StaticSourceHandler initialized successfully');\n  }\n\n  /**\n   * Validate static source configuration\n   */\n  async validateConfig(config) {\n    const required = ['basePath'];\n    const missing = required.filter(field => !config.config?.[field]);\n    \n    if (missing.length > 0) {\n      throw new Error(`Missing required config fields: ${missing.join(', ')}`);\n    }\n\n    // Validate base path exists\n    try {\n      await fs.access(config.config.basePath);\n      return true;\n    } catch (error) {\n      throw new Error(`Invalid basePath: ${config.config.basePath}`);\n    }\n  }\n\n  /**\n   * Discover all files in the static source\n   */\n  async discover() {\n    this.logger?.info('Starting discovery for static source', { \n      sourceId: this.config.id,\n      basePath: this.config.config.basePath \n    });\n\n    const documents = [];\n    const basePath = this.config.config.basePath;\n    const includePatterns = this.config.config.includePatterns || ['**/*'];\n    const excludePatterns = this.config.config.excludePatterns || [];\n\n    try {\n      const files = await this._walkDirectory(basePath);\n      \n      for (const filePath of files) {\n        try {\n          const relativePath = path.relative(basePath, filePath);\n          \n          // Check if file matches include/exclude patterns\n          if (!this._matchesPatterns(relativePath, includePatterns, excludePatterns)) {\n            continue;\n          }\n\n          // Check if file extension is supported\n          const ext = path.extname(filePath).toLowerCase();\n          if (!this.supportedExtensions.includes(ext)) {\n            this.logger?.debug('Skipping unsupported file type', { filePath, ext });\n            continue;\n          }\n\n          const stats = await fs.stat(filePath);\n          const document = {\n            id: this._generateDocumentId(filePath),\n            title: path.basename(filePath), // Add title property for compatibility\n            path: filePath,\n            url: filePath, // Add url property for compatibility\n            relativePath,\n            name: path.basename(filePath),\n            extension: ext,\n            size: stats.size,\n            lastModified: stats.mtime,\n            contentType: mime.lookup(filePath) || 'application/octet-stream',\n            metadata: {\n              sourceId: this.config.id,\n              sourceType: SOURCE_TYPES.STATIC,\n              originalPath: filePath,\n              fileExtension: ext,\n              directory: path.dirname(relativePath),\n              visibility: this.config.visibility || VISIBILITY_LEVELS.INTERNAL\n            }\n          };\n\n          documents.push(document);\n        } catch (error) {\n          this.logger?.warn('Error processing file during discovery', { \n            filePath, \n            error: error.message \n          });\n        }\n      }\n\n      this.logger?.info('Discovery completed', { \n        sourceId: this.config.id,\n        documentsFound: documents.length \n      });\n\n      return documents;\n    } catch (error) {\n      this.logger?.error('Discovery failed', { \n        sourceId: this.config.id,\n        error: error.message \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Extract content from a static file\n   */\n  async extract(document) {\n    this.logger?.info('Extracting content from document', { \n      documentId: document.id,\n      path: document.filePath || document.path \n    });\n\n    try {\n      const filePath = document.filePath || document.path;\n      const fileExtension = path.extname(filePath);\n      \n      let content;\n      let encoding = 'utf-8';\n      \n      if (this._isBinaryExtension(fileExtension)) {\n        // Handle binary files\n        const fileName = path.basename(filePath);\n        content = `[Binary file: ${fileName}]`;\n        encoding = 'binary';\n      } else {\n        // Handle text files\n        content = await fs.readFile(filePath, 'utf-8');\n      }\n      \n      const hash = crypto.createHash('sha256').update(content).digest('hex');\n\n      return {\n        id: document.id,\n        content,\n        contentHash: hash,\n        extractedAt: new Date(),\n        metadata: {\n          ...document.metadata,\n          extractionMethod: 'file-system-read',\n          encoding,\n          originalSize: document.size\n        }\n      };\n    } catch (error) {\n      this.logger?.error('Content extraction failed', { \n        documentId: document.id,\n        path: document.filePath || document.path,\n        error: error.message \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Transform extracted content to standard format\n   */\n  async transform(extractedContent) {\n    this.logger?.debug('Transforming content', { \n      documentId: extractedContent.id \n    });\n\n    // Basic transformation - can be extended for different file types\n    const transformed = {\n      id: extractedContent.id,\n      title: this._extractTitle(extractedContent),\n      content: this._cleanContent(extractedContent.content),\n      contentHash: extractedContent.contentHash,\n      metadata: {\n        ...extractedContent.metadata,\n        transformedAt: new Date(),\n        wordCount: this._countWords(extractedContent.content),\n        characterCount: extractedContent.content.length\n      }\n    };\n\n    return transformed;\n  }\n\n  /**\n   * Walk directory recursively to find all files\n   */\n  async _walkDirectory(dir) {\n    const files = [];\n    const entries = await fs.readdir(dir, { withFileTypes: true });\n    const recursive = this.config.config.recursive !== false; // Default to true\n\n    for (const entry of entries) {\n      const fullPath = path.join(dir, entry.name);\n      \n      if (entry.isDirectory()) {\n        // Skip hidden directories and common ignore patterns\n        if (!entry.name.startsWith('.') && !['node_modules', 'dist', 'build'].includes(entry.name)) {\n          if (recursive) {\n            const subFiles = await this._walkDirectory(fullPath);\n            files.push(...subFiles);\n          }\n        }\n      } else if (entry.isFile()) {\n        files.push(fullPath);\n      }\n    }\n\n    return files;\n  }\n\n  /**\n   * Check if file path matches include/exclude patterns\n   */\n  _matchesPatterns(filePath, includePatterns, excludePatterns) {\n    // Simple pattern matching - can be enhanced with glob patterns\n    const included = includePatterns.some(pattern => {\n      if (pattern === '**/*') return true;\n      return filePath.includes(pattern);\n    });\n\n    const excluded = excludePatterns.some(pattern => {\n      return filePath.includes(pattern);\n    });\n\n    return included && !excluded;\n  }\n\n  /**\n   * Generate unique document ID based on file path\n   */\n  _generateDocumentId(filePath) {\n    return crypto.createHash('md5').update(filePath).digest('hex');\n  }\n\n  /**\n   * Extract title from content or use filename\n   */\n  _extractTitle(extractedContent) {\n    const content = extractedContent.content;\n    const metadata = extractedContent.metadata;\n\n    // Try to extract title from content (markdown, HTML, etc.)\n    const titleMatch = content.match(/^#\\s+(.+)$/m) || // Markdown H1\n                      content.match(/<title>(.+)<\\/title>/i); // HTML title\n\n    if (titleMatch && titleMatch[1]) {\n      return titleMatch[1].trim();\n    }\n\n    // Fallback to filename without extension\n    return path.basename(metadata.originalPath, path.extname(metadata.originalPath));\n  }\n\n  /**\n   * Clean and normalize content\n   */\n  _cleanContent(content) {\n    return content\n      .replace(/\\r\\n/g, '\\n') // Normalize line endings\n      .replace(/\\n{3,}/g, '\\n\\n') // Remove excessive newlines\n      .replace(/[ \\t]+$/gm, '') // Remove trailing whitespace from each line\n      .trim();\n  }\n\n  /**\n   * Count words in content\n   */\n  _countWords(content) {\n    return content.split(/\\s+/).filter(word => word.length > 0).length;\n  }\n\n  /**\n   * Check if file type is allowed\n   */\n  _isAllowedFileType(filePath) {\n    const ext = path.extname(filePath).toLowerCase();\n    return this.config.config.fileTypes.includes(ext);\n  }\n\n  /**\n   * Check if file extension is binary\n   */\n  _isBinaryExtension(ext) {\n    const binaryExtensions = ['.pdf', '.doc', '.docx', '.jpg', '.jpeg', '.png', '.gif', '.zip', '.tar', '.gz'];\n    return binaryExtensions.includes(ext.toLowerCase());\n  }\n}\n\nmodule.exports = StaticSourceHandler;\n"],"mappings":"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","ignoreList":[]}