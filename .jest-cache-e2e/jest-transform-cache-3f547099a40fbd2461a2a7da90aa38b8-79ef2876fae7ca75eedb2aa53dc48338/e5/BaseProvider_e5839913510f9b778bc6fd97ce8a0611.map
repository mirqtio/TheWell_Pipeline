{"version":3,"names":["BaseProvider","constructor","config","Error","maxRetries","timeout","isHealthy","lastHealthCheck","errorCount","requestCount","getName","getSupportedModels","complete","request","calculateCost","model","inputTokens","outputTokens","healthCheck","startTime","Date","now","testRequest","prompt","options","maxTokens","responseTime","healthy","timestamp","error","message","getStats","name","supportedModels","resetErrorCount","incrementRequestCount","incrementErrorCount","module","exports"],"sources":["BaseProvider.js"],"sourcesContent":["/**\n * Base Provider Interface\n * \n * Abstract base class that defines the standard interface for all LLM providers.\n * This ensures consistent behavior across different provider implementations.\n */\n\nclass BaseProvider {\n  constructor(config = {}) {\n    if (this.constructor === BaseProvider) {\n      throw new Error('BaseProvider is abstract and cannot be instantiated directly');\n    }\n    \n    this.config = {\n      maxRetries: 3,\n      timeout: 30000,\n      ...config\n    };\n    \n    this.isHealthy = true;\n    this.lastHealthCheck = null;\n    this.errorCount = 0;\n    this.requestCount = 0;\n  }\n\n  /**\n   * Get provider name\n   * @returns {string} Provider name\n   */\n  getName() {\n    throw new Error('getName() must be implemented by subclass');\n  }\n\n  /**\n   * Get supported models for this provider\n   * @returns {Array<string>} List of supported model names\n   */\n  getSupportedModels() {\n    throw new Error('getSupportedModels() must be implemented by subclass');\n  }\n\n  /**\n   * Execute a completion request\n   * @param {Object} request - The completion request\n   * @param {string} request.model - Model to use\n   * @param {string} request.prompt - Input prompt\n   * @param {Object} request.options - Additional options\n   * @returns {Promise<Object>} Completion response\n   */\n  async complete(request) {\n    throw new Error('complete() must be implemented by subclass');\n  }\n\n  /**\n   * Calculate cost for a request\n   * @param {string} model - Model used\n   * @param {number} inputTokens - Number of input tokens\n   * @param {number} outputTokens - Number of output tokens\n   * @returns {Object} Cost breakdown\n   */\n  calculateCost(model, inputTokens, outputTokens) {\n    throw new Error('calculateCost() must be implemented by subclass');\n  }\n\n  /**\n   * Check provider health\n   * @returns {Promise<boolean>} Health status\n   */\n  async healthCheck() {\n    try {\n      const startTime = Date.now();\n      \n      // Simple test request\n      const testRequest = {\n        model: this.getSupportedModels()[0],\n        prompt: 'Hello',\n        options: { maxTokens: 5 }\n      };\n      \n      await this.complete(testRequest);\n      \n      const responseTime = Date.now() - startTime;\n      this.isHealthy = true;\n      this.lastHealthCheck = new Date();\n      \n      return {\n        healthy: true,\n        responseTime,\n        timestamp: this.lastHealthCheck\n      };\n    } catch (error) {\n      this.isHealthy = false;\n      this.lastHealthCheck = new Date();\n      this.errorCount++;\n      \n      return {\n        healthy: false,\n        error: error.message,\n        timestamp: this.lastHealthCheck\n      };\n    }\n  }\n\n  /**\n   * Get provider statistics\n   * @returns {Object} Provider stats\n   */\n  getStats() {\n    return {\n      name: this.getName(),\n      isHealthy: this.isHealthy,\n      lastHealthCheck: this.lastHealthCheck,\n      errorCount: this.errorCount,\n      requestCount: this.requestCount,\n      supportedModels: this.getSupportedModels()\n    };\n  }\n\n  /**\n   * Reset error count (useful for recovery scenarios)\n   */\n  resetErrorCount() {\n    this.errorCount = 0;\n  }\n\n  /**\n   * Increment request counter\n   */\n  incrementRequestCount() {\n    this.requestCount++;\n  }\n\n  /**\n   * Increment error counter\n   */\n  incrementErrorCount() {\n    this.errorCount++;\n  }\n}\n\nmodule.exports = BaseProvider;\n"],"mappings":"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","ignoreList":[]}