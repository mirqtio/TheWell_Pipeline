{"version":3,"names":["logger","require","ConfigManager","ConfigIntegration","constructor","options","configManager","components","Map","isInitialized","handleConfigChange","bind","handleConfigRemoval","handleConfigError","initialize","warn","on","startWatching","info","error","message","shutdown","removeListener","stopWatching","registerComponent","name","component","Error","updateConfig","set","debug","unregisterComponent","has","delete","getConfig","configType","getAllConfigs","reloadConfig","filePath","loadConfig","event","newConfig","previousConfig","hasChanges","JSON","stringify","applyConfigToComponents","rollbackError","notifyConfigRemoval","type","listenerCount","emit","applicableComponents","getApplicableComponents","length","updatePromises","map","Promise","all","notifyPromises","applicable","handlesConfigType","push","getStats","componentCount","size","registeredComponents","Array","from","keys","validateAllConfigs","configs","results","config","Object","entries","validateConfig","valid","details","module","exports"],"sources":["ConfigIntegration.js"],"sourcesContent":["const logger = require('../utils/logger');\nconst ConfigManager = require('./ConfigManager');\n\n/**\n * ConfigIntegration handles the integration between ConfigManager and the ingestion system\n * Applies configuration changes to running components safely\n */\nclass ConfigIntegration {\n  constructor(options = {}) {\n    this.configManager = options.configManager || new ConfigManager(options);\n    this.components = new Map();\n    this.isInitialized = false;\n    \n    // Bind event handlers\n    this.handleConfigChange = this.handleConfigChange.bind(this);\n    this.handleConfigRemoval = this.handleConfigRemoval.bind(this);\n    this.handleConfigError = this.handleConfigError.bind(this);\n  }\n\n  /**\n   * Initialize the configuration integration\n   */\n  async initialize() {\n    if (this.isInitialized) {\n      logger.warn('ConfigIntegration is already initialized');\n      return;\n    }\n\n    try {\n      // Set up event listeners\n      this.configManager.on('config-changed', this.handleConfigChange);\n      this.configManager.on('config-removed', this.handleConfigRemoval);\n      this.configManager.on('error', this.handleConfigError);\n\n      // Start watching configurations\n      await this.configManager.startWatching();\n      \n      this.isInitialized = true;\n      logger.info('ConfigIntegration initialized successfully');\n      \n    } catch (error) {\n      logger.error('Failed to initialize ConfigIntegration', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Shutdown the configuration integration\n   */\n  async shutdown() {\n    if (!this.isInitialized) {\n      return;\n    }\n\n    try {\n      // Remove event listeners\n      this.configManager.removeListener('config-changed', this.handleConfigChange);\n      this.configManager.removeListener('config-removed', this.handleConfigRemoval);\n      this.configManager.removeListener('error', this.handleConfigError);\n\n      // Stop watching configurations\n      await this.configManager.stopWatching();\n      \n      this.isInitialized = false;\n      logger.info('ConfigIntegration shutdown successfully');\n      \n    } catch (error) {\n      logger.error('Error during ConfigIntegration shutdown', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Register a component for configuration updates\n   */\n  registerComponent(name, component) {\n    if (!name || !component) {\n      throw new Error('Component name and instance are required');\n    }\n\n    if (!component.updateConfig || typeof component.updateConfig !== 'function') {\n      throw new Error('Component must have an updateConfig method');\n    }\n\n    this.components.set(name, component);\n    logger.debug('Registered component for configuration updates', { name });\n  }\n\n  /**\n   * Unregister a component\n   */\n  unregisterComponent(name) {\n    if (this.components.has(name)) {\n      this.components.delete(name);\n      logger.debug('Unregistered component', { name });\n    }\n  }\n\n  /**\n   * Get current configuration for a specific type\n   */\n  getConfig(configType) {\n    return this.configManager.getConfig(configType);\n  }\n\n  /**\n   * Get all current configurations\n   */\n  getAllConfigs() {\n    return this.configManager.getAllConfigs();\n  }\n\n  /**\n   * Manually reload a configuration file\n   */\n  async reloadConfig(filePath) {\n    try {\n      await this.configManager.loadConfig(filePath);\n      logger.info('Configuration reloaded successfully', { filePath });\n    } catch (error) {\n      logger.error('Failed to reload configuration', { filePath, error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Handle configuration changes\n   */\n  async handleConfigChange(event) {\n    const { configType, newConfig, previousConfig, filePath } = event;\n    \n    try {\n      logger.info('Applying configuration change', { \n        configType, \n        filePath,\n        hasChanges: JSON.stringify(previousConfig) !== JSON.stringify(newConfig)\n      });\n\n      // Apply configuration to relevant components\n      await this.applyConfigToComponents(configType, newConfig, previousConfig);\n      \n      logger.info('Configuration change applied successfully', { configType });\n      \n    } catch (error) {\n      logger.error('Failed to apply configuration change', {\n        configType,\n        filePath,\n        error: error.message\n      });\n      \n      // Attempt to rollback if possible\n      if (previousConfig) {\n        try {\n          await this.applyConfigToComponents(configType, previousConfig, newConfig);\n          logger.info('Configuration rollback successful', { configType });\n        } catch (rollbackError) {\n          logger.error('Configuration rollback failed', {\n            configType,\n            error: rollbackError.message\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle configuration removal\n   */\n  async handleConfigRemoval(event) {\n    const { configType, previousConfig, filePath } = event;\n    \n    try {\n      logger.info('Handling configuration removal', { configType, filePath });\n\n      // Notify components about configuration removal\n      await this.notifyConfigRemoval(configType, previousConfig);\n      \n      logger.info('Configuration removal handled successfully', { configType });\n      \n    } catch (error) {\n      logger.error('Failed to handle configuration removal', {\n        configType,\n        filePath,\n        error: error.message\n      });\n    }\n  }\n\n  /**\n   * Handle configuration errors\n   */\n  handleConfigError(event) {\n    const { type, error, filePath } = event;\n    \n    logger.error('Configuration error occurred', {\n      type,\n      filePath,\n      error: error.message\n    });\n\n    // Emit error for external handling\n    if (this.configManager.listenerCount && this.configManager.listenerCount('integration-error') > 0) {\n      this.configManager.emit('integration-error', event);\n    }\n  }\n\n  /**\n   * Apply configuration changes to registered components\n   */\n  async applyConfigToComponents(configType, newConfig, previousConfig) {\n    const applicableComponents = this.getApplicableComponents(configType);\n    \n    if (applicableComponents.length === 0) {\n      logger.debug('No components to update for config type', { configType });\n      return;\n    }\n\n    const updatePromises = applicableComponents.map(async ({ name, component }) => {\n      try {\n        await component.updateConfig(configType, newConfig, previousConfig);\n        logger.debug('Component configuration updated', { name, configType });\n      } catch (error) {\n        logger.error('Failed to update component configuration', {\n          name,\n          configType,\n          error: error.message\n        });\n        throw error;\n      }\n    });\n\n    await Promise.all(updatePromises);\n  }\n\n  /**\n   * Notify components about configuration removal\n   */\n  async notifyConfigRemoval(configType, previousConfig) {\n    const applicableComponents = this.getApplicableComponents(configType);\n    \n    const notifyPromises = applicableComponents.map(async ({ name, component }) => {\n      try {\n        if (component.handleConfigRemoval && typeof component.handleConfigRemoval === 'function') {\n          await component.handleConfigRemoval(configType, previousConfig);\n          logger.debug('Component notified of configuration removal', { name, configType });\n        }\n      } catch (error) {\n        logger.error('Failed to notify component of configuration removal', {\n          name,\n          configType,\n          error: error.message\n        });\n      }\n    });\n\n    await Promise.all(notifyPromises);\n  }\n\n  /**\n   * Get components that should be updated for a specific configuration type\n   */\n  getApplicableComponents(configType) {\n    const applicable = [];\n    \n    for (const [name, component] of this.components) {\n      // Check if component has a method to determine if it handles this config type\n      if (component.handlesConfigType && typeof component.handlesConfigType === 'function') {\n        if (component.handlesConfigType(configType)) {\n          applicable.push({ name, component });\n        }\n      } else {\n        // Default: assume all components can handle any config type\n        applicable.push({ name, component });\n      }\n    }\n    \n    return applicable;\n  }\n\n  /**\n   * Get integration statistics\n   */\n  getStats() {\n    return {\n      isInitialized: this.isInitialized,\n      componentCount: this.components.size,\n      registeredComponents: Array.from(this.components.keys()),\n      configManager: this.configManager.getStats()\n    };\n  }\n\n  /**\n   * Validate all current configurations\n   */\n  async validateAllConfigs() {\n    const configs = this.configManager.getAllConfigs();\n    const results = {};\n    \n    for (const [configType, config] of Object.entries(configs)) {\n      try {\n        await this.configManager.validateConfig(configType, config);\n        results[configType] = { valid: true };\n      } catch (error) {\n        results[configType] = { \n          valid: false, \n          error: error.message,\n          details: error.details \n        };\n      }\n    }\n    \n    return results;\n  }\n}\n\nmodule.exports = ConfigIntegration;"],"mappings":"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","ignoreList":[]}