{"version":3,"names":["logger","require","DocumentDAO","constructor","databaseManager","db","create","documentData","source_id","external_id","title","content","content_type","url","metadata","hash","word_count","language","query","values","JSON","stringify","result","info","document_id","rows","id","error","message","findById","findByHash","search","searchTerm","options","limit","offset","visibility_level","paramCount","push","findBySource","order","update","updateData","fields","key","value","Object","entries","length","Error","join","delete","findPendingReview","getStats","queries","stats","parseInt","count","bulkCreate","documents","results","transaction","client","doc","module","exports"],"sources":["DocumentDAO.js"],"sourcesContent":["const logger = require('../utils/logger');\n\n/**\n * DocumentDAO - Data Access Object for documents\n */\nclass DocumentDAO {\n  constructor(databaseManager) {\n    this.db = databaseManager;\n  }\n\n  /**\n     * Create a new document\n     */\n  async create(documentData) {\n    const {\n      source_id,\n      external_id,\n      title,\n      content,\n      content_type = 'text/plain',\n      url,\n      metadata = {},\n      hash,\n      word_count,\n      language\n    } = documentData;\n\n    try {\n      const query = `\n                INSERT INTO documents (\n                    source_id, external_id, title, content, content_type,\n                    url, metadata, hash, word_count, language\n                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n                RETURNING *\n            `;\n            \n      const values = [\n        source_id, external_id, title, content, content_type,\n        url, JSON.stringify(metadata), hash, word_count, language\n      ];\n            \n      const result = await this.db.query(query, values);\n      logger.info('Document created', { document_id: result.rows[0].id });\n            \n      return result.rows[0];\n    } catch (error) {\n      logger.error('Failed to create document', { error: error.message, documentData });\n      throw error;\n    }\n  }\n\n  /**\n     * Find document by ID\n     */\n  async findById(id) {\n    try {\n      const query = `\n                SELECT d.*, dv.visibility_level, dv.access_groups\n                FROM documents d\n                LEFT JOIN document_visibility dv ON d.id = dv.document_id\n                WHERE d.id = $1\n            `;\n            \n      const result = await this.db.query(query, [id]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Failed to find document by ID', { error: error.message, id });\n      throw error;\n    }\n  }\n\n  /**\n     * Find document by hash (for deduplication)\n     */\n  async findByHash(hash) {\n    try {\n      const query = 'SELECT * FROM documents WHERE hash = $1';\n      const result = await this.db.query(query, [hash]);\n      return result.rows[0] || null;\n    } catch (error) {\n      logger.error('Failed to find document by hash', { error: error.message, hash });\n      throw error;\n    }\n  }\n\n  /**\n     * Search documents with full-text search\n     */\n  async search(searchTerm, options = {}) {\n    const {\n      limit = 50,\n      offset = 0,\n      source_id,\n      visibility_level,\n      content_type,\n      language\n    } = options;\n\n    try {\n      let query = `\n                SELECT d.*, dv.visibility_level, dv.access_groups,\n                       ts_rank(d.search_vector, plainto_tsquery('english', $1)) as rank\n                FROM documents d\n                LEFT JOIN document_visibility dv ON d.id = dv.document_id\n                WHERE d.search_vector @@ plainto_tsquery('english', $1)\n            `;\n            \n      const values = [searchTerm];\n      let paramCount = 1;\n            \n      if (source_id) {\n        query += ` AND d.source_id = $${++paramCount}`;\n        values.push(source_id);\n      }\n            \n      if (visibility_level) {\n        query += ` AND dv.visibility_level = $${++paramCount}`;\n        values.push(visibility_level);\n      }\n            \n      if (content_type) {\n        query += ` AND d.content_type = $${++paramCount}`;\n        values.push(content_type);\n      }\n            \n      if (language) {\n        query += ` AND d.language = $${++paramCount}`;\n        values.push(language);\n      }\n            \n      query += ` ORDER BY rank DESC, d.created_at DESC LIMIT $${++paramCount} OFFSET $${++paramCount}`;\n      values.push(limit, offset);\n            \n      const result = await this.db.query(query, values);\n      return result.rows;\n    } catch (error) {\n      logger.error('Failed to search documents', { error: error.message, searchTerm, options });\n      throw error;\n    }\n  }\n\n  /**\n     * Get documents by source\n     */\n  async findBySource(source_id, options = {}) {\n    const { limit = 100, offset = 0, order = 'created_at DESC' } = options;\n\n    try {\n      const query = `\n                SELECT d.*, dv.visibility_level, dv.access_groups\n                FROM documents d\n                LEFT JOIN document_visibility dv ON d.id = dv.document_id\n                WHERE d.source_id = $1\n                ORDER BY ${order}\n                LIMIT $2 OFFSET $3\n            `;\n            \n      const result = await this.db.query(query, [source_id, limit, offset]);\n      return result.rows;\n    } catch (error) {\n      logger.error('Failed to find documents by source', { error: error.message, source_id });\n      throw error;\n    }\n  }\n\n  /**\n     * Update document\n     */\n  async update(id, updateData) {\n    try {\n      const fields = [];\n      const values = [];\n      let paramCount = 0;\n\n      for (const [key, value] of Object.entries(updateData)) {\n        if (key === 'metadata') {\n          fields.push(`${key} = $${++paramCount}`);\n          values.push(JSON.stringify(value));\n        } else {\n          fields.push(`${key} = $${++paramCount}`);\n          values.push(value);\n        }\n      }\n\n      if (fields.length === 0) {\n        throw new Error('No fields to update');\n      }\n\n      const query = `\n                UPDATE documents \n                SET ${fields.join(', ')}, updated_at = NOW()\n                WHERE id = $${++paramCount}\n                RETURNING *\n            `;\n      values.push(id);\n\n      const result = await this.db.query(query, values);\n            \n      if (result.rows.length === 0) {\n        throw new Error('Document not found');\n      }\n\n      logger.info('Document updated', { document_id: id });\n      return result.rows[0];\n    } catch (error) {\n      logger.error('Failed to update document', { error: error.message, id, updateData });\n      throw error;\n    }\n  }\n\n  /**\n     * Delete document\n     */\n  async delete(id) {\n    try {\n      const query = 'DELETE FROM documents WHERE id = $1 RETURNING id';\n      const result = await this.db.query(query, [id]);\n            \n      if (result.rows.length === 0) {\n        throw new Error('Document not found');\n      }\n\n      logger.info('Document deleted', { document_id: id });\n      return true;\n    } catch (error) {\n      logger.error('Failed to delete document', { error: error.message, id });\n      throw error;\n    }\n  }\n\n  /**\n     * Get documents pending review\n     */\n  async findPendingReview(options = {}) {\n    const { limit = 50, offset = 0 } = options;\n\n    try {\n      const query = `\n                SELECT d.*, dv.visibility_level\n                FROM documents d\n                LEFT JOIN document_visibility dv ON d.id = dv.document_id\n                LEFT JOIN document_reviews dr ON d.id = dr.document_id\n                WHERE dr.id IS NULL\n                ORDER BY d.created_at ASC\n                LIMIT $1 OFFSET $2\n            `;\n            \n      const result = await this.db.query(query, [limit, offset]);\n      return result.rows;\n    } catch (error) {\n      logger.error('Failed to find documents pending review', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n     * Get document statistics\n     */\n  async getStats() {\n    try {\n      const queries = [\n        { key: 'total', query: 'SELECT COUNT(*) as count FROM documents' },\n        { key: 'by_visibility', query: `\n                    SELECT dv.visibility_level, COUNT(*) as count\n                    FROM documents d\n                    LEFT JOIN document_visibility dv ON d.id = dv.document_id\n                    GROUP BY dv.visibility_level\n                ` },\n        { key: 'by_content_type', query: `\n                    SELECT content_type, COUNT(*) as count\n                    FROM documents\n                    GROUP BY content_type\n                    ORDER BY count DESC\n                ` },\n        { key: 'recent', query: `\n                    SELECT COUNT(*) as count\n                    FROM documents\n                    WHERE created_at > NOW() - INTERVAL '24 hours'\n                ` }\n      ];\n\n      const stats = {};\n            \n      for (const { key, query } of queries) {\n        const result = await this.db.query(query);\n        if (key === 'total' || key === 'recent') {\n          stats[key] = parseInt(result.rows[0].count);\n        } else {\n          stats[key] = result.rows;\n        }\n      }\n\n      return stats;\n    } catch (error) {\n      logger.error('Failed to get document stats', { error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n     * Bulk create documents\n     */\n  async bulkCreate(documents) {\n    try {\n      const results = [];\n            \n      await this.db.transaction(async (client) => {\n        for (const doc of documents) {\n          const query = `\n                        INSERT INTO documents (\n                            source_id, external_id, title, content, content_type,\n                            url, metadata, hash, word_count, language\n                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n                        RETURNING *\n                    `;\n                    \n          const values = [\n            doc.source_id, doc.external_id, doc.title, doc.content,\n            doc.content_type || 'text/plain', doc.url,\n            JSON.stringify(doc.metadata || {}), doc.hash,\n            doc.word_count, doc.language\n          ];\n                    \n          const result = await client.query(query, values);\n          results.push(result.rows[0]);\n        }\n      });\n\n      logger.info('Bulk document creation completed', { count: results.length });\n      return results;\n    } catch (error) {\n      logger.error('Failed to bulk create documents', { error: error.message });\n      throw error;\n    }\n  }\n}\n\nmodule.exports = DocumentDAO;\n"],"mappings":"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","ignoreList":[]}