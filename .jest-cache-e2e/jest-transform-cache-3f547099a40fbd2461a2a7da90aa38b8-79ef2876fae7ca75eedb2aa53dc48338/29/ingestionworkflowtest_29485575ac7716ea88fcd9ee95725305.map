{"version":3,"names":["_getJestObj","unmock","jest","require","DatabaseManager","DocumentDAO","JobDAO","skipIfNoDatabase","process","env","SKIP_DB_TESTS","describe","databaseManager","documentDAO","jobDAO","beforeAll","console","log","testConfig","host","TEST_DB_HOST","port","TEST_DB_PORT","database","TEST_DB_NAME","user","TEST_DB_USER","password","TEST_DB_PASSWORD","initialize","applySchema","error","message","afterAll","close","beforeEach","query","it","sourceResult","JSON","stringify","path","source","rows","ingestionJob","create","type","source_id","id","config","batch_size","file_patterns","extract_metadata","priority","addLog","documents","i","doc","external_id","title","content","content_type","url","metadata","file_size","created_by","topic","hash","word_count","language","push","updateStatus","progress","result","documents_processed","length","total_words","reduce","sum","visibilityJobs","visibilityJob","document_id","rules","addDependency","document","visibility","includes","visibility_assigned","enrichmentJobs","enrichmentJob","enrichment_types","llm_provider","find","vj","enrichmentData","sentiment","Math","random","keywords","summary","confidence_scores","enrichments_added","finalIngestionJob","findById","expect","status","toBe","sourceDocuments","findBySource","toHaveLength","visibilityResult","map","d","enrichmentResult","allJobs","findByStatus","workflowJobs","filter","job","some","toBeGreaterThanOrEqual","started_at","Date","getTime","completed_at","searchResults","search","toBeGreaterThan","failingJob","invalid_config","error_message","retryJob","retry","toBeNull","retry_successful","completedJob","createdDoc","documents_created","processingJobs","processingJob","aggregationJob","processed","nextJob","getNextPending","total_documents","aggregation_complete","completedJobs","finalAggregationJob","concurrentOperations","results","Promise","all","createdDocuments","r","createdJobs","allDocuments","sourceJobs","hashes","uniqueHashes","Set","processingPromises","index","resolve","setTimeout","processed_at","now","job_index","completedSourceJobs","logs","getLogs","startTime","bulkDocuments","batch","bulkCreate","searchStartTime","searchTime","toBeLessThan","page1","limit","offset","page2","not","bulkJobs","floor","totalTime","cleanupStartTime","cleanedCount","cleanup","cleanupTime","docCheck","jobCheck","logsCheck","toBeTruthy","delete","deletedDoc","visibilityCheck","enrichmentCheck","remainingJob"],"sources":["ingestion-workflow.test.js"],"sourcesContent":["const DatabaseManager = require('../../../src/database/DatabaseManager');\nconst DocumentDAO = require('../../../src/database/DocumentDAO');\nconst JobDAO = require('../../../src/database/JobDAO');\n\n// Unmock pg for E2E tests - we need real database connections\njest.unmock('pg');\n\n// E2E tests for complete ingestion workflow scenarios\nlet skipIfNoDatabase = process.env.SKIP_DB_TESTS === 'true';\n\ndescribe('Ingestion Workflow E2E Tests', () => {\n  let databaseManager;\n  let documentDAO;\n  let jobDAO;\n\n  beforeAll(async () => {\n    if (skipIfNoDatabase) {\n      console.log('Skipping database E2E tests - SKIP_DB_TESTS=true');\n      return;\n    }\n\n    const testConfig = {\n      host: process.env.TEST_DB_HOST || 'localhost',\n      port: process.env.TEST_DB_PORT || 5432,\n      database: process.env.TEST_DB_NAME || 'thewell_pipeline_test',\n      user: process.env.TEST_DB_USER || 'charlieirwin',\n      password: process.env.TEST_DB_PASSWORD || ''\n    };\n\n    databaseManager = new DatabaseManager(testConfig);\n        \n    try {\n      await databaseManager.initialize();\n      await databaseManager.applySchema();\n            \n      documentDAO = new DocumentDAO(databaseManager);\n      jobDAO = new JobDAO(databaseManager);\n    } catch (error) {\n      console.log('Database not available, skipping E2E tests:', error.message);\n      skipIfNoDatabase = true;\n    }\n  }, 30000);\n\n  afterAll(async () => {\n    if (!skipIfNoDatabase && databaseManager) {\n      await databaseManager.close();\n    }\n  });\n\n  beforeEach(async () => {\n    if (skipIfNoDatabase) return;\n        \n    // Clean up test data\n    await databaseManager.query('TRUNCATE TABLE job_logs, job_dependencies, jobs, document_reviews, review_sessions, document_visibility, document_enrichments, documents, sources RESTART IDENTITY CASCADE');\n  });\n\n  describe('Complete Document Ingestion Workflow', () => {\n    it('should process a complete document ingestion pipeline', async () => {\n      if (skipIfNoDatabase) return;\n\n      // Step 1: Create ingestion source\n      const sourceResult = await databaseManager.query(\n        'INSERT INTO sources (name, type, config, status) VALUES ($1, $2, $3, $4) RETURNING *',\n        ['file-source', 'file', JSON.stringify({ path: '/test/docs' }), 'active']\n      );\n      const source = sourceResult.rows[0];\n\n      // Step 2: Create ingestion job\n      const ingestionJob = await jobDAO.create({\n        type: 'ingestion',\n        source_id: source.id,\n        config: { \n          batch_size: 10,\n          file_patterns: ['*.txt', '*.md'],\n          extract_metadata: true\n        },\n        priority: 10\n      });\n\n      await jobDAO.addLog(ingestionJob.id, 'info', 'Starting file ingestion');\n\n      // Step 3: Simulate ingestion process - create documents\n      const documents = [];\n      for (let i = 1; i <= 3; i++) {\n        const doc = await documentDAO.create({\n          source_id: source.id,\n          external_id: `file-${i}.txt`,\n          title: `Document ${i}`,\n          content: `This is the content of document ${i}. It contains important information about topic ${i}.`,\n          content_type: 'text/plain',\n          url: `file:///test/docs/file-${i}.txt`,\n          metadata: { \n            file_size: 1024 * i,\n            created_by: 'ingestion-system',\n            topic: `topic-${i}`\n          },\n          hash: `hash-${i}`,\n          word_count: 15 + i,\n          language: 'en'\n        });\n        documents.push(doc);\n\n        await jobDAO.addLog(ingestionJob.id, 'info', `Processed document: ${doc.title}`);\n      }\n\n      // Step 4: Update ingestion job progress\n      await jobDAO.updateStatus(ingestionJob.id, 'running', { progress: 50 });\n      await jobDAO.updateStatus(ingestionJob.id, 'completed', { \n        progress: 100,\n        result: { \n          documents_processed: documents.length,\n          total_words: documents.reduce((sum, doc) => sum + doc.word_count, 0)\n        }\n      });\n\n      // Step 5: Create visibility assignment jobs for each document\n      const visibilityJobs = [];\n      for (const doc of documents) {\n        const visibilityJob = await jobDAO.create({\n          type: 'visibility_assignment',\n          source_id: source.id,\n          document_id: doc.id,\n          config: { rules: ['default_internal'] },\n          priority: 5\n        });\n\n        // Add dependency on ingestion job\n        await jobDAO.addDependency(visibilityJob.id, ingestionJob.id);\n        visibilityJobs.push(visibilityJob);\n      }\n\n      // Step 6: Process visibility assignments\n      for (let i = 0; i < visibilityJobs.length; i++) {\n        const visibilityJob = visibilityJobs[i];\n        const document = documents[i];\n\n        await jobDAO.updateStatus(visibilityJob.id, 'running');\n\n        // Assign visibility based on document content\n        const visibility = document.title.includes('1') ? 'public' : 'internal';\n                \n        await databaseManager.query(\n          'INSERT INTO document_visibility (document_id, visibility_level, approved_by, reason) VALUES ($1, $2, $3, $4)',\n          [document.id, visibility, 'system', 'Auto-assigned based on content analysis']\n        );\n\n        await jobDAO.updateStatus(visibilityJob.id, 'completed', {\n          result: { visibility_assigned: visibility }\n        });\n\n        await jobDAO.addLog(visibilityJob.id, 'info', `Assigned visibility: ${visibility}`);\n      }\n\n      // Step 7: Create enrichment jobs\n      const enrichmentJobs = [];\n      for (const doc of documents) {\n        const enrichmentJob = await jobDAO.create({\n          type: 'enrichment',\n          source_id: source.id,\n          document_id: doc.id,\n          config: { \n            enrichment_types: ['sentiment', 'keywords', 'summary'],\n            llm_provider: 'openai'\n          },\n          priority: 3\n        });\n\n        // Add dependency on visibility job\n        const visibilityJob = visibilityJobs.find(vj => vj.document_id === doc.id);\n        if (visibilityJob) {\n          await jobDAO.addDependency(enrichmentJob.id, visibilityJob.id);\n        }\n\n        enrichmentJobs.push(enrichmentJob);\n      }\n\n      // Step 8: Process enrichments\n      for (let i = 0; i < enrichmentJobs.length; i++) {\n        const enrichmentJob = enrichmentJobs[i];\n        const document = documents[i];\n\n        await jobDAO.updateStatus(enrichmentJob.id, 'running');\n\n        // Simulate LLM enrichment\n        const enrichmentData = {\n          sentiment: Math.random() > 0.5 ? 'positive' : 'neutral',\n          keywords: [`keyword-${i}`, `topic-${i}`, 'important'],\n          summary: `Summary of document ${i}: Contains information about topic ${i}.`,\n          confidence_scores: {\n            sentiment: 0.85 + Math.random() * 0.1,\n            keywords: 0.9,\n            summary: 0.8\n          }\n        };\n\n        await databaseManager.query(\n          'INSERT INTO document_enrichments (document_id, enrichment_type, result) VALUES ($1, $2, $3)',\n          [document.id, 'full_analysis', JSON.stringify(enrichmentData)]\n        );\n\n        await jobDAO.updateStatus(enrichmentJob.id, 'completed', {\n          result: { enrichments_added: ['sentiment', 'keywords', 'summary'] }\n        });\n\n        await jobDAO.addLog(enrichmentJob.id, 'info', 'Enrichment completed successfully');\n      }\n\n      // Step 9: Verify the complete workflow\n            \n      // Check ingestion job completed\n      const finalIngestionJob = await jobDAO.findById(ingestionJob.id);\n      expect(finalIngestionJob.status).toBe('completed');\n      expect(finalIngestionJob.result.documents_processed).toBe(3);\n\n      // Check all documents were created\n      const sourceDocuments = await documentDAO.findBySource(source.id);\n      expect(sourceDocuments).toHaveLength(3);\n\n      // Check visibility assignments\n      const visibilityResult = await databaseManager.query(\n        'SELECT document_id, visibility_level FROM document_visibility WHERE document_id = ANY($1)',\n        [documents.map(d => d.id)]\n      );\n      expect(visibilityResult.rows).toHaveLength(3);\n\n      // Check enrichments\n      const enrichmentResult = await databaseManager.query(\n        'SELECT document_id, enrichment_type FROM document_enrichments WHERE document_id = ANY($1)',\n        [documents.map(d => d.id)]\n      );\n      expect(enrichmentResult.rows).toHaveLength(3);\n\n      // Check all jobs completed successfully\n      const allJobs = await jobDAO.findByStatus('completed');\n      const workflowJobs = allJobs.filter(job => \n        job.source_id === source.id || \n                documents.some(doc => doc.id === job.document_id)\n      );\n      expect(workflowJobs.length).toBeGreaterThanOrEqual(7); // 1 ingestion + 3 visibility + 3 enrichment\n\n      // Check job dependencies were respected\n      for (const visibilityJob of visibilityJobs) {\n        const job = await jobDAO.findById(visibilityJob.id);\n        if (job.started_at !== null) {\n          expect(new Date(job.started_at).getTime()).toBeGreaterThanOrEqual(new Date(finalIngestionJob.completed_at).getTime());\n        }\n      }\n\n      // Verify search functionality works with enriched documents\n      const searchResults = await documentDAO.search('topic');\n      expect(searchResults.length).toBeGreaterThan(0);\n      expect(searchResults.some(doc => doc.title.includes('Document'))).toBe(true);\n    });\n\n    it('should handle error scenarios and job failures', async () => {\n      if (skipIfNoDatabase) return;\n\n      // Create source\n      const sourceResult = await databaseManager.query(\n        'INSERT INTO sources (name, type, config) VALUES ($1, $2, $3) RETURNING *',\n        ['error-source', 'api', '{}']\n      );\n      const source = sourceResult.rows[0];\n\n      // Create a job that will fail\n      const failingJob = await jobDAO.create({\n        type: 'ingestion',\n        source_id: source.id,\n        config: { invalid_config: true }\n      });\n\n      // Simulate job failure\n      await jobDAO.updateStatus(failingJob.id, 'running');\n      await jobDAO.addLog(failingJob.id, 'error', 'Invalid configuration detected');\n      await jobDAO.updateStatus(failingJob.id, 'failed', {\n        error_message: 'Configuration validation failed'\n      });\n\n      // Create a retry job\n      const retryJob = await jobDAO.retry(failingJob.id);\n      expect(retryJob.status).toBe('pending');\n      expect(retryJob.error_message).toBeNull();\n\n      // Simulate successful retry\n      await jobDAO.updateStatus(retryJob.id, 'running');\n            \n      // Create a document this time\n      const document = await documentDAO.create({\n        source_id: source.id,\n        title: 'Retry Success Document',\n        content: 'This document was created after retry',\n        hash: 'retry-success'\n      });\n\n      await jobDAO.updateStatus(retryJob.id, 'completed', {\n        result: { documents_processed: 1, retry_successful: true }\n      });\n\n      // Verify the workflow\n      const completedJob = await jobDAO.findById(retryJob.id);\n      expect(completedJob.status).toBe('completed');\n      expect(completedJob.result.retry_successful).toBe(true);\n\n      const createdDoc = await documentDAO.findById(document.id);\n      expect(createdDoc.title).toBe('Retry Success Document');\n    });\n\n    it('should handle complex job dependencies and parallel processing', async () => {\n      if (skipIfNoDatabase) return;\n\n      // Create source\n      const sourceResult = await databaseManager.query(\n        'INSERT INTO sources (name, type, config) VALUES ($1, $2, $3) RETURNING *',\n        ['parallel-source', 'batch', '{}']\n      );\n      const source = sourceResult.rows[0];\n\n      // Create initial ingestion job\n      const ingestionJob = await jobDAO.create({\n        type: 'batch_ingestion',\n        source_id: source.id,\n        priority: 10\n      });\n\n      // Create multiple documents\n      const documents = [];\n      for (let i = 1; i <= 5; i++) {\n        const doc = await documentDAO.create({\n          source_id: source.id,\n          title: `Parallel Doc ${i}`,\n          content: `Content for parallel processing ${i}`,\n          hash: `parallel-${i}`\n        });\n        documents.push(doc);\n      }\n\n      await jobDAO.updateStatus(ingestionJob.id, 'completed', {\n        result: { documents_created: documents.length }\n      });\n\n      // Create parallel processing jobs\n      const processingJobs = [];\n      for (const doc of documents) {\n        const processingJob = await jobDAO.create({\n          type: 'parallel_processing',\n          source_id: source.id,\n          document_id: doc.id,\n          priority: 5\n        });\n\n        await jobDAO.addDependency(processingJob.id, ingestionJob.id);\n        processingJobs.push(processingJob);\n      }\n\n      // Create aggregation job that depends on all processing jobs\n      const aggregationJob = await jobDAO.create({\n        type: 'aggregation',\n        source_id: source.id,\n        priority: 1\n      });\n\n      for (const processingJob of processingJobs) {\n        await jobDAO.addDependency(aggregationJob.id, processingJob.id);\n      }\n\n      // Process all parallel jobs\n      for (const processingJob of processingJobs) {\n        await jobDAO.updateStatus(processingJob.id, 'completed', {\n          result: { processed: true }\n        });\n      }\n\n      // Now aggregation job should be available\n      const nextJob = await jobDAO.getNextPending();\n      expect(nextJob.id).toBe(aggregationJob.id);\n\n      await jobDAO.updateStatus(aggregationJob.id, 'completed', {\n        result: { \n          total_documents: documents.length,\n          aggregation_complete: true\n        }\n      });\n\n      // Verify all jobs completed in correct order\n      const completedJobs = await jobDAO.findByStatus('completed');\n      const workflowJobs = completedJobs.filter(job => job.source_id === source.id);\n            \n      expect(workflowJobs).toHaveLength(7); // 1 ingestion + 5 processing + 1 aggregation\n\n      const finalAggregationJob = await jobDAO.findById(aggregationJob.id);\n      expect(finalAggregationJob.status).toBe('completed');\n      expect(finalAggregationJob.result.total_documents).toBe(5);\n    });\n\n    it('should maintain data consistency during concurrent operations', async () => {\n      if (skipIfNoDatabase) return;\n\n      // Create source\n      const sourceResult = await databaseManager.query(\n        'INSERT INTO sources (name, type, config) VALUES ($1, $2, $3) RETURNING *',\n        ['concurrent-source', 'concurrent', '{}']\n      );\n      const source = sourceResult.rows[0];\n\n      // Simulate concurrent document creation and job processing\n      const concurrentOperations = [];\n\n      // Create multiple documents concurrently\n      for (let i = 1; i <= 10; i++) {\n        concurrentOperations.push(\n          documentDAO.create({\n            source_id: source.id,\n            title: `Concurrent Doc ${i}`,\n            content: `Concurrent content ${i}`,\n            hash: `concurrent-${i}`\n          })\n        );\n      }\n\n      // Create jobs concurrently\n      for (let i = 1; i <= 5; i++) {\n        concurrentOperations.push(\n          jobDAO.create({\n            type: 'concurrent_processing',\n            source_id: source.id,\n            priority: i\n          })\n        );\n      }\n\n      // Wait for all operations to complete\n      const results = await Promise.all(concurrentOperations);\n            \n      // Separate documents and jobs\n      const createdDocuments = results.filter(r => r.title && r.title.includes('Concurrent Doc'));\n      const createdJobs = results.filter(r => r.type === 'concurrent_processing');\n\n      expect(createdDocuments).toHaveLength(10);\n      expect(createdJobs).toHaveLength(5);\n\n      // Verify data integrity\n      const allDocuments = await documentDAO.findBySource(source.id);\n      expect(allDocuments).toHaveLength(10);\n\n      const allJobs = await jobDAO.findByStatus('pending');\n      const sourceJobs = allJobs.filter(job => job.source_id === source.id);\n      expect(sourceJobs).toHaveLength(5);\n\n      // Verify unique hashes\n      const hashes = allDocuments.map(doc => doc.hash);\n      const uniqueHashes = [...new Set(hashes)];\n      expect(uniqueHashes).toHaveLength(10);\n\n      // Test concurrent job processing\n      const processingPromises = sourceJobs.map(async (job, index) => {\n        await jobDAO.updateStatus(job.id, 'running');\n                \n        // Simulate some processing time\n        await new Promise(resolve => setTimeout(resolve, 10));\n                \n        await jobDAO.updateStatus(job.id, 'completed', {\n          result: { processed_at: Date.now(), job_index: index }\n        });\n      });\n\n      await Promise.all(processingPromises);\n\n      // Verify all jobs completed successfully\n      const completedJobs = await jobDAO.findByStatus('completed');\n      const completedSourceJobs = completedJobs.filter(job => job.source_id === source.id);\n      expect(completedSourceJobs).toHaveLength(5);\n\n      // Verify job logs were created properly\n      for (const job of completedSourceJobs) {\n        const logs = await jobDAO.getLogs(job.id);\n        expect(logs.length).toBeGreaterThanOrEqual(0); // May have logs from status updates\n      }\n    });\n  });\n\n  describe('Database Performance and Cleanup', () => {\n    it('should handle large-scale data operations efficiently', async () => {\n      if (skipIfNoDatabase) return;\n\n      const startTime = Date.now();\n\n      // Create source\n      const sourceResult = await databaseManager.query(\n        'INSERT INTO sources (name, type, config) VALUES ($1, $2, $3) RETURNING *',\n        ['performance-source', 'bulk', '{}']\n      );\n      const source = sourceResult.rows[0];\n\n      // Bulk create documents\n      const bulkDocuments = [];\n      for (let i = 1; i <= 100; i++) {\n        bulkDocuments.push({\n          source_id: source.id,\n          title: `Bulk Document ${i}`,\n          content: `This is bulk content for document ${i}. It contains searchable text and metadata.`,\n          hash: `bulk-hash-${i}`,\n          word_count: 15,\n          language: 'en',\n          metadata: { batch: 'performance-test', index: i }\n        });\n      }\n\n      const createdDocuments = await documentDAO.bulkCreate(bulkDocuments);\n      expect(createdDocuments).toHaveLength(100);\n\n      // Test search performance\n      const searchStartTime = Date.now();\n      const searchResults = await documentDAO.search('bulk content');\n      const searchTime = Date.now() - searchStartTime;\n\n      expect(searchResults.length).toBeGreaterThan(0);\n      expect(searchTime).toBeLessThan(1000); // Should complete within 1 second\n\n      // Test pagination\n      const page1 = await documentDAO.findBySource(source.id, { limit: 20, offset: 0 });\n      const page2 = await documentDAO.findBySource(source.id, { limit: 20, offset: 20 });\n\n      expect(page1).toHaveLength(20);\n      expect(page2).toHaveLength(20);\n      expect(page1[0].id).not.toBe(page2[0].id);\n\n      // Create bulk jobs\n      const bulkJobs = [];\n      for (let i = 1; i <= 50; i++) {\n        bulkJobs.push(\n          jobDAO.create({\n            type: 'bulk_processing',\n            source_id: source.id,\n            priority: Math.floor(Math.random() * 10)\n          })\n        );\n      }\n\n      const createdJobs = await Promise.all(bulkJobs);\n      expect(createdJobs).toHaveLength(50);\n\n      const totalTime = Date.now() - startTime;\n      expect(totalTime).toBeLessThan(10000); // Should complete within 10 seconds\n\n      // Test cleanup performance\n      const cleanupStartTime = Date.now();\n            \n      // Mark some jobs as completed and old\n      for (let i = 0; i < 10; i++) {\n        await jobDAO.updateStatus(createdJobs[i].id, 'completed');\n        await databaseManager.query(\n          'UPDATE jobs SET completed_at = NOW() - INTERVAL \\'10 days\\' WHERE id = $1',\n          [createdJobs[i].id]\n        );\n      }\n\n      const cleanedCount = await jobDAO.cleanup(7);\n      const cleanupTime = Date.now() - cleanupStartTime;\n\n      expect(cleanedCount).toBe(10);\n      expect(cleanupTime).toBeLessThan(2000); // Should complete within 2 seconds\n    });\n\n    it('should maintain referential integrity during cascading deletes', async () => {\n      if (skipIfNoDatabase) return;\n\n      // Create source with documents and jobs\n      const sourceResult = await databaseManager.query(\n        'INSERT INTO sources (name, type, config) VALUES ($1, $2, $3) RETURNING *',\n        ['cascade-source', 'test', '{}']\n      );\n      const source = sourceResult.rows[0];\n\n      const document = await documentDAO.create({\n        source_id: source.id,\n        title: 'Cascade Test Document',\n        content: 'Content for cascade testing',\n        hash: 'cascade-hash'\n      });\n\n      const job = await jobDAO.create({\n        type: 'cascade_test',\n        source_id: source.id,\n        document_id: document.id\n      });\n\n      await jobDAO.addLog(job.id, 'info', 'Test log entry');\n\n      // Add visibility and enrichment data\n      await databaseManager.query(\n        'INSERT INTO document_visibility (document_id, visibility_level, approved_by, reason) VALUES ($1, $2, $3, $4)',\n        [document.id, 'internal', 'system', 'Auto-assigned based on content analysis']\n      );\n\n      await databaseManager.query(\n        'INSERT INTO document_enrichments (document_id, enrichment_type, result) VALUES ($1, $2, $3)',\n        [document.id, 'test', '{}']\n      );\n\n      // Verify all data exists\n      const docCheck = await documentDAO.findById(document.id);\n      const jobCheck = await jobDAO.findById(job.id);\n      const logsCheck = await jobDAO.getLogs(job.id);\n\n      expect(docCheck).toBeTruthy();\n      expect(jobCheck).toBeTruthy();\n      expect(logsCheck.length).toBeGreaterThan(0);\n\n      // Delete the document (should cascade)\n      await documentDAO.delete(document.id);\n\n      // Verify cascading deletes worked\n      const deletedDoc = await documentDAO.findById(document.id);\n      expect(deletedDoc).toBeNull();\n\n      // Check that related data was cleaned up appropriately\n      const visibilityCheck = await databaseManager.query(\n        'SELECT * FROM document_visibility WHERE document_id = $1',\n        [document.id]\n      );\n      expect(visibilityCheck.rows).toHaveLength(0);\n\n      const enrichmentCheck = await databaseManager.query(\n        'SELECT * FROM document_enrichments WHERE document_id = $1',\n        [document.id]\n      );\n      expect(enrichmentCheck.rows).toHaveLength(0);\n\n      // Job should still exist but document_id should be null or handled appropriately\n      const remainingJob = await jobDAO.findById(job.id);\n      expect(remainingJob).toBeTruthy(); // Job exists but document reference is handled\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}