c2a381963c77f92185e964c6504e5b34
// Unmock pg for E2E tests - we need real database connections
_getJestObj().unmock('pg');

// E2E tests for complete ingestion workflow scenarios
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const DatabaseManager = require('../../../src/database/DatabaseManager');
const DocumentDAO = require('../../../src/database/DocumentDAO');
const JobDAO = require('../../../src/database/JobDAO');
let skipIfNoDatabase = process.env.SKIP_DB_TESTS === 'true';
describe('Ingestion Workflow E2E Tests', () => {
  let databaseManager;
  let documentDAO;
  let jobDAO;
  beforeAll(async () => {
    if (skipIfNoDatabase) {
      console.log('Skipping database E2E tests - SKIP_DB_TESTS=true');
      return;
    }
    const testConfig = {
      host: process.env.TEST_DB_HOST || 'localhost',
      port: process.env.TEST_DB_PORT || 5432,
      database: process.env.TEST_DB_NAME || 'thewell_pipeline_test',
      user: process.env.TEST_DB_USER || 'charlieirwin',
      password: process.env.TEST_DB_PASSWORD || ''
    };
    databaseManager = new DatabaseManager(testConfig);
    try {
      await databaseManager.initialize();
      await databaseManager.applySchema();
      documentDAO = new DocumentDAO(databaseManager);
      jobDAO = new JobDAO(databaseManager);
    } catch (error) {
      console.log('Database not available, skipping E2E tests:', error.message);
      skipIfNoDatabase = true;
    }
  }, 30000);
  afterAll(async () => {
    if (!skipIfNoDatabase && databaseManager) {
      await databaseManager.close();
    }
  });
  beforeEach(async () => {
    if (skipIfNoDatabase) return;

    // Clean up test data
    await databaseManager.query('TRUNCATE TABLE job_logs, job_dependencies, jobs, document_reviews, review_sessions, document_visibility, document_enrichments, documents, sources RESTART IDENTITY CASCADE');
  });
  describe('Complete Document Ingestion Workflow', () => {
    it('should process a complete document ingestion pipeline', async () => {
      if (skipIfNoDatabase) return;

      // Step 1: Create ingestion source
      const sourceResult = await databaseManager.query('INSERT INTO sources (name, type, config, status) VALUES ($1, $2, $3, $4) RETURNING *', ['file-source', 'file', JSON.stringify({
        path: '/test/docs'
      }), 'active']);
      const source = sourceResult.rows[0];

      // Step 2: Create ingestion job
      const ingestionJob = await jobDAO.create({
        type: 'ingestion',
        source_id: source.id,
        config: {
          batch_size: 10,
          file_patterns: ['*.txt', '*.md'],
          extract_metadata: true
        },
        priority: 10
      });
      await jobDAO.addLog(ingestionJob.id, 'info', 'Starting file ingestion');

      // Step 3: Simulate ingestion process - create documents
      const documents = [];
      for (let i = 1; i <= 3; i++) {
        const doc = await documentDAO.create({
          source_id: source.id,
          external_id: `file-${i}.txt`,
          title: `Document ${i}`,
          content: `This is the content of document ${i}. It contains important information about topic ${i}.`,
          content_type: 'text/plain',
          url: `file:///test/docs/file-${i}.txt`,
          metadata: {
            file_size: 1024 * i,
            created_by: 'ingestion-system',
            topic: `topic-${i}`
          },
          hash: `hash-${i}`,
          word_count: 15 + i,
          language: 'en'
        });
        documents.push(doc);
        await jobDAO.addLog(ingestionJob.id, 'info', `Processed document: ${doc.title}`);
      }

      // Step 4: Update ingestion job progress
      await jobDAO.updateStatus(ingestionJob.id, 'running', {
        progress: 50
      });
      await jobDAO.updateStatus(ingestionJob.id, 'completed', {
        progress: 100,
        result: {
          documents_processed: documents.length,
          total_words: documents.reduce((sum, doc) => sum + doc.word_count, 0)
        }
      });

      // Step 5: Create visibility assignment jobs for each document
      const visibilityJobs = [];
      for (const doc of documents) {
        const visibilityJob = await jobDAO.create({
          type: 'visibility_assignment',
          source_id: source.id,
          document_id: doc.id,
          config: {
            rules: ['default_internal']
          },
          priority: 5
        });

        // Add dependency on ingestion job
        await jobDAO.addDependency(visibilityJob.id, ingestionJob.id);
        visibilityJobs.push(visibilityJob);
      }

      // Step 6: Process visibility assignments
      for (let i = 0; i < visibilityJobs.length; i++) {
        const visibilityJob = visibilityJobs[i];
        const document = documents[i];
        await jobDAO.updateStatus(visibilityJob.id, 'running');

        // Assign visibility based on document content
        const visibility = document.title.includes('1') ? 'public' : 'internal';
        await databaseManager.query('INSERT INTO document_visibility (document_id, visibility_level, approved_by, reason) VALUES ($1, $2, $3, $4)', [document.id, visibility, 'system', 'Auto-assigned based on content analysis']);
        await jobDAO.updateStatus(visibilityJob.id, 'completed', {
          result: {
            visibility_assigned: visibility
          }
        });
        await jobDAO.addLog(visibilityJob.id, 'info', `Assigned visibility: ${visibility}`);
      }

      // Step 7: Create enrichment jobs
      const enrichmentJobs = [];
      for (const doc of documents) {
        const enrichmentJob = await jobDAO.create({
          type: 'enrichment',
          source_id: source.id,
          document_id: doc.id,
          config: {
            enrichment_types: ['sentiment', 'keywords', 'summary'],
            llm_provider: 'openai'
          },
          priority: 3
        });

        // Add dependency on visibility job
        const visibilityJob = visibilityJobs.find(vj => vj.document_id === doc.id);
        if (visibilityJob) {
          await jobDAO.addDependency(enrichmentJob.id, visibilityJob.id);
        }
        enrichmentJobs.push(enrichmentJob);
      }

      // Step 8: Process enrichments
      for (let i = 0; i < enrichmentJobs.length; i++) {
        const enrichmentJob = enrichmentJobs[i];
        const document = documents[i];
        await jobDAO.updateStatus(enrichmentJob.id, 'running');

        // Simulate LLM enrichment
        const enrichmentData = {
          sentiment: Math.random() > 0.5 ? 'positive' : 'neutral',
          keywords: [`keyword-${i}`, `topic-${i}`, 'important'],
          summary: `Summary of document ${i}: Contains information about topic ${i}.`,
          confidence_scores: {
            sentiment: 0.85 + Math.random() * 0.1,
            keywords: 0.9,
            summary: 0.8
          }
        };
        await databaseManager.query('INSERT INTO document_enrichments (document_id, enrichment_type, result) VALUES ($1, $2, $3)', [document.id, 'full_analysis', JSON.stringify(enrichmentData)]);
        await jobDAO.updateStatus(enrichmentJob.id, 'completed', {
          result: {
            enrichments_added: ['sentiment', 'keywords', 'summary']
          }
        });
        await jobDAO.addLog(enrichmentJob.id, 'info', 'Enrichment completed successfully');
      }

      // Step 9: Verify the complete workflow

      // Check ingestion job completed
      const finalIngestionJob = await jobDAO.findById(ingestionJob.id);
      expect(finalIngestionJob.status).toBe('completed');
      expect(finalIngestionJob.result.documents_processed).toBe(3);

      // Check all documents were created
      const sourceDocuments = await documentDAO.findBySource(source.id);
      expect(sourceDocuments).toHaveLength(3);

      // Check visibility assignments
      const visibilityResult = await databaseManager.query('SELECT document_id, visibility_level FROM document_visibility WHERE document_id = ANY($1)', [documents.map(d => d.id)]);
      expect(visibilityResult.rows).toHaveLength(3);

      // Check enrichments
      const enrichmentResult = await databaseManager.query('SELECT document_id, enrichment_type FROM document_enrichments WHERE document_id = ANY($1)', [documents.map(d => d.id)]);
      expect(enrichmentResult.rows).toHaveLength(3);

      // Check all jobs completed successfully
      const allJobs = await jobDAO.findByStatus('completed');
      const workflowJobs = allJobs.filter(job => job.source_id === source.id || documents.some(doc => doc.id === job.document_id));
      expect(workflowJobs.length).toBeGreaterThanOrEqual(7); // 1 ingestion + 3 visibility + 3 enrichment

      // Check job dependencies were respected
      for (const visibilityJob of visibilityJobs) {
        const job = await jobDAO.findById(visibilityJob.id);
        if (job.started_at !== null) {
          expect(new Date(job.started_at).getTime()).toBeGreaterThanOrEqual(new Date(finalIngestionJob.completed_at).getTime());
        }
      }

      // Verify search functionality works with enriched documents
      const searchResults = await documentDAO.search('topic');
      expect(searchResults.length).toBeGreaterThan(0);
      expect(searchResults.some(doc => doc.title.includes('Document'))).toBe(true);
    });
    it('should handle error scenarios and job failures', async () => {
      if (skipIfNoDatabase) return;

      // Create source
      const sourceResult = await databaseManager.query('INSERT INTO sources (name, type, config) VALUES ($1, $2, $3) RETURNING *', ['error-source', 'api', '{}']);
      const source = sourceResult.rows[0];

      // Create a job that will fail
      const failingJob = await jobDAO.create({
        type: 'ingestion',
        source_id: source.id,
        config: {
          invalid_config: true
        }
      });

      // Simulate job failure
      await jobDAO.updateStatus(failingJob.id, 'running');
      await jobDAO.addLog(failingJob.id, 'error', 'Invalid configuration detected');
      await jobDAO.updateStatus(failingJob.id, 'failed', {
        error_message: 'Configuration validation failed'
      });

      // Create a retry job
      const retryJob = await jobDAO.retry(failingJob.id);
      expect(retryJob.status).toBe('pending');
      expect(retryJob.error_message).toBeNull();

      // Simulate successful retry
      await jobDAO.updateStatus(retryJob.id, 'running');

      // Create a document this time
      const document = await documentDAO.create({
        source_id: source.id,
        title: 'Retry Success Document',
        content: 'This document was created after retry',
        hash: 'retry-success'
      });
      await jobDAO.updateStatus(retryJob.id, 'completed', {
        result: {
          documents_processed: 1,
          retry_successful: true
        }
      });

      // Verify the workflow
      const completedJob = await jobDAO.findById(retryJob.id);
      expect(completedJob.status).toBe('completed');
      expect(completedJob.result.retry_successful).toBe(true);
      const createdDoc = await documentDAO.findById(document.id);
      expect(createdDoc.title).toBe('Retry Success Document');
    });
    it('should handle complex job dependencies and parallel processing', async () => {
      if (skipIfNoDatabase) return;

      // Create source
      const sourceResult = await databaseManager.query('INSERT INTO sources (name, type, config) VALUES ($1, $2, $3) RETURNING *', ['parallel-source', 'batch', '{}']);
      const source = sourceResult.rows[0];

      // Create initial ingestion job
      const ingestionJob = await jobDAO.create({
        type: 'batch_ingestion',
        source_id: source.id,
        priority: 10
      });

      // Create multiple documents
      const documents = [];
      for (let i = 1; i <= 5; i++) {
        const doc = await documentDAO.create({
          source_id: source.id,
          title: `Parallel Doc ${i}`,
          content: `Content for parallel processing ${i}`,
          hash: `parallel-${i}`
        });
        documents.push(doc);
      }
      await jobDAO.updateStatus(ingestionJob.id, 'completed', {
        result: {
          documents_created: documents.length
        }
      });

      // Create parallel processing jobs
      const processingJobs = [];
      for (const doc of documents) {
        const processingJob = await jobDAO.create({
          type: 'parallel_processing',
          source_id: source.id,
          document_id: doc.id,
          priority: 5
        });
        await jobDAO.addDependency(processingJob.id, ingestionJob.id);
        processingJobs.push(processingJob);
      }

      // Create aggregation job that depends on all processing jobs
      const aggregationJob = await jobDAO.create({
        type: 'aggregation',
        source_id: source.id,
        priority: 1
      });
      for (const processingJob of processingJobs) {
        await jobDAO.addDependency(aggregationJob.id, processingJob.id);
      }

      // Process all parallel jobs
      for (const processingJob of processingJobs) {
        await jobDAO.updateStatus(processingJob.id, 'completed', {
          result: {
            processed: true
          }
        });
      }

      // Now aggregation job should be available
      const nextJob = await jobDAO.getNextPending();
      expect(nextJob.id).toBe(aggregationJob.id);
      await jobDAO.updateStatus(aggregationJob.id, 'completed', {
        result: {
          total_documents: documents.length,
          aggregation_complete: true
        }
      });

      // Verify all jobs completed in correct order
      const completedJobs = await jobDAO.findByStatus('completed');
      const workflowJobs = completedJobs.filter(job => job.source_id === source.id);
      expect(workflowJobs).toHaveLength(7); // 1 ingestion + 5 processing + 1 aggregation

      const finalAggregationJob = await jobDAO.findById(aggregationJob.id);
      expect(finalAggregationJob.status).toBe('completed');
      expect(finalAggregationJob.result.total_documents).toBe(5);
    });
    it('should maintain data consistency during concurrent operations', async () => {
      if (skipIfNoDatabase) return;

      // Create source
      const sourceResult = await databaseManager.query('INSERT INTO sources (name, type, config) VALUES ($1, $2, $3) RETURNING *', ['concurrent-source', 'concurrent', '{}']);
      const source = sourceResult.rows[0];

      // Simulate concurrent document creation and job processing
      const concurrentOperations = [];

      // Create multiple documents concurrently
      for (let i = 1; i <= 10; i++) {
        concurrentOperations.push(documentDAO.create({
          source_id: source.id,
          title: `Concurrent Doc ${i}`,
          content: `Concurrent content ${i}`,
          hash: `concurrent-${i}`
        }));
      }

      // Create jobs concurrently
      for (let i = 1; i <= 5; i++) {
        concurrentOperations.push(jobDAO.create({
          type: 'concurrent_processing',
          source_id: source.id,
          priority: i
        }));
      }

      // Wait for all operations to complete
      const results = await Promise.all(concurrentOperations);

      // Separate documents and jobs
      const createdDocuments = results.filter(r => r.title && r.title.includes('Concurrent Doc'));
      const createdJobs = results.filter(r => r.type === 'concurrent_processing');
      expect(createdDocuments).toHaveLength(10);
      expect(createdJobs).toHaveLength(5);

      // Verify data integrity
      const allDocuments = await documentDAO.findBySource(source.id);
      expect(allDocuments).toHaveLength(10);
      const allJobs = await jobDAO.findByStatus('pending');
      const sourceJobs = allJobs.filter(job => job.source_id === source.id);
      expect(sourceJobs).toHaveLength(5);

      // Verify unique hashes
      const hashes = allDocuments.map(doc => doc.hash);
      const uniqueHashes = [...new Set(hashes)];
      expect(uniqueHashes).toHaveLength(10);

      // Test concurrent job processing
      const processingPromises = sourceJobs.map(async (job, index) => {
        await jobDAO.updateStatus(job.id, 'running');

        // Simulate some processing time
        await new Promise(resolve => setTimeout(resolve, 10));
        await jobDAO.updateStatus(job.id, 'completed', {
          result: {
            processed_at: Date.now(),
            job_index: index
          }
        });
      });
      await Promise.all(processingPromises);

      // Verify all jobs completed successfully
      const completedJobs = await jobDAO.findByStatus('completed');
      const completedSourceJobs = completedJobs.filter(job => job.source_id === source.id);
      expect(completedSourceJobs).toHaveLength(5);

      // Verify job logs were created properly
      for (const job of completedSourceJobs) {
        const logs = await jobDAO.getLogs(job.id);
        expect(logs.length).toBeGreaterThanOrEqual(0); // May have logs from status updates
      }
    });
  });
  describe('Database Performance and Cleanup', () => {
    it('should handle large-scale data operations efficiently', async () => {
      if (skipIfNoDatabase) return;
      const startTime = Date.now();

      // Create source
      const sourceResult = await databaseManager.query('INSERT INTO sources (name, type, config) VALUES ($1, $2, $3) RETURNING *', ['performance-source', 'bulk', '{}']);
      const source = sourceResult.rows[0];

      // Bulk create documents
      const bulkDocuments = [];
      for (let i = 1; i <= 100; i++) {
        bulkDocuments.push({
          source_id: source.id,
          title: `Bulk Document ${i}`,
          content: `This is bulk content for document ${i}. It contains searchable text and metadata.`,
          hash: `bulk-hash-${i}`,
          word_count: 15,
          language: 'en',
          metadata: {
            batch: 'performance-test',
            index: i
          }
        });
      }
      const createdDocuments = await documentDAO.bulkCreate(bulkDocuments);
      expect(createdDocuments).toHaveLength(100);

      // Test search performance
      const searchStartTime = Date.now();
      const searchResults = await documentDAO.search('bulk content');
      const searchTime = Date.now() - searchStartTime;
      expect(searchResults.length).toBeGreaterThan(0);
      expect(searchTime).toBeLessThan(1000); // Should complete within 1 second

      // Test pagination
      const page1 = await documentDAO.findBySource(source.id, {
        limit: 20,
        offset: 0
      });
      const page2 = await documentDAO.findBySource(source.id, {
        limit: 20,
        offset: 20
      });
      expect(page1).toHaveLength(20);
      expect(page2).toHaveLength(20);
      expect(page1[0].id).not.toBe(page2[0].id);

      // Create bulk jobs
      const bulkJobs = [];
      for (let i = 1; i <= 50; i++) {
        bulkJobs.push(jobDAO.create({
          type: 'bulk_processing',
          source_id: source.id,
          priority: Math.floor(Math.random() * 10)
        }));
      }
      const createdJobs = await Promise.all(bulkJobs);
      expect(createdJobs).toHaveLength(50);
      const totalTime = Date.now() - startTime;
      expect(totalTime).toBeLessThan(10000); // Should complete within 10 seconds

      // Test cleanup performance
      const cleanupStartTime = Date.now();

      // Mark some jobs as completed and old
      for (let i = 0; i < 10; i++) {
        await jobDAO.updateStatus(createdJobs[i].id, 'completed');
        await databaseManager.query('UPDATE jobs SET completed_at = NOW() - INTERVAL \'10 days\' WHERE id = $1', [createdJobs[i].id]);
      }
      const cleanedCount = await jobDAO.cleanup(7);
      const cleanupTime = Date.now() - cleanupStartTime;
      expect(cleanedCount).toBe(10);
      expect(cleanupTime).toBeLessThan(2000); // Should complete within 2 seconds
    });
    it('should maintain referential integrity during cascading deletes', async () => {
      if (skipIfNoDatabase) return;

      // Create source with documents and jobs
      const sourceResult = await databaseManager.query('INSERT INTO sources (name, type, config) VALUES ($1, $2, $3) RETURNING *', ['cascade-source', 'test', '{}']);
      const source = sourceResult.rows[0];
      const document = await documentDAO.create({
        source_id: source.id,
        title: 'Cascade Test Document',
        content: 'Content for cascade testing',
        hash: 'cascade-hash'
      });
      const job = await jobDAO.create({
        type: 'cascade_test',
        source_id: source.id,
        document_id: document.id
      });
      await jobDAO.addLog(job.id, 'info', 'Test log entry');

      // Add visibility and enrichment data
      await databaseManager.query('INSERT INTO document_visibility (document_id, visibility_level, approved_by, reason) VALUES ($1, $2, $3, $4)', [document.id, 'internal', 'system', 'Auto-assigned based on content analysis']);
      await databaseManager.query('INSERT INTO document_enrichments (document_id, enrichment_type, result) VALUES ($1, $2, $3)', [document.id, 'test', '{}']);

      // Verify all data exists
      const docCheck = await documentDAO.findById(document.id);
      const jobCheck = await jobDAO.findById(job.id);
      const logsCheck = await jobDAO.getLogs(job.id);
      expect(docCheck).toBeTruthy();
      expect(jobCheck).toBeTruthy();
      expect(logsCheck.length).toBeGreaterThan(0);

      // Delete the document (should cascade)
      await documentDAO.delete(document.id);

      // Verify cascading deletes worked
      const deletedDoc = await documentDAO.findById(document.id);
      expect(deletedDoc).toBeNull();

      // Check that related data was cleaned up appropriately
      const visibilityCheck = await databaseManager.query('SELECT * FROM document_visibility WHERE document_id = $1', [document.id]);
      expect(visibilityCheck.rows).toHaveLength(0);
      const enrichmentCheck = await databaseManager.query('SELECT * FROM document_enrichments WHERE document_id = $1', [document.id]);
      expect(enrichmentCheck.rows).toHaveLength(0);

      // Job should still exist but document_id should be null or handled appropriately
      const remainingJob = await jobDAO.findById(job.id);
      expect(remainingJob).toBeTruthy(); // Job exists but document reference is handled
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsInVubW9jayIsImplc3QiLCJyZXF1aXJlIiwiRGF0YWJhc2VNYW5hZ2VyIiwiRG9jdW1lbnREQU8iLCJKb2JEQU8iLCJza2lwSWZOb0RhdGFiYXNlIiwicHJvY2VzcyIsImVudiIsIlNLSVBfREJfVEVTVFMiLCJkZXNjcmliZSIsImRhdGFiYXNlTWFuYWdlciIsImRvY3VtZW50REFPIiwiam9iREFPIiwiYmVmb3JlQWxsIiwiY29uc29sZSIsImxvZyIsInRlc3RDb25maWciLCJob3N0IiwiVEVTVF9EQl9IT1NUIiwicG9ydCIsIlRFU1RfREJfUE9SVCIsImRhdGFiYXNlIiwiVEVTVF9EQl9OQU1FIiwidXNlciIsIlRFU1RfREJfVVNFUiIsInBhc3N3b3JkIiwiVEVTVF9EQl9QQVNTV09SRCIsImluaXRpYWxpemUiLCJhcHBseVNjaGVtYSIsImVycm9yIiwibWVzc2FnZSIsImFmdGVyQWxsIiwiY2xvc2UiLCJiZWZvcmVFYWNoIiwicXVlcnkiLCJpdCIsInNvdXJjZVJlc3VsdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXRoIiwic291cmNlIiwicm93cyIsImluZ2VzdGlvbkpvYiIsImNyZWF0ZSIsInR5cGUiLCJzb3VyY2VfaWQiLCJpZCIsImNvbmZpZyIsImJhdGNoX3NpemUiLCJmaWxlX3BhdHRlcm5zIiwiZXh0cmFjdF9tZXRhZGF0YSIsInByaW9yaXR5IiwiYWRkTG9nIiwiZG9jdW1lbnRzIiwiaSIsImRvYyIsImV4dGVybmFsX2lkIiwidGl0bGUiLCJjb250ZW50IiwiY29udGVudF90eXBlIiwidXJsIiwibWV0YWRhdGEiLCJmaWxlX3NpemUiLCJjcmVhdGVkX2J5IiwidG9waWMiLCJoYXNoIiwid29yZF9jb3VudCIsImxhbmd1YWdlIiwicHVzaCIsInVwZGF0ZVN0YXR1cyIsInByb2dyZXNzIiwicmVzdWx0IiwiZG9jdW1lbnRzX3Byb2Nlc3NlZCIsImxlbmd0aCIsInRvdGFsX3dvcmRzIiwicmVkdWNlIiwic3VtIiwidmlzaWJpbGl0eUpvYnMiLCJ2aXNpYmlsaXR5Sm9iIiwiZG9jdW1lbnRfaWQiLCJydWxlcyIsImFkZERlcGVuZGVuY3kiLCJkb2N1bWVudCIsInZpc2liaWxpdHkiLCJpbmNsdWRlcyIsInZpc2liaWxpdHlfYXNzaWduZWQiLCJlbnJpY2htZW50Sm9icyIsImVucmljaG1lbnRKb2IiLCJlbnJpY2htZW50X3R5cGVzIiwibGxtX3Byb3ZpZGVyIiwiZmluZCIsInZqIiwiZW5yaWNobWVudERhdGEiLCJzZW50aW1lbnQiLCJNYXRoIiwicmFuZG9tIiwia2V5d29yZHMiLCJzdW1tYXJ5IiwiY29uZmlkZW5jZV9zY29yZXMiLCJlbnJpY2htZW50c19hZGRlZCIsImZpbmFsSW5nZXN0aW9uSm9iIiwiZmluZEJ5SWQiLCJleHBlY3QiLCJzdGF0dXMiLCJ0b0JlIiwic291cmNlRG9jdW1lbnRzIiwiZmluZEJ5U291cmNlIiwidG9IYXZlTGVuZ3RoIiwidmlzaWJpbGl0eVJlc3VsdCIsIm1hcCIsImQiLCJlbnJpY2htZW50UmVzdWx0IiwiYWxsSm9icyIsImZpbmRCeVN0YXR1cyIsIndvcmtmbG93Sm9icyIsImZpbHRlciIsImpvYiIsInNvbWUiLCJ0b0JlR3JlYXRlclRoYW5PckVxdWFsIiwic3RhcnRlZF9hdCIsIkRhdGUiLCJnZXRUaW1lIiwiY29tcGxldGVkX2F0Iiwic2VhcmNoUmVzdWx0cyIsInNlYXJjaCIsInRvQmVHcmVhdGVyVGhhbiIsImZhaWxpbmdKb2IiLCJpbnZhbGlkX2NvbmZpZyIsImVycm9yX21lc3NhZ2UiLCJyZXRyeUpvYiIsInJldHJ5IiwidG9CZU51bGwiLCJyZXRyeV9zdWNjZXNzZnVsIiwiY29tcGxldGVkSm9iIiwiY3JlYXRlZERvYyIsImRvY3VtZW50c19jcmVhdGVkIiwicHJvY2Vzc2luZ0pvYnMiLCJwcm9jZXNzaW5nSm9iIiwiYWdncmVnYXRpb25Kb2IiLCJwcm9jZXNzZWQiLCJuZXh0Sm9iIiwiZ2V0TmV4dFBlbmRpbmciLCJ0b3RhbF9kb2N1bWVudHMiLCJhZ2dyZWdhdGlvbl9jb21wbGV0ZSIsImNvbXBsZXRlZEpvYnMiLCJmaW5hbEFnZ3JlZ2F0aW9uSm9iIiwiY29uY3VycmVudE9wZXJhdGlvbnMiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsImNyZWF0ZWREb2N1bWVudHMiLCJyIiwiY3JlYXRlZEpvYnMiLCJhbGxEb2N1bWVudHMiLCJzb3VyY2VKb2JzIiwiaGFzaGVzIiwidW5pcXVlSGFzaGVzIiwiU2V0IiwicHJvY2Vzc2luZ1Byb21pc2VzIiwiaW5kZXgiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInByb2Nlc3NlZF9hdCIsIm5vdyIsImpvYl9pbmRleCIsImNvbXBsZXRlZFNvdXJjZUpvYnMiLCJsb2dzIiwiZ2V0TG9ncyIsInN0YXJ0VGltZSIsImJ1bGtEb2N1bWVudHMiLCJiYXRjaCIsImJ1bGtDcmVhdGUiLCJzZWFyY2hTdGFydFRpbWUiLCJzZWFyY2hUaW1lIiwidG9CZUxlc3NUaGFuIiwicGFnZTEiLCJsaW1pdCIsIm9mZnNldCIsInBhZ2UyIiwibm90IiwiYnVsa0pvYnMiLCJmbG9vciIsInRvdGFsVGltZSIsImNsZWFudXBTdGFydFRpbWUiLCJjbGVhbmVkQ291bnQiLCJjbGVhbnVwIiwiY2xlYW51cFRpbWUiLCJkb2NDaGVjayIsImpvYkNoZWNrIiwibG9nc0NoZWNrIiwidG9CZVRydXRoeSIsImRlbGV0ZSIsImRlbGV0ZWREb2MiLCJ2aXNpYmlsaXR5Q2hlY2siLCJlbnJpY2htZW50Q2hlY2siLCJyZW1haW5pbmdKb2IiXSwic291cmNlcyI6WyJpbmdlc3Rpb24td29ya2Zsb3cudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBEYXRhYmFzZU1hbmFnZXIgPSByZXF1aXJlKCcuLi8uLi8uLi9zcmMvZGF0YWJhc2UvRGF0YWJhc2VNYW5hZ2VyJyk7XG5jb25zdCBEb2N1bWVudERBTyA9IHJlcXVpcmUoJy4uLy4uLy4uL3NyYy9kYXRhYmFzZS9Eb2N1bWVudERBTycpO1xuY29uc3QgSm9iREFPID0gcmVxdWlyZSgnLi4vLi4vLi4vc3JjL2RhdGFiYXNlL0pvYkRBTycpO1xuXG4vLyBVbm1vY2sgcGcgZm9yIEUyRSB0ZXN0cyAtIHdlIG5lZWQgcmVhbCBkYXRhYmFzZSBjb25uZWN0aW9uc1xuamVzdC51bm1vY2soJ3BnJyk7XG5cbi8vIEUyRSB0ZXN0cyBmb3IgY29tcGxldGUgaW5nZXN0aW9uIHdvcmtmbG93IHNjZW5hcmlvc1xubGV0IHNraXBJZk5vRGF0YWJhc2UgPSBwcm9jZXNzLmVudi5TS0lQX0RCX1RFU1RTID09PSAndHJ1ZSc7XG5cbmRlc2NyaWJlKCdJbmdlc3Rpb24gV29ya2Zsb3cgRTJFIFRlc3RzJywgKCkgPT4ge1xuICBsZXQgZGF0YWJhc2VNYW5hZ2VyO1xuICBsZXQgZG9jdW1lbnREQU87XG4gIGxldCBqb2JEQU87XG5cbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBpZiAoc2tpcElmTm9EYXRhYmFzZSkge1xuICAgICAgY29uc29sZS5sb2coJ1NraXBwaW5nIGRhdGFiYXNlIEUyRSB0ZXN0cyAtIFNLSVBfREJfVEVTVFM9dHJ1ZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRlc3RDb25maWcgPSB7XG4gICAgICBob3N0OiBwcm9jZXNzLmVudi5URVNUX0RCX0hPU1QgfHwgJ2xvY2FsaG9zdCcsXG4gICAgICBwb3J0OiBwcm9jZXNzLmVudi5URVNUX0RCX1BPUlQgfHwgNTQzMixcbiAgICAgIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5URVNUX0RCX05BTUUgfHwgJ3RoZXdlbGxfcGlwZWxpbmVfdGVzdCcsXG4gICAgICB1c2VyOiBwcm9jZXNzLmVudi5URVNUX0RCX1VTRVIgfHwgJ2NoYXJsaWVpcndpbicsXG4gICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuVEVTVF9EQl9QQVNTV09SRCB8fCAnJ1xuICAgIH07XG5cbiAgICBkYXRhYmFzZU1hbmFnZXIgPSBuZXcgRGF0YWJhc2VNYW5hZ2VyKHRlc3RDb25maWcpO1xuICAgICAgICBcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZGF0YWJhc2VNYW5hZ2VyLmluaXRpYWxpemUoKTtcbiAgICAgIGF3YWl0IGRhdGFiYXNlTWFuYWdlci5hcHBseVNjaGVtYSgpO1xuICAgICAgICAgICAgXG4gICAgICBkb2N1bWVudERBTyA9IG5ldyBEb2N1bWVudERBTyhkYXRhYmFzZU1hbmFnZXIpO1xuICAgICAgam9iREFPID0gbmV3IEpvYkRBTyhkYXRhYmFzZU1hbmFnZXIpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZygnRGF0YWJhc2Ugbm90IGF2YWlsYWJsZSwgc2tpcHBpbmcgRTJFIHRlc3RzOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgc2tpcElmTm9EYXRhYmFzZSA9IHRydWU7XG4gICAgfVxuICB9LCAzMDAwMCk7XG5cbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGlmICghc2tpcElmTm9EYXRhYmFzZSAmJiBkYXRhYmFzZU1hbmFnZXIpIHtcbiAgICAgIGF3YWl0IGRhdGFiYXNlTWFuYWdlci5jbG9zZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgaWYgKHNraXBJZk5vRGF0YWJhc2UpIHJldHVybjtcbiAgICAgICAgXG4gICAgLy8gQ2xlYW4gdXAgdGVzdCBkYXRhXG4gICAgYXdhaXQgZGF0YWJhc2VNYW5hZ2VyLnF1ZXJ5KCdUUlVOQ0FURSBUQUJMRSBqb2JfbG9ncywgam9iX2RlcGVuZGVuY2llcywgam9icywgZG9jdW1lbnRfcmV2aWV3cywgcmV2aWV3X3Nlc3Npb25zLCBkb2N1bWVudF92aXNpYmlsaXR5LCBkb2N1bWVudF9lbnJpY2htZW50cywgZG9jdW1lbnRzLCBzb3VyY2VzIFJFU1RBUlQgSURFTlRJVFkgQ0FTQ0FERScpO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ29tcGxldGUgRG9jdW1lbnQgSW5nZXN0aW9uIFdvcmtmbG93JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcHJvY2VzcyBhIGNvbXBsZXRlIGRvY3VtZW50IGluZ2VzdGlvbiBwaXBlbGluZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGlmIChza2lwSWZOb0RhdGFiYXNlKSByZXR1cm47XG5cbiAgICAgIC8vIFN0ZXAgMTogQ3JlYXRlIGluZ2VzdGlvbiBzb3VyY2VcbiAgICAgIGNvbnN0IHNvdXJjZVJlc3VsdCA9IGF3YWl0IGRhdGFiYXNlTWFuYWdlci5xdWVyeShcbiAgICAgICAgJ0lOU0VSVCBJTlRPIHNvdXJjZXMgKG5hbWUsIHR5cGUsIGNvbmZpZywgc3RhdHVzKSBWQUxVRVMgKCQxLCAkMiwgJDMsICQ0KSBSRVRVUk5JTkcgKicsXG4gICAgICAgIFsnZmlsZS1zb3VyY2UnLCAnZmlsZScsIEpTT04uc3RyaW5naWZ5KHsgcGF0aDogJy90ZXN0L2RvY3MnIH0pLCAnYWN0aXZlJ11cbiAgICAgICk7XG4gICAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VSZXN1bHQucm93c1swXTtcblxuICAgICAgLy8gU3RlcCAyOiBDcmVhdGUgaW5nZXN0aW9uIGpvYlxuICAgICAgY29uc3QgaW5nZXN0aW9uSm9iID0gYXdhaXQgam9iREFPLmNyZWF0ZSh7XG4gICAgICAgIHR5cGU6ICdpbmdlc3Rpb24nLFxuICAgICAgICBzb3VyY2VfaWQ6IHNvdXJjZS5pZCxcbiAgICAgICAgY29uZmlnOiB7IFxuICAgICAgICAgIGJhdGNoX3NpemU6IDEwLFxuICAgICAgICAgIGZpbGVfcGF0dGVybnM6IFsnKi50eHQnLCAnKi5tZCddLFxuICAgICAgICAgIGV4dHJhY3RfbWV0YWRhdGE6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgcHJpb3JpdHk6IDEwXG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgam9iREFPLmFkZExvZyhpbmdlc3Rpb25Kb2IuaWQsICdpbmZvJywgJ1N0YXJ0aW5nIGZpbGUgaW5nZXN0aW9uJyk7XG5cbiAgICAgIC8vIFN0ZXAgMzogU2ltdWxhdGUgaW5nZXN0aW9uIHByb2Nlc3MgLSBjcmVhdGUgZG9jdW1lbnRzXG4gICAgICBjb25zdCBkb2N1bWVudHMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDM7IGkrKykge1xuICAgICAgICBjb25zdCBkb2MgPSBhd2FpdCBkb2N1bWVudERBTy5jcmVhdGUoe1xuICAgICAgICAgIHNvdXJjZV9pZDogc291cmNlLmlkLFxuICAgICAgICAgIGV4dGVybmFsX2lkOiBgZmlsZS0ke2l9LnR4dGAsXG4gICAgICAgICAgdGl0bGU6IGBEb2N1bWVudCAke2l9YCxcbiAgICAgICAgICBjb250ZW50OiBgVGhpcyBpcyB0aGUgY29udGVudCBvZiBkb2N1bWVudCAke2l9LiBJdCBjb250YWlucyBpbXBvcnRhbnQgaW5mb3JtYXRpb24gYWJvdXQgdG9waWMgJHtpfS5gLFxuICAgICAgICAgIGNvbnRlbnRfdHlwZTogJ3RleHQvcGxhaW4nLFxuICAgICAgICAgIHVybDogYGZpbGU6Ly8vdGVzdC9kb2NzL2ZpbGUtJHtpfS50eHRgLFxuICAgICAgICAgIG1ldGFkYXRhOiB7IFxuICAgICAgICAgICAgZmlsZV9zaXplOiAxMDI0ICogaSxcbiAgICAgICAgICAgIGNyZWF0ZWRfYnk6ICdpbmdlc3Rpb24tc3lzdGVtJyxcbiAgICAgICAgICAgIHRvcGljOiBgdG9waWMtJHtpfWBcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhc2g6IGBoYXNoLSR7aX1gLFxuICAgICAgICAgIHdvcmRfY291bnQ6IDE1ICsgaSxcbiAgICAgICAgICBsYW5ndWFnZTogJ2VuJ1xuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnRzLnB1c2goZG9jKTtcblxuICAgICAgICBhd2FpdCBqb2JEQU8uYWRkTG9nKGluZ2VzdGlvbkpvYi5pZCwgJ2luZm8nLCBgUHJvY2Vzc2VkIGRvY3VtZW50OiAke2RvYy50aXRsZX1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RlcCA0OiBVcGRhdGUgaW5nZXN0aW9uIGpvYiBwcm9ncmVzc1xuICAgICAgYXdhaXQgam9iREFPLnVwZGF0ZVN0YXR1cyhpbmdlc3Rpb25Kb2IuaWQsICdydW5uaW5nJywgeyBwcm9ncmVzczogNTAgfSk7XG4gICAgICBhd2FpdCBqb2JEQU8udXBkYXRlU3RhdHVzKGluZ2VzdGlvbkpvYi5pZCwgJ2NvbXBsZXRlZCcsIHsgXG4gICAgICAgIHByb2dyZXNzOiAxMDAsXG4gICAgICAgIHJlc3VsdDogeyBcbiAgICAgICAgICBkb2N1bWVudHNfcHJvY2Vzc2VkOiBkb2N1bWVudHMubGVuZ3RoLFxuICAgICAgICAgIHRvdGFsX3dvcmRzOiBkb2N1bWVudHMucmVkdWNlKChzdW0sIGRvYykgPT4gc3VtICsgZG9jLndvcmRfY291bnQsIDApXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBTdGVwIDU6IENyZWF0ZSB2aXNpYmlsaXR5IGFzc2lnbm1lbnQgam9icyBmb3IgZWFjaCBkb2N1bWVudFxuICAgICAgY29uc3QgdmlzaWJpbGl0eUpvYnMgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgZG9jIG9mIGRvY3VtZW50cykge1xuICAgICAgICBjb25zdCB2aXNpYmlsaXR5Sm9iID0gYXdhaXQgam9iREFPLmNyZWF0ZSh7XG4gICAgICAgICAgdHlwZTogJ3Zpc2liaWxpdHlfYXNzaWdubWVudCcsXG4gICAgICAgICAgc291cmNlX2lkOiBzb3VyY2UuaWQsXG4gICAgICAgICAgZG9jdW1lbnRfaWQ6IGRvYy5pZCxcbiAgICAgICAgICBjb25maWc6IHsgcnVsZXM6IFsnZGVmYXVsdF9pbnRlcm5hbCddIH0sXG4gICAgICAgICAgcHJpb3JpdHk6IDVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWRkIGRlcGVuZGVuY3kgb24gaW5nZXN0aW9uIGpvYlxuICAgICAgICBhd2FpdCBqb2JEQU8uYWRkRGVwZW5kZW5jeSh2aXNpYmlsaXR5Sm9iLmlkLCBpbmdlc3Rpb25Kb2IuaWQpO1xuICAgICAgICB2aXNpYmlsaXR5Sm9icy5wdXNoKHZpc2liaWxpdHlKb2IpO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGVwIDY6IFByb2Nlc3MgdmlzaWJpbGl0eSBhc3NpZ25tZW50c1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2aXNpYmlsaXR5Sm9icy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB2aXNpYmlsaXR5Sm9iID0gdmlzaWJpbGl0eUpvYnNbaV07XG4gICAgICAgIGNvbnN0IGRvY3VtZW50ID0gZG9jdW1lbnRzW2ldO1xuXG4gICAgICAgIGF3YWl0IGpvYkRBTy51cGRhdGVTdGF0dXModmlzaWJpbGl0eUpvYi5pZCwgJ3J1bm5pbmcnKTtcblxuICAgICAgICAvLyBBc3NpZ24gdmlzaWJpbGl0eSBiYXNlZCBvbiBkb2N1bWVudCBjb250ZW50XG4gICAgICAgIGNvbnN0IHZpc2liaWxpdHkgPSBkb2N1bWVudC50aXRsZS5pbmNsdWRlcygnMScpID8gJ3B1YmxpYycgOiAnaW50ZXJuYWwnO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICBhd2FpdCBkYXRhYmFzZU1hbmFnZXIucXVlcnkoXG4gICAgICAgICAgJ0lOU0VSVCBJTlRPIGRvY3VtZW50X3Zpc2liaWxpdHkgKGRvY3VtZW50X2lkLCB2aXNpYmlsaXR5X2xldmVsLCBhcHByb3ZlZF9ieSwgcmVhc29uKSBWQUxVRVMgKCQxLCAkMiwgJDMsICQ0KScsXG4gICAgICAgICAgW2RvY3VtZW50LmlkLCB2aXNpYmlsaXR5LCAnc3lzdGVtJywgJ0F1dG8tYXNzaWduZWQgYmFzZWQgb24gY29udGVudCBhbmFseXNpcyddXG4gICAgICAgICk7XG5cbiAgICAgICAgYXdhaXQgam9iREFPLnVwZGF0ZVN0YXR1cyh2aXNpYmlsaXR5Sm9iLmlkLCAnY29tcGxldGVkJywge1xuICAgICAgICAgIHJlc3VsdDogeyB2aXNpYmlsaXR5X2Fzc2lnbmVkOiB2aXNpYmlsaXR5IH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgam9iREFPLmFkZExvZyh2aXNpYmlsaXR5Sm9iLmlkLCAnaW5mbycsIGBBc3NpZ25lZCB2aXNpYmlsaXR5OiAke3Zpc2liaWxpdHl9YCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0ZXAgNzogQ3JlYXRlIGVucmljaG1lbnQgam9ic1xuICAgICAgY29uc3QgZW5yaWNobWVudEpvYnMgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgZG9jIG9mIGRvY3VtZW50cykge1xuICAgICAgICBjb25zdCBlbnJpY2htZW50Sm9iID0gYXdhaXQgam9iREFPLmNyZWF0ZSh7XG4gICAgICAgICAgdHlwZTogJ2VucmljaG1lbnQnLFxuICAgICAgICAgIHNvdXJjZV9pZDogc291cmNlLmlkLFxuICAgICAgICAgIGRvY3VtZW50X2lkOiBkb2MuaWQsXG4gICAgICAgICAgY29uZmlnOiB7IFxuICAgICAgICAgICAgZW5yaWNobWVudF90eXBlczogWydzZW50aW1lbnQnLCAna2V5d29yZHMnLCAnc3VtbWFyeSddLFxuICAgICAgICAgICAgbGxtX3Byb3ZpZGVyOiAnb3BlbmFpJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJpb3JpdHk6IDNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWRkIGRlcGVuZGVuY3kgb24gdmlzaWJpbGl0eSBqb2JcbiAgICAgICAgY29uc3QgdmlzaWJpbGl0eUpvYiA9IHZpc2liaWxpdHlKb2JzLmZpbmQodmogPT4gdmouZG9jdW1lbnRfaWQgPT09IGRvYy5pZCk7XG4gICAgICAgIGlmICh2aXNpYmlsaXR5Sm9iKSB7XG4gICAgICAgICAgYXdhaXQgam9iREFPLmFkZERlcGVuZGVuY3koZW5yaWNobWVudEpvYi5pZCwgdmlzaWJpbGl0eUpvYi5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICBlbnJpY2htZW50Sm9icy5wdXNoKGVucmljaG1lbnRKb2IpO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGVwIDg6IFByb2Nlc3MgZW5yaWNobWVudHNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5yaWNobWVudEpvYnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZW5yaWNobWVudEpvYiA9IGVucmljaG1lbnRKb2JzW2ldO1xuICAgICAgICBjb25zdCBkb2N1bWVudCA9IGRvY3VtZW50c1tpXTtcblxuICAgICAgICBhd2FpdCBqb2JEQU8udXBkYXRlU3RhdHVzKGVucmljaG1lbnRKb2IuaWQsICdydW5uaW5nJyk7XG5cbiAgICAgICAgLy8gU2ltdWxhdGUgTExNIGVucmljaG1lbnRcbiAgICAgICAgY29uc3QgZW5yaWNobWVudERhdGEgPSB7XG4gICAgICAgICAgc2VudGltZW50OiBNYXRoLnJhbmRvbSgpID4gMC41ID8gJ3Bvc2l0aXZlJyA6ICduZXV0cmFsJyxcbiAgICAgICAgICBrZXl3b3JkczogW2BrZXl3b3JkLSR7aX1gLCBgdG9waWMtJHtpfWAsICdpbXBvcnRhbnQnXSxcbiAgICAgICAgICBzdW1tYXJ5OiBgU3VtbWFyeSBvZiBkb2N1bWVudCAke2l9OiBDb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0b3BpYyAke2l9LmAsXG4gICAgICAgICAgY29uZmlkZW5jZV9zY29yZXM6IHtcbiAgICAgICAgICAgIHNlbnRpbWVudDogMC44NSArIE1hdGgucmFuZG9tKCkgKiAwLjEsXG4gICAgICAgICAgICBrZXl3b3JkczogMC45LFxuICAgICAgICAgICAgc3VtbWFyeTogMC44XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGF3YWl0IGRhdGFiYXNlTWFuYWdlci5xdWVyeShcbiAgICAgICAgICAnSU5TRVJUIElOVE8gZG9jdW1lbnRfZW5yaWNobWVudHMgKGRvY3VtZW50X2lkLCBlbnJpY2htZW50X3R5cGUsIHJlc3VsdCkgVkFMVUVTICgkMSwgJDIsICQzKScsXG4gICAgICAgICAgW2RvY3VtZW50LmlkLCAnZnVsbF9hbmFseXNpcycsIEpTT04uc3RyaW5naWZ5KGVucmljaG1lbnREYXRhKV1cbiAgICAgICAgKTtcblxuICAgICAgICBhd2FpdCBqb2JEQU8udXBkYXRlU3RhdHVzKGVucmljaG1lbnRKb2IuaWQsICdjb21wbGV0ZWQnLCB7XG4gICAgICAgICAgcmVzdWx0OiB7IGVucmljaG1lbnRzX2FkZGVkOiBbJ3NlbnRpbWVudCcsICdrZXl3b3JkcycsICdzdW1tYXJ5J10gfVxuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCBqb2JEQU8uYWRkTG9nKGVucmljaG1lbnRKb2IuaWQsICdpbmZvJywgJ0VucmljaG1lbnQgY29tcGxldGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGVwIDk6IFZlcmlmeSB0aGUgY29tcGxldGUgd29ya2Zsb3dcbiAgICAgICAgICAgIFxuICAgICAgLy8gQ2hlY2sgaW5nZXN0aW9uIGpvYiBjb21wbGV0ZWRcbiAgICAgIGNvbnN0IGZpbmFsSW5nZXN0aW9uSm9iID0gYXdhaXQgam9iREFPLmZpbmRCeUlkKGluZ2VzdGlvbkpvYi5pZCk7XG4gICAgICBleHBlY3QoZmluYWxJbmdlc3Rpb25Kb2Iuc3RhdHVzKS50b0JlKCdjb21wbGV0ZWQnKTtcbiAgICAgIGV4cGVjdChmaW5hbEluZ2VzdGlvbkpvYi5yZXN1bHQuZG9jdW1lbnRzX3Byb2Nlc3NlZCkudG9CZSgzKTtcblxuICAgICAgLy8gQ2hlY2sgYWxsIGRvY3VtZW50cyB3ZXJlIGNyZWF0ZWRcbiAgICAgIGNvbnN0IHNvdXJjZURvY3VtZW50cyA9IGF3YWl0IGRvY3VtZW50REFPLmZpbmRCeVNvdXJjZShzb3VyY2UuaWQpO1xuICAgICAgZXhwZWN0KHNvdXJjZURvY3VtZW50cykudG9IYXZlTGVuZ3RoKDMpO1xuXG4gICAgICAvLyBDaGVjayB2aXNpYmlsaXR5IGFzc2lnbm1lbnRzXG4gICAgICBjb25zdCB2aXNpYmlsaXR5UmVzdWx0ID0gYXdhaXQgZGF0YWJhc2VNYW5hZ2VyLnF1ZXJ5KFxuICAgICAgICAnU0VMRUNUIGRvY3VtZW50X2lkLCB2aXNpYmlsaXR5X2xldmVsIEZST00gZG9jdW1lbnRfdmlzaWJpbGl0eSBXSEVSRSBkb2N1bWVudF9pZCA9IEFOWSgkMSknLFxuICAgICAgICBbZG9jdW1lbnRzLm1hcChkID0+IGQuaWQpXVxuICAgICAgKTtcbiAgICAgIGV4cGVjdCh2aXNpYmlsaXR5UmVzdWx0LnJvd3MpLnRvSGF2ZUxlbmd0aCgzKTtcblxuICAgICAgLy8gQ2hlY2sgZW5yaWNobWVudHNcbiAgICAgIGNvbnN0IGVucmljaG1lbnRSZXN1bHQgPSBhd2FpdCBkYXRhYmFzZU1hbmFnZXIucXVlcnkoXG4gICAgICAgICdTRUxFQ1QgZG9jdW1lbnRfaWQsIGVucmljaG1lbnRfdHlwZSBGUk9NIGRvY3VtZW50X2VucmljaG1lbnRzIFdIRVJFIGRvY3VtZW50X2lkID0gQU5ZKCQxKScsXG4gICAgICAgIFtkb2N1bWVudHMubWFwKGQgPT4gZC5pZCldXG4gICAgICApO1xuICAgICAgZXhwZWN0KGVucmljaG1lbnRSZXN1bHQucm93cykudG9IYXZlTGVuZ3RoKDMpO1xuXG4gICAgICAvLyBDaGVjayBhbGwgam9icyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5XG4gICAgICBjb25zdCBhbGxKb2JzID0gYXdhaXQgam9iREFPLmZpbmRCeVN0YXR1cygnY29tcGxldGVkJyk7XG4gICAgICBjb25zdCB3b3JrZmxvd0pvYnMgPSBhbGxKb2JzLmZpbHRlcihqb2IgPT4gXG4gICAgICAgIGpvYi5zb3VyY2VfaWQgPT09IHNvdXJjZS5pZCB8fCBcbiAgICAgICAgICAgICAgICBkb2N1bWVudHMuc29tZShkb2MgPT4gZG9jLmlkID09PSBqb2IuZG9jdW1lbnRfaWQpXG4gICAgICApO1xuICAgICAgZXhwZWN0KHdvcmtmbG93Sm9icy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoNyk7IC8vIDEgaW5nZXN0aW9uICsgMyB2aXNpYmlsaXR5ICsgMyBlbnJpY2htZW50XG5cbiAgICAgIC8vIENoZWNrIGpvYiBkZXBlbmRlbmNpZXMgd2VyZSByZXNwZWN0ZWRcbiAgICAgIGZvciAoY29uc3QgdmlzaWJpbGl0eUpvYiBvZiB2aXNpYmlsaXR5Sm9icykge1xuICAgICAgICBjb25zdCBqb2IgPSBhd2FpdCBqb2JEQU8uZmluZEJ5SWQodmlzaWJpbGl0eUpvYi5pZCk7XG4gICAgICAgIGlmIChqb2Iuc3RhcnRlZF9hdCAhPT0gbnVsbCkge1xuICAgICAgICAgIGV4cGVjdChuZXcgRGF0ZShqb2Iuc3RhcnRlZF9hdCkuZ2V0VGltZSgpKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKG5ldyBEYXRlKGZpbmFsSW5nZXN0aW9uSm9iLmNvbXBsZXRlZF9hdCkuZ2V0VGltZSgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBWZXJpZnkgc2VhcmNoIGZ1bmN0aW9uYWxpdHkgd29ya3Mgd2l0aCBlbnJpY2hlZCBkb2N1bWVudHNcbiAgICAgIGNvbnN0IHNlYXJjaFJlc3VsdHMgPSBhd2FpdCBkb2N1bWVudERBTy5zZWFyY2goJ3RvcGljJyk7XG4gICAgICBleHBlY3Qoc2VhcmNoUmVzdWx0cy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChzZWFyY2hSZXN1bHRzLnNvbWUoZG9jID0+IGRvYy50aXRsZS5pbmNsdWRlcygnRG9jdW1lbnQnKSkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlcnJvciBzY2VuYXJpb3MgYW5kIGpvYiBmYWlsdXJlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGlmIChza2lwSWZOb0RhdGFiYXNlKSByZXR1cm47XG5cbiAgICAgIC8vIENyZWF0ZSBzb3VyY2VcbiAgICAgIGNvbnN0IHNvdXJjZVJlc3VsdCA9IGF3YWl0IGRhdGFiYXNlTWFuYWdlci5xdWVyeShcbiAgICAgICAgJ0lOU0VSVCBJTlRPIHNvdXJjZXMgKG5hbWUsIHR5cGUsIGNvbmZpZykgVkFMVUVTICgkMSwgJDIsICQzKSBSRVRVUk5JTkcgKicsXG4gICAgICAgIFsnZXJyb3Itc291cmNlJywgJ2FwaScsICd7fSddXG4gICAgICApO1xuICAgICAgY29uc3Qgc291cmNlID0gc291cmNlUmVzdWx0LnJvd3NbMF07XG5cbiAgICAgIC8vIENyZWF0ZSBhIGpvYiB0aGF0IHdpbGwgZmFpbFxuICAgICAgY29uc3QgZmFpbGluZ0pvYiA9IGF3YWl0IGpvYkRBTy5jcmVhdGUoe1xuICAgICAgICB0eXBlOiAnaW5nZXN0aW9uJyxcbiAgICAgICAgc291cmNlX2lkOiBzb3VyY2UuaWQsXG4gICAgICAgIGNvbmZpZzogeyBpbnZhbGlkX2NvbmZpZzogdHJ1ZSB9XG4gICAgICB9KTtcblxuICAgICAgLy8gU2ltdWxhdGUgam9iIGZhaWx1cmVcbiAgICAgIGF3YWl0IGpvYkRBTy51cGRhdGVTdGF0dXMoZmFpbGluZ0pvYi5pZCwgJ3J1bm5pbmcnKTtcbiAgICAgIGF3YWl0IGpvYkRBTy5hZGRMb2coZmFpbGluZ0pvYi5pZCwgJ2Vycm9yJywgJ0ludmFsaWQgY29uZmlndXJhdGlvbiBkZXRlY3RlZCcpO1xuICAgICAgYXdhaXQgam9iREFPLnVwZGF0ZVN0YXR1cyhmYWlsaW5nSm9iLmlkLCAnZmFpbGVkJywge1xuICAgICAgICBlcnJvcl9tZXNzYWdlOiAnQ29uZmlndXJhdGlvbiB2YWxpZGF0aW9uIGZhaWxlZCdcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDcmVhdGUgYSByZXRyeSBqb2JcbiAgICAgIGNvbnN0IHJldHJ5Sm9iID0gYXdhaXQgam9iREFPLnJldHJ5KGZhaWxpbmdKb2IuaWQpO1xuICAgICAgZXhwZWN0KHJldHJ5Sm9iLnN0YXR1cykudG9CZSgncGVuZGluZycpO1xuICAgICAgZXhwZWN0KHJldHJ5Sm9iLmVycm9yX21lc3NhZ2UpLnRvQmVOdWxsKCk7XG5cbiAgICAgIC8vIFNpbXVsYXRlIHN1Y2Nlc3NmdWwgcmV0cnlcbiAgICAgIGF3YWl0IGpvYkRBTy51cGRhdGVTdGF0dXMocmV0cnlKb2IuaWQsICdydW5uaW5nJyk7XG4gICAgICAgICAgICBcbiAgICAgIC8vIENyZWF0ZSBhIGRvY3VtZW50IHRoaXMgdGltZVxuICAgICAgY29uc3QgZG9jdW1lbnQgPSBhd2FpdCBkb2N1bWVudERBTy5jcmVhdGUoe1xuICAgICAgICBzb3VyY2VfaWQ6IHNvdXJjZS5pZCxcbiAgICAgICAgdGl0bGU6ICdSZXRyeSBTdWNjZXNzIERvY3VtZW50JyxcbiAgICAgICAgY29udGVudDogJ1RoaXMgZG9jdW1lbnQgd2FzIGNyZWF0ZWQgYWZ0ZXIgcmV0cnknLFxuICAgICAgICBoYXNoOiAncmV0cnktc3VjY2VzcydcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBqb2JEQU8udXBkYXRlU3RhdHVzKHJldHJ5Sm9iLmlkLCAnY29tcGxldGVkJywge1xuICAgICAgICByZXN1bHQ6IHsgZG9jdW1lbnRzX3Byb2Nlc3NlZDogMSwgcmV0cnlfc3VjY2Vzc2Z1bDogdHJ1ZSB9XG4gICAgICB9KTtcblxuICAgICAgLy8gVmVyaWZ5IHRoZSB3b3JrZmxvd1xuICAgICAgY29uc3QgY29tcGxldGVkSm9iID0gYXdhaXQgam9iREFPLmZpbmRCeUlkKHJldHJ5Sm9iLmlkKTtcbiAgICAgIGV4cGVjdChjb21wbGV0ZWRKb2Iuc3RhdHVzKS50b0JlKCdjb21wbGV0ZWQnKTtcbiAgICAgIGV4cGVjdChjb21wbGV0ZWRKb2IucmVzdWx0LnJldHJ5X3N1Y2Nlc3NmdWwpLnRvQmUodHJ1ZSk7XG5cbiAgICAgIGNvbnN0IGNyZWF0ZWREb2MgPSBhd2FpdCBkb2N1bWVudERBTy5maW5kQnlJZChkb2N1bWVudC5pZCk7XG4gICAgICBleHBlY3QoY3JlYXRlZERvYy50aXRsZSkudG9CZSgnUmV0cnkgU3VjY2VzcyBEb2N1bWVudCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY29tcGxleCBqb2IgZGVwZW5kZW5jaWVzIGFuZCBwYXJhbGxlbCBwcm9jZXNzaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHNraXBJZk5vRGF0YWJhc2UpIHJldHVybjtcblxuICAgICAgLy8gQ3JlYXRlIHNvdXJjZVxuICAgICAgY29uc3Qgc291cmNlUmVzdWx0ID0gYXdhaXQgZGF0YWJhc2VNYW5hZ2VyLnF1ZXJ5KFxuICAgICAgICAnSU5TRVJUIElOVE8gc291cmNlcyAobmFtZSwgdHlwZSwgY29uZmlnKSBWQUxVRVMgKCQxLCAkMiwgJDMpIFJFVFVSTklORyAqJyxcbiAgICAgICAgWydwYXJhbGxlbC1zb3VyY2UnLCAnYmF0Y2gnLCAne30nXVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZVJlc3VsdC5yb3dzWzBdO1xuXG4gICAgICAvLyBDcmVhdGUgaW5pdGlhbCBpbmdlc3Rpb24gam9iXG4gICAgICBjb25zdCBpbmdlc3Rpb25Kb2IgPSBhd2FpdCBqb2JEQU8uY3JlYXRlKHtcbiAgICAgICAgdHlwZTogJ2JhdGNoX2luZ2VzdGlvbicsXG4gICAgICAgIHNvdXJjZV9pZDogc291cmNlLmlkLFxuICAgICAgICBwcmlvcml0eTogMTBcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDcmVhdGUgbXVsdGlwbGUgZG9jdW1lbnRzXG4gICAgICBjb25zdCBkb2N1bWVudHMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDU7IGkrKykge1xuICAgICAgICBjb25zdCBkb2MgPSBhd2FpdCBkb2N1bWVudERBTy5jcmVhdGUoe1xuICAgICAgICAgIHNvdXJjZV9pZDogc291cmNlLmlkLFxuICAgICAgICAgIHRpdGxlOiBgUGFyYWxsZWwgRG9jICR7aX1gLFxuICAgICAgICAgIGNvbnRlbnQ6IGBDb250ZW50IGZvciBwYXJhbGxlbCBwcm9jZXNzaW5nICR7aX1gLFxuICAgICAgICAgIGhhc2g6IGBwYXJhbGxlbC0ke2l9YFxuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnRzLnB1c2goZG9jKTtcbiAgICAgIH1cblxuICAgICAgYXdhaXQgam9iREFPLnVwZGF0ZVN0YXR1cyhpbmdlc3Rpb25Kb2IuaWQsICdjb21wbGV0ZWQnLCB7XG4gICAgICAgIHJlc3VsdDogeyBkb2N1bWVudHNfY3JlYXRlZDogZG9jdW1lbnRzLmxlbmd0aCB9XG4gICAgICB9KTtcblxuICAgICAgLy8gQ3JlYXRlIHBhcmFsbGVsIHByb2Nlc3Npbmcgam9ic1xuICAgICAgY29uc3QgcHJvY2Vzc2luZ0pvYnMgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgZG9jIG9mIGRvY3VtZW50cykge1xuICAgICAgICBjb25zdCBwcm9jZXNzaW5nSm9iID0gYXdhaXQgam9iREFPLmNyZWF0ZSh7XG4gICAgICAgICAgdHlwZTogJ3BhcmFsbGVsX3Byb2Nlc3NpbmcnLFxuICAgICAgICAgIHNvdXJjZV9pZDogc291cmNlLmlkLFxuICAgICAgICAgIGRvY3VtZW50X2lkOiBkb2MuaWQsXG4gICAgICAgICAgcHJpb3JpdHk6IDVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgam9iREFPLmFkZERlcGVuZGVuY3kocHJvY2Vzc2luZ0pvYi5pZCwgaW5nZXN0aW9uSm9iLmlkKTtcbiAgICAgICAgcHJvY2Vzc2luZ0pvYnMucHVzaChwcm9jZXNzaW5nSm9iKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIGFnZ3JlZ2F0aW9uIGpvYiB0aGF0IGRlcGVuZHMgb24gYWxsIHByb2Nlc3Npbmcgam9ic1xuICAgICAgY29uc3QgYWdncmVnYXRpb25Kb2IgPSBhd2FpdCBqb2JEQU8uY3JlYXRlKHtcbiAgICAgICAgdHlwZTogJ2FnZ3JlZ2F0aW9uJyxcbiAgICAgICAgc291cmNlX2lkOiBzb3VyY2UuaWQsXG4gICAgICAgIHByaW9yaXR5OiAxXG4gICAgICB9KTtcblxuICAgICAgZm9yIChjb25zdCBwcm9jZXNzaW5nSm9iIG9mIHByb2Nlc3NpbmdKb2JzKSB7XG4gICAgICAgIGF3YWl0IGpvYkRBTy5hZGREZXBlbmRlbmN5KGFnZ3JlZ2F0aW9uSm9iLmlkLCBwcm9jZXNzaW5nSm9iLmlkKTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJvY2VzcyBhbGwgcGFyYWxsZWwgam9ic1xuICAgICAgZm9yIChjb25zdCBwcm9jZXNzaW5nSm9iIG9mIHByb2Nlc3NpbmdKb2JzKSB7XG4gICAgICAgIGF3YWl0IGpvYkRBTy51cGRhdGVTdGF0dXMocHJvY2Vzc2luZ0pvYi5pZCwgJ2NvbXBsZXRlZCcsIHtcbiAgICAgICAgICByZXN1bHQ6IHsgcHJvY2Vzc2VkOiB0cnVlIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE5vdyBhZ2dyZWdhdGlvbiBqb2Igc2hvdWxkIGJlIGF2YWlsYWJsZVxuICAgICAgY29uc3QgbmV4dEpvYiA9IGF3YWl0IGpvYkRBTy5nZXROZXh0UGVuZGluZygpO1xuICAgICAgZXhwZWN0KG5leHRKb2IuaWQpLnRvQmUoYWdncmVnYXRpb25Kb2IuaWQpO1xuXG4gICAgICBhd2FpdCBqb2JEQU8udXBkYXRlU3RhdHVzKGFnZ3JlZ2F0aW9uSm9iLmlkLCAnY29tcGxldGVkJywge1xuICAgICAgICByZXN1bHQ6IHsgXG4gICAgICAgICAgdG90YWxfZG9jdW1lbnRzOiBkb2N1bWVudHMubGVuZ3RoLFxuICAgICAgICAgIGFnZ3JlZ2F0aW9uX2NvbXBsZXRlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBWZXJpZnkgYWxsIGpvYnMgY29tcGxldGVkIGluIGNvcnJlY3Qgb3JkZXJcbiAgICAgIGNvbnN0IGNvbXBsZXRlZEpvYnMgPSBhd2FpdCBqb2JEQU8uZmluZEJ5U3RhdHVzKCdjb21wbGV0ZWQnKTtcbiAgICAgIGNvbnN0IHdvcmtmbG93Sm9icyA9IGNvbXBsZXRlZEpvYnMuZmlsdGVyKGpvYiA9PiBqb2Iuc291cmNlX2lkID09PSBzb3VyY2UuaWQpO1xuICAgICAgICAgICAgXG4gICAgICBleHBlY3Qod29ya2Zsb3dKb2JzKS50b0hhdmVMZW5ndGgoNyk7IC8vIDEgaW5nZXN0aW9uICsgNSBwcm9jZXNzaW5nICsgMSBhZ2dyZWdhdGlvblxuXG4gICAgICBjb25zdCBmaW5hbEFnZ3JlZ2F0aW9uSm9iID0gYXdhaXQgam9iREFPLmZpbmRCeUlkKGFnZ3JlZ2F0aW9uSm9iLmlkKTtcbiAgICAgIGV4cGVjdChmaW5hbEFnZ3JlZ2F0aW9uSm9iLnN0YXR1cykudG9CZSgnY29tcGxldGVkJyk7XG4gICAgICBleHBlY3QoZmluYWxBZ2dyZWdhdGlvbkpvYi5yZXN1bHQudG90YWxfZG9jdW1lbnRzKS50b0JlKDUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBtYWludGFpbiBkYXRhIGNvbnNpc3RlbmN5IGR1cmluZyBjb25jdXJyZW50IG9wZXJhdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoc2tpcElmTm9EYXRhYmFzZSkgcmV0dXJuO1xuXG4gICAgICAvLyBDcmVhdGUgc291cmNlXG4gICAgICBjb25zdCBzb3VyY2VSZXN1bHQgPSBhd2FpdCBkYXRhYmFzZU1hbmFnZXIucXVlcnkoXG4gICAgICAgICdJTlNFUlQgSU5UTyBzb3VyY2VzIChuYW1lLCB0eXBlLCBjb25maWcpIFZBTFVFUyAoJDEsICQyLCAkMykgUkVUVVJOSU5HIConLFxuICAgICAgICBbJ2NvbmN1cnJlbnQtc291cmNlJywgJ2NvbmN1cnJlbnQnLCAne30nXVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZVJlc3VsdC5yb3dzWzBdO1xuXG4gICAgICAvLyBTaW11bGF0ZSBjb25jdXJyZW50IGRvY3VtZW50IGNyZWF0aW9uIGFuZCBqb2IgcHJvY2Vzc2luZ1xuICAgICAgY29uc3QgY29uY3VycmVudE9wZXJhdGlvbnMgPSBbXTtcblxuICAgICAgLy8gQ3JlYXRlIG11bHRpcGxlIGRvY3VtZW50cyBjb25jdXJyZW50bHlcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDEwOyBpKyspIHtcbiAgICAgICAgY29uY3VycmVudE9wZXJhdGlvbnMucHVzaChcbiAgICAgICAgICBkb2N1bWVudERBTy5jcmVhdGUoe1xuICAgICAgICAgICAgc291cmNlX2lkOiBzb3VyY2UuaWQsXG4gICAgICAgICAgICB0aXRsZTogYENvbmN1cnJlbnQgRG9jICR7aX1gLFxuICAgICAgICAgICAgY29udGVudDogYENvbmN1cnJlbnQgY29udGVudCAke2l9YCxcbiAgICAgICAgICAgIGhhc2g6IGBjb25jdXJyZW50LSR7aX1gXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIGpvYnMgY29uY3VycmVudGx5XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSA1OyBpKyspIHtcbiAgICAgICAgY29uY3VycmVudE9wZXJhdGlvbnMucHVzaChcbiAgICAgICAgICBqb2JEQU8uY3JlYXRlKHtcbiAgICAgICAgICAgIHR5cGU6ICdjb25jdXJyZW50X3Byb2Nlc3NpbmcnLFxuICAgICAgICAgICAgc291cmNlX2lkOiBzb3VyY2UuaWQsXG4gICAgICAgICAgICBwcmlvcml0eTogaVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdhaXQgZm9yIGFsbCBvcGVyYXRpb25zIHRvIGNvbXBsZXRlXG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoY29uY3VycmVudE9wZXJhdGlvbnMpO1xuICAgICAgICAgICAgXG4gICAgICAvLyBTZXBhcmF0ZSBkb2N1bWVudHMgYW5kIGpvYnNcbiAgICAgIGNvbnN0IGNyZWF0ZWREb2N1bWVudHMgPSByZXN1bHRzLmZpbHRlcihyID0+IHIudGl0bGUgJiYgci50aXRsZS5pbmNsdWRlcygnQ29uY3VycmVudCBEb2MnKSk7XG4gICAgICBjb25zdCBjcmVhdGVkSm9icyA9IHJlc3VsdHMuZmlsdGVyKHIgPT4gci50eXBlID09PSAnY29uY3VycmVudF9wcm9jZXNzaW5nJyk7XG5cbiAgICAgIGV4cGVjdChjcmVhdGVkRG9jdW1lbnRzKS50b0hhdmVMZW5ndGgoMTApO1xuICAgICAgZXhwZWN0KGNyZWF0ZWRKb2JzKS50b0hhdmVMZW5ndGgoNSk7XG5cbiAgICAgIC8vIFZlcmlmeSBkYXRhIGludGVncml0eVxuICAgICAgY29uc3QgYWxsRG9jdW1lbnRzID0gYXdhaXQgZG9jdW1lbnREQU8uZmluZEJ5U291cmNlKHNvdXJjZS5pZCk7XG4gICAgICBleHBlY3QoYWxsRG9jdW1lbnRzKS50b0hhdmVMZW5ndGgoMTApO1xuXG4gICAgICBjb25zdCBhbGxKb2JzID0gYXdhaXQgam9iREFPLmZpbmRCeVN0YXR1cygncGVuZGluZycpO1xuICAgICAgY29uc3Qgc291cmNlSm9icyA9IGFsbEpvYnMuZmlsdGVyKGpvYiA9PiBqb2Iuc291cmNlX2lkID09PSBzb3VyY2UuaWQpO1xuICAgICAgZXhwZWN0KHNvdXJjZUpvYnMpLnRvSGF2ZUxlbmd0aCg1KTtcblxuICAgICAgLy8gVmVyaWZ5IHVuaXF1ZSBoYXNoZXNcbiAgICAgIGNvbnN0IGhhc2hlcyA9IGFsbERvY3VtZW50cy5tYXAoZG9jID0+IGRvYy5oYXNoKTtcbiAgICAgIGNvbnN0IHVuaXF1ZUhhc2hlcyA9IFsuLi5uZXcgU2V0KGhhc2hlcyldO1xuICAgICAgZXhwZWN0KHVuaXF1ZUhhc2hlcykudG9IYXZlTGVuZ3RoKDEwKTtcblxuICAgICAgLy8gVGVzdCBjb25jdXJyZW50IGpvYiBwcm9jZXNzaW5nXG4gICAgICBjb25zdCBwcm9jZXNzaW5nUHJvbWlzZXMgPSBzb3VyY2VKb2JzLm1hcChhc3luYyAoam9iLCBpbmRleCkgPT4ge1xuICAgICAgICBhd2FpdCBqb2JEQU8udXBkYXRlU3RhdHVzKGpvYi5pZCwgJ3J1bm5pbmcnKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgLy8gU2ltdWxhdGUgc29tZSBwcm9jZXNzaW5nIHRpbWVcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwKSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIGF3YWl0IGpvYkRBTy51cGRhdGVTdGF0dXMoam9iLmlkLCAnY29tcGxldGVkJywge1xuICAgICAgICAgIHJlc3VsdDogeyBwcm9jZXNzZWRfYXQ6IERhdGUubm93KCksIGpvYl9pbmRleDogaW5kZXggfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9jZXNzaW5nUHJvbWlzZXMpO1xuXG4gICAgICAvLyBWZXJpZnkgYWxsIGpvYnMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseVxuICAgICAgY29uc3QgY29tcGxldGVkSm9icyA9IGF3YWl0IGpvYkRBTy5maW5kQnlTdGF0dXMoJ2NvbXBsZXRlZCcpO1xuICAgICAgY29uc3QgY29tcGxldGVkU291cmNlSm9icyA9IGNvbXBsZXRlZEpvYnMuZmlsdGVyKGpvYiA9PiBqb2Iuc291cmNlX2lkID09PSBzb3VyY2UuaWQpO1xuICAgICAgZXhwZWN0KGNvbXBsZXRlZFNvdXJjZUpvYnMpLnRvSGF2ZUxlbmd0aCg1KTtcblxuICAgICAgLy8gVmVyaWZ5IGpvYiBsb2dzIHdlcmUgY3JlYXRlZCBwcm9wZXJseVxuICAgICAgZm9yIChjb25zdCBqb2Igb2YgY29tcGxldGVkU291cmNlSm9icykge1xuICAgICAgICBjb25zdCBsb2dzID0gYXdhaXQgam9iREFPLmdldExvZ3Moam9iLmlkKTtcbiAgICAgICAgZXhwZWN0KGxvZ3MubGVuZ3RoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApOyAvLyBNYXkgaGF2ZSBsb2dzIGZyb20gc3RhdHVzIHVwZGF0ZXNcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0RhdGFiYXNlIFBlcmZvcm1hbmNlIGFuZCBDbGVhbnVwJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGxhcmdlLXNjYWxlIGRhdGEgb3BlcmF0aW9ucyBlZmZpY2llbnRseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGlmIChza2lwSWZOb0RhdGFiYXNlKSByZXR1cm47XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cbiAgICAgIC8vIENyZWF0ZSBzb3VyY2VcbiAgICAgIGNvbnN0IHNvdXJjZVJlc3VsdCA9IGF3YWl0IGRhdGFiYXNlTWFuYWdlci5xdWVyeShcbiAgICAgICAgJ0lOU0VSVCBJTlRPIHNvdXJjZXMgKG5hbWUsIHR5cGUsIGNvbmZpZykgVkFMVUVTICgkMSwgJDIsICQzKSBSRVRVUk5JTkcgKicsXG4gICAgICAgIFsncGVyZm9ybWFuY2Utc291cmNlJywgJ2J1bGsnLCAne30nXVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZVJlc3VsdC5yb3dzWzBdO1xuXG4gICAgICAvLyBCdWxrIGNyZWF0ZSBkb2N1bWVudHNcbiAgICAgIGNvbnN0IGJ1bGtEb2N1bWVudHMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDEwMDsgaSsrKSB7XG4gICAgICAgIGJ1bGtEb2N1bWVudHMucHVzaCh7XG4gICAgICAgICAgc291cmNlX2lkOiBzb3VyY2UuaWQsXG4gICAgICAgICAgdGl0bGU6IGBCdWxrIERvY3VtZW50ICR7aX1gLFxuICAgICAgICAgIGNvbnRlbnQ6IGBUaGlzIGlzIGJ1bGsgY29udGVudCBmb3IgZG9jdW1lbnQgJHtpfS4gSXQgY29udGFpbnMgc2VhcmNoYWJsZSB0ZXh0IGFuZCBtZXRhZGF0YS5gLFxuICAgICAgICAgIGhhc2g6IGBidWxrLWhhc2gtJHtpfWAsXG4gICAgICAgICAgd29yZF9jb3VudDogMTUsXG4gICAgICAgICAgbGFuZ3VhZ2U6ICdlbicsXG4gICAgICAgICAgbWV0YWRhdGE6IHsgYmF0Y2g6ICdwZXJmb3JtYW5jZS10ZXN0JywgaW5kZXg6IGkgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY3JlYXRlZERvY3VtZW50cyA9IGF3YWl0IGRvY3VtZW50REFPLmJ1bGtDcmVhdGUoYnVsa0RvY3VtZW50cyk7XG4gICAgICBleHBlY3QoY3JlYXRlZERvY3VtZW50cykudG9IYXZlTGVuZ3RoKDEwMCk7XG5cbiAgICAgIC8vIFRlc3Qgc2VhcmNoIHBlcmZvcm1hbmNlXG4gICAgICBjb25zdCBzZWFyY2hTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgY29uc3Qgc2VhcmNoUmVzdWx0cyA9IGF3YWl0IGRvY3VtZW50REFPLnNlYXJjaCgnYnVsayBjb250ZW50Jyk7XG4gICAgICBjb25zdCBzZWFyY2hUaW1lID0gRGF0ZS5ub3coKSAtIHNlYXJjaFN0YXJ0VGltZTtcblxuICAgICAgZXhwZWN0KHNlYXJjaFJlc3VsdHMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3Qoc2VhcmNoVGltZSkudG9CZUxlc3NUaGFuKDEwMDApOyAvLyBTaG91bGQgY29tcGxldGUgd2l0aGluIDEgc2Vjb25kXG5cbiAgICAgIC8vIFRlc3QgcGFnaW5hdGlvblxuICAgICAgY29uc3QgcGFnZTEgPSBhd2FpdCBkb2N1bWVudERBTy5maW5kQnlTb3VyY2Uoc291cmNlLmlkLCB7IGxpbWl0OiAyMCwgb2Zmc2V0OiAwIH0pO1xuICAgICAgY29uc3QgcGFnZTIgPSBhd2FpdCBkb2N1bWVudERBTy5maW5kQnlTb3VyY2Uoc291cmNlLmlkLCB7IGxpbWl0OiAyMCwgb2Zmc2V0OiAyMCB9KTtcblxuICAgICAgZXhwZWN0KHBhZ2UxKS50b0hhdmVMZW5ndGgoMjApO1xuICAgICAgZXhwZWN0KHBhZ2UyKS50b0hhdmVMZW5ndGgoMjApO1xuICAgICAgZXhwZWN0KHBhZ2UxWzBdLmlkKS5ub3QudG9CZShwYWdlMlswXS5pZCk7XG5cbiAgICAgIC8vIENyZWF0ZSBidWxrIGpvYnNcbiAgICAgIGNvbnN0IGJ1bGtKb2JzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSA1MDsgaSsrKSB7XG4gICAgICAgIGJ1bGtKb2JzLnB1c2goXG4gICAgICAgICAgam9iREFPLmNyZWF0ZSh7XG4gICAgICAgICAgICB0eXBlOiAnYnVsa19wcm9jZXNzaW5nJyxcbiAgICAgICAgICAgIHNvdXJjZV9pZDogc291cmNlLmlkLFxuICAgICAgICAgICAgcHJpb3JpdHk6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKVxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNyZWF0ZWRKb2JzID0gYXdhaXQgUHJvbWlzZS5hbGwoYnVsa0pvYnMpO1xuICAgICAgZXhwZWN0KGNyZWF0ZWRKb2JzKS50b0hhdmVMZW5ndGgoNTApO1xuXG4gICAgICBjb25zdCB0b3RhbFRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgZXhwZWN0KHRvdGFsVGltZSkudG9CZUxlc3NUaGFuKDEwMDAwKTsgLy8gU2hvdWxkIGNvbXBsZXRlIHdpdGhpbiAxMCBzZWNvbmRzXG5cbiAgICAgIC8vIFRlc3QgY2xlYW51cCBwZXJmb3JtYW5jZVxuICAgICAgY29uc3QgY2xlYW51cFN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBcbiAgICAgIC8vIE1hcmsgc29tZSBqb2JzIGFzIGNvbXBsZXRlZCBhbmQgb2xkXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgYXdhaXQgam9iREFPLnVwZGF0ZVN0YXR1cyhjcmVhdGVkSm9ic1tpXS5pZCwgJ2NvbXBsZXRlZCcpO1xuICAgICAgICBhd2FpdCBkYXRhYmFzZU1hbmFnZXIucXVlcnkoXG4gICAgICAgICAgJ1VQREFURSBqb2JzIFNFVCBjb21wbGV0ZWRfYXQgPSBOT1coKSAtIElOVEVSVkFMIFxcJzEwIGRheXNcXCcgV0hFUkUgaWQgPSAkMScsXG4gICAgICAgICAgW2NyZWF0ZWRKb2JzW2ldLmlkXVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjbGVhbmVkQ291bnQgPSBhd2FpdCBqb2JEQU8uY2xlYW51cCg3KTtcbiAgICAgIGNvbnN0IGNsZWFudXBUaW1lID0gRGF0ZS5ub3coKSAtIGNsZWFudXBTdGFydFRpbWU7XG5cbiAgICAgIGV4cGVjdChjbGVhbmVkQ291bnQpLnRvQmUoMTApO1xuICAgICAgZXhwZWN0KGNsZWFudXBUaW1lKS50b0JlTGVzc1RoYW4oMjAwMCk7IC8vIFNob3VsZCBjb21wbGV0ZSB3aXRoaW4gMiBzZWNvbmRzXG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG1haW50YWluIHJlZmVyZW50aWFsIGludGVncml0eSBkdXJpbmcgY2FzY2FkaW5nIGRlbGV0ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoc2tpcElmTm9EYXRhYmFzZSkgcmV0dXJuO1xuXG4gICAgICAvLyBDcmVhdGUgc291cmNlIHdpdGggZG9jdW1lbnRzIGFuZCBqb2JzXG4gICAgICBjb25zdCBzb3VyY2VSZXN1bHQgPSBhd2FpdCBkYXRhYmFzZU1hbmFnZXIucXVlcnkoXG4gICAgICAgICdJTlNFUlQgSU5UTyBzb3VyY2VzIChuYW1lLCB0eXBlLCBjb25maWcpIFZBTFVFUyAoJDEsICQyLCAkMykgUkVUVVJOSU5HIConLFxuICAgICAgICBbJ2Nhc2NhZGUtc291cmNlJywgJ3Rlc3QnLCAne30nXVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZVJlc3VsdC5yb3dzWzBdO1xuXG4gICAgICBjb25zdCBkb2N1bWVudCA9IGF3YWl0IGRvY3VtZW50REFPLmNyZWF0ZSh7XG4gICAgICAgIHNvdXJjZV9pZDogc291cmNlLmlkLFxuICAgICAgICB0aXRsZTogJ0Nhc2NhZGUgVGVzdCBEb2N1bWVudCcsXG4gICAgICAgIGNvbnRlbnQ6ICdDb250ZW50IGZvciBjYXNjYWRlIHRlc3RpbmcnLFxuICAgICAgICBoYXNoOiAnY2FzY2FkZS1oYXNoJ1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGpvYiA9IGF3YWl0IGpvYkRBTy5jcmVhdGUoe1xuICAgICAgICB0eXBlOiAnY2FzY2FkZV90ZXN0JyxcbiAgICAgICAgc291cmNlX2lkOiBzb3VyY2UuaWQsXG4gICAgICAgIGRvY3VtZW50X2lkOiBkb2N1bWVudC5pZFxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IGpvYkRBTy5hZGRMb2coam9iLmlkLCAnaW5mbycsICdUZXN0IGxvZyBlbnRyeScpO1xuXG4gICAgICAvLyBBZGQgdmlzaWJpbGl0eSBhbmQgZW5yaWNobWVudCBkYXRhXG4gICAgICBhd2FpdCBkYXRhYmFzZU1hbmFnZXIucXVlcnkoXG4gICAgICAgICdJTlNFUlQgSU5UTyBkb2N1bWVudF92aXNpYmlsaXR5IChkb2N1bWVudF9pZCwgdmlzaWJpbGl0eV9sZXZlbCwgYXBwcm92ZWRfYnksIHJlYXNvbikgVkFMVUVTICgkMSwgJDIsICQzLCAkNCknLFxuICAgICAgICBbZG9jdW1lbnQuaWQsICdpbnRlcm5hbCcsICdzeXN0ZW0nLCAnQXV0by1hc3NpZ25lZCBiYXNlZCBvbiBjb250ZW50IGFuYWx5c2lzJ11cbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IGRhdGFiYXNlTWFuYWdlci5xdWVyeShcbiAgICAgICAgJ0lOU0VSVCBJTlRPIGRvY3VtZW50X2VucmljaG1lbnRzIChkb2N1bWVudF9pZCwgZW5yaWNobWVudF90eXBlLCByZXN1bHQpIFZBTFVFUyAoJDEsICQyLCAkMyknLFxuICAgICAgICBbZG9jdW1lbnQuaWQsICd0ZXN0JywgJ3t9J11cbiAgICAgICk7XG5cbiAgICAgIC8vIFZlcmlmeSBhbGwgZGF0YSBleGlzdHNcbiAgICAgIGNvbnN0IGRvY0NoZWNrID0gYXdhaXQgZG9jdW1lbnREQU8uZmluZEJ5SWQoZG9jdW1lbnQuaWQpO1xuICAgICAgY29uc3Qgam9iQ2hlY2sgPSBhd2FpdCBqb2JEQU8uZmluZEJ5SWQoam9iLmlkKTtcbiAgICAgIGNvbnN0IGxvZ3NDaGVjayA9IGF3YWl0IGpvYkRBTy5nZXRMb2dzKGpvYi5pZCk7XG5cbiAgICAgIGV4cGVjdChkb2NDaGVjaykudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGpvYkNoZWNrKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QobG9nc0NoZWNrLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuXG4gICAgICAvLyBEZWxldGUgdGhlIGRvY3VtZW50IChzaG91bGQgY2FzY2FkZSlcbiAgICAgIGF3YWl0IGRvY3VtZW50REFPLmRlbGV0ZShkb2N1bWVudC5pZCk7XG5cbiAgICAgIC8vIFZlcmlmeSBjYXNjYWRpbmcgZGVsZXRlcyB3b3JrZWRcbiAgICAgIGNvbnN0IGRlbGV0ZWREb2MgPSBhd2FpdCBkb2N1bWVudERBTy5maW5kQnlJZChkb2N1bWVudC5pZCk7XG4gICAgICBleHBlY3QoZGVsZXRlZERvYykudG9CZU51bGwoKTtcblxuICAgICAgLy8gQ2hlY2sgdGhhdCByZWxhdGVkIGRhdGEgd2FzIGNsZWFuZWQgdXAgYXBwcm9wcmlhdGVseVxuICAgICAgY29uc3QgdmlzaWJpbGl0eUNoZWNrID0gYXdhaXQgZGF0YWJhc2VNYW5hZ2VyLnF1ZXJ5KFxuICAgICAgICAnU0VMRUNUICogRlJPTSBkb2N1bWVudF92aXNpYmlsaXR5IFdIRVJFIGRvY3VtZW50X2lkID0gJDEnLFxuICAgICAgICBbZG9jdW1lbnQuaWRdXG4gICAgICApO1xuICAgICAgZXhwZWN0KHZpc2liaWxpdHlDaGVjay5yb3dzKS50b0hhdmVMZW5ndGgoMCk7XG5cbiAgICAgIGNvbnN0IGVucmljaG1lbnRDaGVjayA9IGF3YWl0IGRhdGFiYXNlTWFuYWdlci5xdWVyeShcbiAgICAgICAgJ1NFTEVDVCAqIEZST00gZG9jdW1lbnRfZW5yaWNobWVudHMgV0hFUkUgZG9jdW1lbnRfaWQgPSAkMScsXG4gICAgICAgIFtkb2N1bWVudC5pZF1cbiAgICAgICk7XG4gICAgICBleHBlY3QoZW5yaWNobWVudENoZWNrLnJvd3MpLnRvSGF2ZUxlbmd0aCgwKTtcblxuICAgICAgLy8gSm9iIHNob3VsZCBzdGlsbCBleGlzdCBidXQgZG9jdW1lbnRfaWQgc2hvdWxkIGJlIG51bGwgb3IgaGFuZGxlZCBhcHByb3ByaWF0ZWx5XG4gICAgICBjb25zdCByZW1haW5pbmdKb2IgPSBhd2FpdCBqb2JEQU8uZmluZEJ5SWQoam9iLmlkKTtcbiAgICAgIGV4cGVjdChyZW1haW5pbmdKb2IpLnRvQmVUcnV0aHkoKTsgLy8gSm9iIGV4aXN0cyBidXQgZG9jdW1lbnQgcmVmZXJlbmNlIGlzIGhhbmRsZWRcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBSUE7QUFDQUEsV0FBQSxHQUFLQyxNQUFNLENBQUMsSUFBSSxDQUFDOztBQUVqQjtBQUFBLFNBQUFELFlBQUE7RUFBQTtJQUFBRTtFQUFBLElBQUFDLE9BQUE7RUFBQUgsV0FBQSxHQUFBQSxDQUFBLEtBQUFFLElBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFQQSxNQUFNRSxlQUFlLEdBQUdELE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztBQUN4RSxNQUFNRSxXQUFXLEdBQUdGLE9BQU8sQ0FBQyxtQ0FB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TWhMLFdBQVcsQ0FBQzBGLFFBQVEsQ0FBQ25CLFFBQVEsQ0FBQ3BDLEVBQUUsQ0FBQztNQUN4RCxNQUFNOEksUUFBUSxHQUFHLE1BQU1oTCxNQUFNLENBQUN5RixRQUFRLENBQUNlLEdBQUcsQ0FBQ3RFLEVBQUUsQ0FBQztNQUM5QyxNQUFNK0ksU0FBUyxHQUFHLE1BQU1qTCxNQUFNLENBQUMySixPQUFPLENBQUNuRCxHQUFHLENBQUN0RSxFQUFFLENBQUM7TUFFOUN3RCxNQUFNLENBQUNxRixRQUFRLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7TUFDN0J4RixNQUFNLENBQUNzRixRQUFRLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7TUFDN0J4RixNQUFNLENBQUN1RixTQUFTLENBQUNwSCxNQUFNLENBQUMsQ0FBQ29ELGVBQWUsQ0FBQyxDQUFDLENBQUM7O01BRTNDO01BQ0EsTUFBTWxILFdBQVcsQ0FBQ29MLE1BQU0sQ0FBQzdHLFFBQVEsQ0FBQ3BDLEVBQUUsQ0FBQzs7TUFFckM7TUFDQSxNQUFNa0osVUFBVSxHQUFHLE1BQU1yTCxXQUFXLENBQUMwRixRQUFRLENBQUNuQixRQUFRLENBQUNwQyxFQUFFLENBQUM7TUFDMUR3RCxNQUFNLENBQUMwRixVQUFVLENBQUMsQ0FBQzdELFFBQVEsQ0FBQyxDQUFDOztNQUU3QjtNQUNBLE1BQU04RCxlQUFlLEdBQUcsTUFBTXZMLGVBQWUsQ0FBQ3dCLEtBQUssQ0FDakQsMERBQTBELEVBQzFELENBQUNnRCxRQUFRLENBQUNwQyxFQUFFLENBQ2QsQ0FBQztNQUNEd0QsTUFBTSxDQUFDMkYsZUFBZSxDQUFDeEosSUFBSSxDQUFDLENBQUNrRSxZQUFZLENBQUMsQ0FBQyxDQUFDO01BRTVDLE1BQU11RixlQUFlLEdBQUcsTUFBTXhMLGVBQWUsQ0FBQ3dCLEtBQUssQ0FDakQsMkRBQTJELEVBQzNELENBQUNnRCxRQUFRLENBQUNwQyxFQUFFLENBQ2QsQ0FBQztNQUNEd0QsTUFBTSxDQUFDNEYsZUFBZSxDQUFDekosSUFBSSxDQUFDLENBQUNrRSxZQUFZLENBQUMsQ0FBQyxDQUFDOztNQUU1QztNQUNBLE1BQU13RixZQUFZLEdBQUcsTUFBTXZMLE1BQU0sQ0FBQ3lGLFFBQVEsQ0FBQ2UsR0FBRyxDQUFDdEUsRUFBRSxDQUFDO01BQ2xEd0QsTUFBTSxDQUFDNkYsWUFBWSxDQUFDLENBQUNMLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=