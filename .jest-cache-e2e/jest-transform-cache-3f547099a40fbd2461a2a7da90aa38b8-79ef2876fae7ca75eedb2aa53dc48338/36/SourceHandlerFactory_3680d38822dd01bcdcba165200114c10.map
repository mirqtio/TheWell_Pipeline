{"version":3,"names":["SOURCE_TYPES","require","StaticSourceHandler","SemiStaticSourceHandler","DynamicConsistentSourceHandler","DynamicUnstructuredSourceHandler","SourceHandlerFactory","constructor","handlers","Map","registerDefaultHandlers","registerHandler","STATIC","SEMI_STATIC","DYNAMIC_CONSISTENT","DYNAMIC_UNSTRUCTURED","sourceType","handlerClass","force","Error","has","set","unregisterHandler","delete","createHandler","config","type","HandlerClass","get","hasHandler","getRegisteredTypes","Array","from","keys","getHandlerClass","validateConfig","tempHandler","validateHandlerConfig","isTypeSupported","validateHandlerConfigs","configs","isArray","results","push","valid","error","message","getDefaultConfig","enabled","mergeWithDefaults","userConfig","defaultConfig","initializeHandler","handler","initialize","cleanupHandler","cleanup","createHandlers","map","getStats","registeredTypes","size","types","clear","reset","module","exports"],"sources":["SourceHandlerFactory.js"],"sourcesContent":["const { SOURCE_TYPES } = require('../types');\nconst StaticSourceHandler = require('./StaticSourceHandler');\nconst SemiStaticSourceHandler = require('./SemiStaticSourceHandler');\nconst DynamicConsistentSourceHandler = require('./DynamicConsistentSourceHandler');\nconst DynamicUnstructuredSourceHandler = require('./DynamicUnstructuredSourceHandler');\n\n/**\n * Factory for creating source handlers\n */\nclass SourceHandlerFactory {\n  constructor() {\n    this.handlers = new Map();\n    this.registerDefaultHandlers();\n  }\n\n  /**\n   * Register default handlers\n   */\n  registerDefaultHandlers() {\n    this.registerHandler(SOURCE_TYPES.STATIC, StaticSourceHandler);\n    this.registerHandler(SOURCE_TYPES.SEMI_STATIC, SemiStaticSourceHandler);\n    this.registerHandler(SOURCE_TYPES.DYNAMIC_CONSISTENT, DynamicConsistentSourceHandler);\n    this.registerHandler(SOURCE_TYPES.DYNAMIC_UNSTRUCTURED, DynamicUnstructuredSourceHandler);\n  }\n\n  /**\n   * Register a handler class for a source type\n   */\n  registerHandler(sourceType, handlerClass, force = false) {\n    if (!sourceType || !handlerClass) {\n      throw new Error('Source type and handler class are required');\n    }\n    \n    if (this.handlers.has(sourceType) && !force) {\n      throw new Error(`Handler for type ${sourceType} is already registered`);\n    }\n    \n    this.handlers.set(sourceType, handlerClass);\n  }\n\n  /**\n   * Unregister a handler for a source type\n   */\n  unregisterHandler(sourceType) {\n    return this.handlers.delete(sourceType);\n  }\n\n  /**\n   * Create a handler instance for the given configuration\n   */\n  createHandler(config) {\n    if (!config) {\n      throw new Error('Configuration is required');\n    }\n    \n    if (!config.type) {\n      throw new Error('Configuration must specify a type');\n    }\n\n    const HandlerClass = this.handlers.get(config.type);\n    if (!HandlerClass) {\n      throw new Error(`No handler registered for type: ${config.type}`);\n    }\n\n    return new HandlerClass(config);\n  }\n\n  /**\n   * Check if a handler is registered for the given source type\n   */\n  hasHandler(sourceType) {\n    return this.handlers.has(sourceType);\n  }\n\n  /**\n   * Get all registered source types\n   */\n  getRegisteredTypes() {\n    return Array.from(this.handlers.keys());\n  }\n\n  /**\n   * Get handler class for source type\n   */\n  getHandlerClass(sourceType) {\n    return this.handlers.get(sourceType) || null;\n  }\n\n  /**\n   * Validate configuration for a source type\n   */\n  async validateConfig(config) {\n    if (!config || !config.type) {\n      throw new Error('Configuration with type is required');\n    }\n\n    const HandlerClass = this.handlers.get(config.type);\n    if (!HandlerClass) {\n      throw new Error(`No handler registered for source type: ${config.type}`);\n    }\n\n    // Create temporary instance to validate config\n    const tempHandler = new HandlerClass(config);\n    if (typeof tempHandler.validateConfig === 'function') {\n      return await tempHandler.validateConfig(config);\n    }\n\n    return true;\n  }\n\n  /**\n   * Validate handler configuration (alias for validateConfig)\n   */\n  async validateHandlerConfig(config) {\n    return await this.validateConfig(config);\n  }\n\n  /**\n   * Check if a handler type is supported\n   */\n  isTypeSupported(sourceType) {\n    return this.handlers.has(sourceType);\n  }\n\n  /**\n   * Validate multiple configurations\n   */\n  async validateHandlerConfigs(configs) {\n    if (!Array.isArray(configs)) {\n      throw new Error('Configurations must be an array');\n    }\n\n    const results = [];\n    for (const config of configs) {\n      try {\n        await this.validateConfig(config);\n        results.push({ valid: true, config });\n      } catch (error) {\n        results.push({ valid: false, config, error: error.message });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get default configuration for a handler type\n   */\n  getDefaultConfig(sourceType) {\n    const HandlerClass = this.handlers.get(sourceType);\n    if (!HandlerClass) {\n      return null;\n    }\n\n    // Return basic default config\n    return {\n      type: sourceType,\n      enabled: true,\n      config: {}\n    };\n  }\n\n  /**\n   * Merge user config with defaults\n   */\n  mergeWithDefaults(userConfig) {\n    if (!userConfig || !userConfig.type) {\n      throw new Error('User configuration with type is required');\n    }\n\n    const defaultConfig = this.getDefaultConfig(userConfig.type);\n    if (!defaultConfig) {\n      throw new Error(`No default configuration available for type: ${userConfig.type}`);\n    }\n\n    return {\n      ...defaultConfig,\n      ...userConfig,\n      config: {\n        ...defaultConfig.config,\n        ...userConfig.config\n      }\n    };\n  }\n\n  /**\n   * Initialize a handler\n   */\n  async initializeHandler(handler) {\n    if (handler && typeof handler.initialize === 'function') {\n      await handler.initialize();\n    }\n  }\n\n  /**\n   * Cleanup a handler\n   */\n  async cleanupHandler(handler) {\n    if (handler && typeof handler.cleanup === 'function') {\n      await handler.cleanup();\n    }\n  }\n\n  /**\n   * Create multiple handlers from configurations\n   */\n  createHandlers(configs) {\n    if (!Array.isArray(configs)) {\n      throw new Error('Configurations must be an array');\n    }\n\n    return configs.map(config => this.createHandler(config));\n  }\n\n  /**\n   * Get factory statistics\n   */\n  getStats() {\n    return {\n      registeredTypes: this.handlers.size,\n      types: Array.from(this.handlers.keys())\n    };\n  }\n\n  /**\n   * Clear all registered handlers\n   */\n  clear() {\n    this.handlers.clear();\n  }\n\n  /**\n   * Reset to default handlers\n   */\n  reset() {\n    this.clear();\n    this.registerDefaultHandlers();\n  }\n}\n\nmodule.exports = SourceHandlerFactory;\n"],"mappings":"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","ignoreList":[]}