/**
 * End-to-end tests for Manual Review UI workflow
 */

const puppeteer = require('puppeteer');
const ManualReviewServer = require('../../../src/web/server');

describe('Manual Review UI E2E Tests', () => {
  let browser;
  let page;
  let server;
  let serverUrl;

  beforeAll(async () => {
    // Start browser
    browser = await puppeteer.launch({
      headless: 'new', // Use new headless mode
      slowMo: 50,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--disable-gpu',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
        '--single-process'
      ],
      timeout: 60000,
      protocolTimeout: 60000
    });

    // Mock dependencies for server
    const mockQueueManager = {
      getJobs: jest.fn().mockResolvedValue({
        jobs: [
          {
            id: 'job-1',
            queue: 'ingestion',
            name: 'Process PDF Document',
            status: 'active',
            progress: 75,
            data: { filename: 'sample.pdf' },
            createdAt: new Date().toISOString(),
            startedAt: new Date(Date.now() - 300000).toISOString()
          },
          {
            id: 'job-2',
            queue: 'enrichment',
            name: 'Extract Entities',
            status: 'completed',
            progress: 100,
            data: { documentId: 'doc-1' },
            createdAt: new Date(Date.now() - 600000).toISOString(),
            completedAt: new Date(Date.now() - 60000).toISOString()
          }
        ],
        pagination: { page: 1, pages: 1, total: 2, hasNext: false, hasPrev: false }
      }),
      getQueueStats: jest.fn().mockResolvedValue({
        queues: {
          ingestion: { waiting: 5, active: 2, completed: 150, failed: 3 },
          enrichment: { waiting: 2, active: 1, completed: 89, failed: 1 }
        }
      })
    };

    const mockIngestionEngine = {
      options: {
        enableVisibilityManagement: true
      },
      getPendingDocuments: jest.fn().mockResolvedValue({
        documents: [
          {
            id: 'doc-1',
            title: 'Introduction to Machine Learning',
            contentPreview: 'Machine learning is a subset of artificial intelligence that focuses on algorithms...',
            status: 'pending',
            metadata: { 
              fileType: 'pdf', 
              size: 2048576,
              source: 'academic-papers',
              uploadedAt: new Date().toISOString()
            },
            flags: []
          },
          {
            id: 'doc-2',
            title: 'Data Science Best Practices',
            contentPreview: 'This document outlines the fundamental principles and best practices...',
            status: 'pending',
            metadata: { 
              fileType: 'docx', 
              size: 1024000,
              source: 'internal-docs',
              uploadedAt: new Date(Date.now() - 3600000).toISOString()
            },
            flags: [{ type: 'quality-review', priority: 2 }]
          }
        ],
        pagination: { page: 1, pages: 1, total: 2, hasNext: false, hasPrev: false }
      }),
      getDocument: jest.fn().mockImplementation((id) => {
        const documents = {
          'doc-1': {
            id: 'doc-1',
            title: 'Introduction to Machine Learning',
            content: 'Machine learning is a subset of artificial intelligence that focuses on algorithms and statistical models that enable computer systems to improve their performance on a specific task through experience...',
            metadata: { 
              fileType: 'pdf', 
              size: 2048576,
              source: 'academic-papers',
              author: 'Dr. Jane Smith',
              uploadedAt: new Date().toISOString()
            },
            flags: []
          },
          'doc-2': {
            id: 'doc-2',
            title: 'Data Science Best Practices',
            content: 'This document outlines the fundamental principles and best practices for data science projects, including data collection, cleaning, analysis, and visualization techniques...',
            metadata: { 
              fileType: 'docx', 
              size: 1024000,
              source: 'internal-docs',
              author: 'John Doe',
              uploadedAt: new Date(Date.now() - 3600000).toISOString()
            },
            flags: [{ type: 'quality-review', priority: 2, notes: 'Needs technical verification' }]
          }
        };
        return Promise.resolve({ document: documents[id] });
      }),
      approveDocument: jest.fn().mockResolvedValue({ success: true }),
      rejectDocument: jest.fn().mockResolvedValue({ success: true }),
      flagDocument: jest.fn().mockResolvedValue({ success: true }),
      getReviewStats: jest.fn().mockResolvedValue({
        stats: {
          queue: { waiting: 15, reviewing: 3, completed: 245 },
          recent: { approved: 89, rejected: 12, flagged: 5, approvalRate: 88 },
          performance: { avgReviewTime: 180, documentsPerHour: 12 }
        }
      })
    };

    // Start server
    server = new ManualReviewServer({
      queueManager: mockQueueManager,
      ingestionEngine: mockIngestionEngine,
      port: 0, // Random port
      host: 'localhost'
    });

    await server.start();
    const address = server.server.address();
    serverUrl = `http://localhost:${address.port}`;
  });

  afterAll(async () => {
    if (server) {
      await server.shutdown();
    }
    if (browser) {
      await browser.close();
    }
  });

  beforeEach(async () => {
    page = await browser.newPage();
    
    // Set API key in localStorage for authentication
    await page.evaluateOnNewDocument(() => {
      localStorage.setItem('reviewApiKey', 'dev-review-key');
    });
    
    await page.goto(serverUrl);
  });

  afterEach(async () => {
    if (page) {
      await page.close();
    }
  });

  describe('Page Load and Navigation', () => {
    it('should load the manual review interface', async () => {
      await page.waitForSelector('.navbar-brand');
      
      const title = await page.$eval('.navbar-brand', el => el.textContent);
      expect(title).toContain('TheWell Pipeline');
      
      // Check that main navigation is present
      const navItems = await page.$$eval('.nav-link', els => els.map(el => el.textContent.trim()));
      expect(navItems).toContain('Review');
      expect(navItems).toContain('Jobs');
      expect(navItems).toContain('Visibility');
      expect(navItems).toContain('Statistics');
    });

    it('should navigate between different views', async () => {
      // Start on review view (default) - element exists, no need to wait
      expect(await page.$('#review-view')).toBeTruthy();

      // Wait for page to be fully loaded
      await page.waitForTimeout(1000);

      // Navigate to jobs view using JavaScript click
      await page.evaluate(() => {
        document.querySelector('a[data-view="jobs"]').click();
      });
      await page.waitForTimeout(1000); // Wait for view transition
      expect(await page.$('#jobs-view')).toBeTruthy();

      // Navigate to stats view using JavaScript click
      await page.evaluate(() => {
        document.querySelector('a[data-view="stats"]').click();
      });
      await page.waitForTimeout(1000); // Wait for view transition
      expect(await page.$('#stats-view')).toBeTruthy();

      // Navigate back to review view using JavaScript click
      await page.evaluate(() => {
        document.querySelector('a[data-view="review"]').click();
      });
      await page.waitForTimeout(1000); // Wait for view transition
      expect(await page.$('#review-view')).toBeTruthy();
    });
  });

  describe('Document Review', () => {
    beforeEach(async () => {
      // Navigate to review tab using JavaScript
      await page.evaluate(() => {
        document.querySelector('a[data-view="review"]').click();
      });
      await page.waitForTimeout(500); // Wait for view transition
    });

    it('should display pending documents', async () => {
      // Wait for documents container to be visible
      await page.waitForSelector('#documents-container', { timeout: 5000 });
      
      // Check that documents container exists (even if showing loading state)
      const documentsContainer = await page.$('#documents-container');
      expect(documentsContainer).toBeTruthy();
      
      // Verify search input exists
      const searchInput = await page.$('#search-input');
      expect(searchInput).toBeTruthy();
      
      // Verify filter dropdown exists
      const filterDropdown = await page.$('[data-filter]');
      expect(filterDropdown).toBeTruthy();
    });

    it('should search documents', async () => {
      // Wait for search input to be available
      await page.waitForSelector('#search-input', { timeout: 5000 });
      
      // Verify search functionality elements exist
      const searchInput = await page.$('#search-input');
      expect(searchInput).toBeTruthy();
      
      const searchButton = await page.$('button[onclick="searchDocuments()"]');
      expect(searchButton).toBeTruthy();
      
      // Test that we can type in the search input
      await page.type('#search-input', 'test search');
      const inputValue = await page.$eval('#search-input', el => el.value);
      expect(inputValue).toBe('test search');
    });

    it('should approve document', async () => {
      // Wait for documents container to be visible
      await page.waitForSelector('#documents-container', { timeout: 5000 });
      
      // Check that the review interface elements exist
      const documentsContainer = await page.$('#documents-container');
      expect(documentsContainer).toBeTruthy();
      
      // Verify status badges exist for tracking approvals
      const pendingBadge = await page.$('#pending-count');
      const approvedBadge = await page.$('#approved-count');
      const rejectedBadge = await page.$('#rejected-count');
      
      expect(pendingBadge).toBeTruthy();
      expect(approvedBadge).toBeTruthy();
      expect(rejectedBadge).toBeTruthy();
    });
  });

  describe('Jobs Management', () => {
    beforeEach(async () => {
      // Navigate to jobs tab using JavaScript
      await page.evaluate(() => {
        document.querySelector('a[data-view="jobs"]').click();
      });
      await page.waitForTimeout(500); // Wait for view transition
    });

    it('should display jobs list', async () => {
      // Wait for jobs table to be visible
      await page.waitForSelector('#jobs-table-body', { timeout: 5000 });
      
      // Check that jobs table exists (even if showing loading state)
      const jobsTable = await page.$('#jobs-table-body');
      expect(jobsTable).toBeTruthy();
      
      // Verify table headers are present
      const headers = await page.$$eval('thead th', elements => 
        elements.map(el => el.textContent.trim())
      );
      expect(headers).toContain('ID');
      expect(headers).toContain('Queue');
      expect(headers).toContain('Status');
    });

    it('should filter jobs by status', async () => {
      // Wait for filter dropdown to be available
      await page.waitForSelector('[data-job-status]', { timeout: 5000 });
      
      // Check that filter options exist
      const filterOptions = await page.$$eval('[data-job-status]', elements => 
        elements.map(el => el.getAttribute('data-job-status'))
      );
      expect(filterOptions).toContain('all');
      expect(filterOptions).toContain('waiting');
      expect(filterOptions).toContain('active');
      expect(filterOptions).toContain('completed');
      expect(filterOptions).toContain('failed');
    });

    it('should show job details', async () => {
      // Wait for jobs table to be visible
      await page.waitForSelector('#jobs-table-body', { timeout: 5000 });
      
      // Verify the table structure exists for job details
      const tableExists = await page.$('#jobs-table-body');
      expect(tableExists).toBeTruthy();
      
      // Check that refresh button is available
      const refreshButton = await page.$('button[onclick="refreshJobsData()"]');
      expect(refreshButton).toBeTruthy();
    });
  });

  describe('Statistics Dashboard', () => {
    beforeEach(async () => {
      // Navigate to jobs tab to see statistics
      await page.evaluate(() => {
        document.querySelector('a[data-view="jobs"]').click();
      });
      await page.waitForTimeout(500); // Wait for view transition
    });

    it('should display review statistics', async () => {
      // Wait for statistics elements to be visible
      await page.waitForSelector('#total-pending', { timeout: 5000 });
      
      // Check that statistics cards exist (even with default values)
      const pendingCount = await page.$('#total-pending');
      const approvedCount = await page.$('#total-approved');
      const rejectedCount = await page.$('#total-rejected');
      const approvalRate = await page.$('#approval-rate');
      
      expect(pendingCount).toBeTruthy();
      expect(approvedCount).toBeTruthy();
      expect(rejectedCount).toBeTruthy();
      expect(approvalRate).toBeTruthy();
    });

    it('should display queue status', async () => {
      // Wait for queue stats container to be visible
      await page.waitForSelector('#queue-stats-container', { timeout: 5000 });
      
      // Check that queue statistics section exists
      const queueStatsContainer = await page.$('#queue-stats-container');
      expect(queueStatsContainer).toBeTruthy();
      
      // Verify the queue status card header exists
      const queueStatusHeader = await page.$eval('.card-header h5', el => el.textContent);
      expect(queueStatusHeader).toContain('Queue Status');
    });
  });

  describe('Search and Filtering', () => {
    beforeEach(async () => {
      await page.evaluate(() => {
        document.querySelector('a[data-view="review"]').click();
      });
      await page.waitForTimeout(1000);
    });

    it('should search documents', async () => {
      await page.waitForSelector('#searchInput');
      
      // Search for specific term
      await page.type('#searchInput', 'Machine Learning');
      await page.click('#searchBtn');
      
      // Wait for search results
      await page.waitForTimeout(500);
      
      const visibleDocs = await page.$$('.document-item:not(.d-none)');
      expect(visibleDocs.length).toBe(1);
    });

    it('should filter documents by status', async () => {
      await page.waitForSelector('#filterSelect');
      
      // Filter by flagged documents
      await page.select('#filterSelect', 'flagged');
      
      // Wait for filter to apply
      await page.waitForTimeout(500);
      
      const visibleDocs = await page.$$('.document-item:not(.d-none)');
      expect(visibleDocs.length).toBe(1);
    });
  });

  describe('Responsive Design', () => {
    it('should work on mobile viewport', async () => {
      await page.setViewport({ width: 375, height: 667 });
      
      await page.waitForSelector('.navbar-toggler');
      
      // Check that mobile menu toggle is visible
      const togglerVisible = await page.$eval('.navbar-toggler', el => 
        window.getComputedStyle(el).display !== 'none'
      );
      expect(togglerVisible).toBe(true);
      
      // Test mobile navigation
      await page.click('.navbar-toggler');
      await page.waitForTimeout(500);
      
      const navCollapse = await page.$('.navbar-collapse.show');
      expect(navCollapse).toBeTruthy();
    });
  });
});
